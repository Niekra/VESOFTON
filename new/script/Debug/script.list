
script.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001bd4  08001bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c00  08001c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08001c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          00012d98  20000084  20000084  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012e1c  20012e1c  00020084  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008fe3  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000018a7  00000000  00000000  00029091  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a90  00000000  00000000  0002a938  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009a8  00000000  00000000  0002b3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003d43  00000000  00000000  0002bd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a9e  00000000  00000000  0002fab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033551  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d78  00000000  00000000  000335d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001bbc 	.word	0x08001bbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08001bbc 	.word	0x08001bbc

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <DAC_SetChannel1Data+0x30>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40007400 	.word	0x40007400

080002c0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f023 0201 	bic.w	r2, r3, #1
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2221      	movs	r2, #33	; 0x21
 80002f6:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a45      	ldr	r2, [pc, #276]	; (8000410 <DMA_DeInit+0x150>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d103      	bne.n	8000308 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000300:	4b44      	ldr	r3, [pc, #272]	; (8000414 <DMA_DeInit+0x154>)
 8000302:	223d      	movs	r2, #61	; 0x3d
 8000304:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000306:	e07e      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a43      	ldr	r2, [pc, #268]	; (8000418 <DMA_DeInit+0x158>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d104      	bne.n	800031a <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000310:	4b40      	ldr	r3, [pc, #256]	; (8000414 <DMA_DeInit+0x154>)
 8000312:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000316:	609a      	str	r2, [r3, #8]
}
 8000318:	e075      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a3f      	ldr	r2, [pc, #252]	; (800041c <DMA_DeInit+0x15c>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d104      	bne.n	800032c <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000322:	4b3c      	ldr	r3, [pc, #240]	; (8000414 <DMA_DeInit+0x154>)
 8000324:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000328:	609a      	str	r2, [r3, #8]
}
 800032a:	e06c      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a3c      	ldr	r2, [pc, #240]	; (8000420 <DMA_DeInit+0x160>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d104      	bne.n	800033e <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000334:	4b37      	ldr	r3, [pc, #220]	; (8000414 <DMA_DeInit+0x154>)
 8000336:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800033a:	609a      	str	r2, [r3, #8]
}
 800033c:	e063      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a38      	ldr	r2, [pc, #224]	; (8000424 <DMA_DeInit+0x164>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d103      	bne.n	800034e <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000346:	4b33      	ldr	r3, [pc, #204]	; (8000414 <DMA_DeInit+0x154>)
 8000348:	4a37      	ldr	r2, [pc, #220]	; (8000428 <DMA_DeInit+0x168>)
 800034a:	60da      	str	r2, [r3, #12]
}
 800034c:	e05b      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <DMA_DeInit+0x16c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d103      	bne.n	800035e <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <DMA_DeInit+0x154>)
 8000358:	4a35      	ldr	r2, [pc, #212]	; (8000430 <DMA_DeInit+0x170>)
 800035a:	60da      	str	r2, [r3, #12]
}
 800035c:	e053      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a34      	ldr	r2, [pc, #208]	; (8000434 <DMA_DeInit+0x174>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d103      	bne.n	800036e <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000366:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <DMA_DeInit+0x154>)
 8000368:	4a33      	ldr	r2, [pc, #204]	; (8000438 <DMA_DeInit+0x178>)
 800036a:	60da      	str	r2, [r3, #12]
}
 800036c:	e04b      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a32      	ldr	r2, [pc, #200]	; (800043c <DMA_DeInit+0x17c>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d104      	bne.n	8000380 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <DMA_DeInit+0x154>)
 8000378:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800037c:	60da      	str	r2, [r3, #12]
}
 800037e:	e042      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a2f      	ldr	r2, [pc, #188]	; (8000440 <DMA_DeInit+0x180>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d103      	bne.n	8000390 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000388:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <DMA_DeInit+0x184>)
 800038a:	223d      	movs	r2, #61	; 0x3d
 800038c:	609a      	str	r2, [r3, #8]
}
 800038e:	e03a      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a2d      	ldr	r2, [pc, #180]	; (8000448 <DMA_DeInit+0x188>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d104      	bne.n	80003a2 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000398:	4b2a      	ldr	r3, [pc, #168]	; (8000444 <DMA_DeInit+0x184>)
 800039a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800039e:	609a      	str	r2, [r3, #8]
}
 80003a0:	e031      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a29      	ldr	r2, [pc, #164]	; (800044c <DMA_DeInit+0x18c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d104      	bne.n	80003b4 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80003aa:	4b26      	ldr	r3, [pc, #152]	; (8000444 <DMA_DeInit+0x184>)
 80003ac:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80003b0:	609a      	str	r2, [r3, #8]
}
 80003b2:	e028      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a26      	ldr	r2, [pc, #152]	; (8000450 <DMA_DeInit+0x190>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d104      	bne.n	80003c6 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <DMA_DeInit+0x184>)
 80003be:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80003c2:	609a      	str	r2, [r3, #8]
}
 80003c4:	e01f      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a22      	ldr	r2, [pc, #136]	; (8000454 <DMA_DeInit+0x194>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d103      	bne.n	80003d6 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80003ce:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <DMA_DeInit+0x184>)
 80003d0:	4a15      	ldr	r2, [pc, #84]	; (8000428 <DMA_DeInit+0x168>)
 80003d2:	60da      	str	r2, [r3, #12]
}
 80003d4:	e017      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <DMA_DeInit+0x198>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d103      	bne.n	80003e6 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <DMA_DeInit+0x184>)
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <DMA_DeInit+0x170>)
 80003e2:	60da      	str	r2, [r3, #12]
}
 80003e4:	e00f      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1c      	ldr	r2, [pc, #112]	; (800045c <DMA_DeInit+0x19c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d103      	bne.n	80003f6 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <DMA_DeInit+0x184>)
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <DMA_DeInit+0x178>)
 80003f2:	60da      	str	r2, [r3, #12]
}
 80003f4:	e007      	b.n	8000406 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a19      	ldr	r2, [pc, #100]	; (8000460 <DMA_DeInit+0x1a0>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d103      	bne.n	8000406 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <DMA_DeInit+0x184>)
 8000400:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000404:	60da      	str	r2, [r3, #12]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40026010 	.word	0x40026010
 8000414:	40026000 	.word	0x40026000
 8000418:	40026028 	.word	0x40026028
 800041c:	40026040 	.word	0x40026040
 8000420:	40026058 	.word	0x40026058
 8000424:	40026070 	.word	0x40026070
 8000428:	2000003d 	.word	0x2000003d
 800042c:	40026088 	.word	0x40026088
 8000430:	20000f40 	.word	0x20000f40
 8000434:	400260a0 	.word	0x400260a0
 8000438:	203d0000 	.word	0x203d0000
 800043c:	400260b8 	.word	0x400260b8
 8000440:	40026410 	.word	0x40026410
 8000444:	40026400 	.word	0x40026400
 8000448:	40026428 	.word	0x40026428
 800044c:	40026440 	.word	0x40026440
 8000450:	40026458 	.word	0x40026458
 8000454:	40026470 	.word	0x40026470
 8000458:	40026488 	.word	0x40026488
 800045c:	400264a0 	.word	0x400264a0
 8000460:	400264b8 	.word	0x400264b8

08000464 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <DMA_Init+0xa8>)
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800048e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800049a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	6a1b      	ldr	r3, [r3, #32]
 80004a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004b2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	4313      	orrs	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f023 0307 	bic.w	r3, r3, #7
 80004d2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4313      	orrs	r3, r2
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	691a      	ldr	r2, [r3, #16]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	689a      	ldr	r2, [r3, #8]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60da      	str	r2, [r3, #12]
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	f01c803f 	.word	0xf01c803f

08000510 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f043 0201 	orr.w	r2, r3, #1
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800052e:	e005      	b.n	800053c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f023 0201 	bic.w	r2, r3, #1
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000546:	b480      	push	{r7}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d002      	beq.n	8000564 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800055e:	2301      	movs	r3, #1
 8000560:	73fb      	strb	r3, [r7, #15]
 8000562:	e001      	b.n	8000568 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000568:	7bfb      	ldrb	r3, [r7, #15]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000574:	b480      	push	{r7}
 8000576:	b087      	sub	sp, #28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <DMA_GetFlagStatus+0x68>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d802      	bhi.n	8000594 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <DMA_GetFlagStatus+0x6c>)
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	e001      	b.n	8000598 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <DMA_GetFlagStatus+0x70>)
 8000596:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	e002      	b.n	80005b0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005b6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80005ba:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	4013      	ands	r3, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80005c6:	2301      	movs	r3, #1
 80005c8:	75fb      	strb	r3, [r7, #23]
 80005ca:	e001      	b.n	80005d0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80005cc:	2300      	movs	r3, #0
 80005ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	371c      	adds	r7, #28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	4002640f 	.word	0x4002640f
 80005e0:	40026000 	.word	0x40026000
 80005e4:	40026400 	.word	0x40026400

080005e8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <DMA_ClearFlag+0x50>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d802      	bhi.n	8000600 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <DMA_ClearFlag+0x54>)
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	e001      	b.n	8000604 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <DMA_ClearFlag+0x58>)
 8000602:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d007      	beq.n	800061e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000614:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800061c:	e006      	b.n	800062c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000624:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	6093      	str	r3, [r2, #8]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	4002640f 	.word	0x4002640f
 800063c:	40026000 	.word	0x40026000
 8000640:	40026400 	.word	0x40026400

08000644 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	4613      	mov	r3, r2
 8000650:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00f      	beq.n	800067c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	615a      	str	r2, [r3, #20]
 800066e:	e005      	b.n	800067c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b80      	cmp	r3, #128	; 0x80
 8000680:	d014      	beq.n	80006ac <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d008      	beq.n	800069a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	f003 031e 	and.w	r3, r3, #30
 8000692:	431a      	orrs	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000698:	e008      	b.n	80006ac <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	f003 031e 	and.w	r3, r3, #30
 80006a4:	43db      	mvns	r3, r3
 80006a6:	401a      	ands	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
	...

080006b8 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <DMA_GetITStatus+0xa0>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d802      	bhi.n	80006dc <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <DMA_GetITStatus+0xa4>)
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	e001      	b.n	80006e0 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <DMA_GetITStatus+0xa8>)
 80006de:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006e6:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00a      	beq.n	8000704 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	0adb      	lsrs	r3, r3, #11
 80006f2:	f003 031e 	and.w	r3, r3, #30
 80006f6:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4013      	ands	r3, r2
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	e004      	b.n	800070e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	e002      	b.n	8000726 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800072c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000730:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	4013      	ands	r3, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d005      	beq.n	8000748 <DMA_GetITStatus+0x90>
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000742:	2301      	movs	r3, #1
 8000744:	75fb      	strb	r3, [r7, #23]
 8000746:	e001      	b.n	800074c <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800074c:	7dfb      	ldrb	r3, [r7, #23]
}
 800074e:	4618      	mov	r0, r3
 8000750:	371c      	adds	r7, #28
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	4002640f 	.word	0x4002640f
 800075c:	40026000 	.word	0x40026000
 8000760:	40026400 	.word	0x40026400

08000764 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <DMA_ClearITPendingBit+0x50>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d802      	bhi.n	800077c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <DMA_ClearITPendingBit+0x54>)
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e001      	b.n	8000780 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <DMA_ClearITPendingBit+0x58>)
 800077e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000790:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000798:	e006      	b.n	80007a8 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007a0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	6093      	str	r3, [r2, #8]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	4002640f 	.word	0x4002640f
 80007b8:	40026000 	.word	0x40026000
 80007bc:	40026400 	.word	0x40026400

080007c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e076      	b.n	80008ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007dc:	2201      	movs	r2, #1
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d165      	bne.n	80008c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	2103      	movs	r1, #3
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	401a      	ands	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	4619      	mov	r1, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	431a      	orrs	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d003      	beq.n	8000836 <GPIO_Init+0x76>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d12e      	bne.n	8000894 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2103      	movs	r1, #3
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	795b      	ldrb	r3, [r3, #5]
 8000854:	4619      	mov	r1, r3
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	431a      	orrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	b29b      	uxth	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	2301      	movs	r3, #1
 8000870:	408b      	lsls	r3, r1
 8000872:	43db      	mvns	r3, r3
 8000874:	401a      	ands	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	7992      	ldrb	r2, [r2, #6]
 8000882:	4611      	mov	r1, r2
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	b292      	uxth	r2, r2
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	b292      	uxth	r2, r2
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	b29b      	uxth	r3, r3
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	2103      	movs	r1, #3
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	401a      	ands	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	79db      	ldrb	r3, [r3, #7]
 80008b4:	4619      	mov	r1, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	431a      	orrs	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d985      	bls.n	80007dc <GPIO_Init+0x1c>
    }
  }
}
 80008d0:	bf00      	nop
 80008d2:	371c      	adds	r7, #28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008da:	b480      	push	{r7}
 80008dc:	b085      	sub	sp, #20
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	807b      	strh	r3, [r7, #2]
 80008e6:	4613      	mov	r3, r2
 80008e8:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008f2:	787a      	ldrb	r2, [r7, #1]
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000902:	887b      	ldrh	r3, [r7, #2]
 8000904:	08db      	lsrs	r3, r3, #3
 8000906:	b29b      	uxth	r3, r3
 8000908:	4618      	mov	r0, r3
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	08db      	lsrs	r3, r3, #3
 800090e:	b29b      	uxth	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3208      	adds	r2, #8
 8000916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	210f      	movs	r1, #15
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	ea02 0103 	and.w	r1, r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f100 0208 	add.w	r2, r0, #8
 8000934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	b29b      	uxth	r3, r3
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3208      	adds	r2, #8
 8000944:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4313      	orrs	r3, r2
 800094c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800094e:	887b      	ldrh	r3, [r7, #2]
 8000950:	08db      	lsrs	r3, r3, #3
 8000952:	b29b      	uxth	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3208      	adds	r2, #8
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
	...

0800096c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d006      	beq.n	800098c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800097e:	4909      	ldr	r1, [pc, #36]	; (80009a4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4313      	orrs	r3, r2
 8000988:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800098a:	e006      	b.n	800099a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800098c:	4905      	ldr	r1, [pc, #20]	; (80009a4 <RCC_AHB1PeriphClockCmd+0x38>)
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	43db      	mvns	r3, r3
 8000996:	4013      	ands	r3, r2
 8000998:	630b      	str	r3, [r1, #48]	; 0x30
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40023800 	.word	0x40023800

080009a8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d006      	beq.n	80009c8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80009ba:	4909      	ldr	r1, [pc, #36]	; (80009e0 <RCC_APB1PeriphClockCmd+0x38>)
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <RCC_APB1PeriphClockCmd+0x38>)
 80009be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80009c6:	e006      	b.n	80009d6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80009c8:	4905      	ldr	r1, [pc, #20]	; (80009e0 <RCC_APB1PeriphClockCmd+0x38>)
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <RCC_APB1PeriphClockCmd+0x38>)
 80009cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4013      	ands	r3, r2
 80009d4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40023800 	.word	0x40023800

080009e4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d006      	beq.n	8000a04 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <RCC_APB2PeriphClockCmd+0x38>)
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <RCC_APB2PeriphClockCmd+0x38>)
 80009fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a02:	e006      	b.n	8000a12 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a04:	4905      	ldr	r1, [pc, #20]	; (8000a1c <RCC_APB2PeriphClockCmd+0x38>)
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <RCC_APB2PeriphClockCmd+0x38>)
 8000a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	4013      	ands	r3, r2
 8000a10:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40023800 	.word	0x40023800

08000a20 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	887a      	ldrh	r2, [r7, #2]
 8000a30:	819a      	strh	r2, [r3, #12]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	891b      	ldrh	r3, [r3, #8]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	4013      	ands	r3, r2
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e001      	b.n	8000a66 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
	...

08000a74 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <TIM_TimeBaseInit+0xb8>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d013      	beq.n	8000ab8 <TIM_TimeBaseInit+0x44>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <TIM_TimeBaseInit+0xbc>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d00f      	beq.n	8000ab8 <TIM_TimeBaseInit+0x44>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a9e:	d00b      	beq.n	8000ab8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <TIM_TimeBaseInit+0xc0>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d007      	beq.n	8000ab8 <TIM_TimeBaseInit+0x44>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <TIM_TimeBaseInit+0xc4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d003      	beq.n	8000ab8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <TIM_TimeBaseInit+0xc8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d108      	bne.n	8000aca <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
 8000aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000abe:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	885a      	ldrh	r2, [r3, #2]
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <TIM_TimeBaseInit+0xcc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d00c      	beq.n	8000aec <TIM_TimeBaseInit+0x78>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <TIM_TimeBaseInit+0xd0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d008      	beq.n	8000aec <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ae0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	891a      	ldrh	r2, [r3, #8]
 8000ae6:	89fb      	ldrh	r3, [r7, #14]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	89fa      	ldrh	r2, [r7, #14]
 8000af0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	881a      	ldrh	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <TIM_TimeBaseInit+0xb8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d003      	beq.n	8000b12 <TIM_TimeBaseInit+0x9e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <TIM_TimeBaseInit+0xbc>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d104      	bne.n	8000b1c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	7a9b      	ldrb	r3, [r3, #10]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	829a      	strh	r2, [r3, #20]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	40010400 	.word	0x40010400
 8000b34:	40000400 	.word	0x40000400
 8000b38:	40000800 	.word	0x40000800
 8000b3c:	40000c00 	.word	0x40000c00
 8000b40:	40001000 	.word	0x40001000
 8000b44:	40001400 	.word	0x40001400

08000b48 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d008      	beq.n	8000b6c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8000b6a:	e007      	b.n	8000b7c <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	801a      	strh	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d008      	beq.n	8000baa <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000ba8:	e007      	b.n	8000bba <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f023 0301 	bic.w	r3, r3, #1
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	801a      	strh	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	817b      	strh	r3, [r7, #10]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	81fb      	strh	r3, [r7, #14]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	8c1b      	ldrh	r3, [r3, #32]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	8c1b      	ldrh	r3, [r3, #32]
 8000bee:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	889b      	ldrh	r3, [r3, #4]
 8000bf4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	8b9b      	ldrh	r3, [r3, #28]
 8000bfa:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8000bfc:	897b      	ldrh	r3, [r7, #10]
 8000bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c02:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8000c04:	897b      	ldrh	r3, [r7, #10]
 8000c06:	f023 0303 	bic.w	r3, r3, #3
 8000c0a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	881a      	ldrh	r2, [r3, #0]
 8000c10:	897b      	ldrh	r3, [r7, #10]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c1c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	899b      	ldrh	r3, [r3, #12]
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	89fb      	ldrh	r3, [r7, #14]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	885b      	ldrh	r3, [r3, #2]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <TIM_OC3Init+0x104>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d003      	beq.n	8000c4a <TIM_OC3Init+0x86>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <TIM_OC3Init+0x108>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12b      	bne.n	8000ca2 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c50:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	89db      	ldrh	r3, [r3, #14]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	89fb      	ldrh	r3, [r7, #14]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c66:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	889b      	ldrh	r3, [r3, #4]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	89fb      	ldrh	r3, [r7, #14]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8000c76:	89bb      	ldrh	r3, [r7, #12]
 8000c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c7c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000c7e:	89bb      	ldrh	r3, [r7, #12]
 8000c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c84:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	8a1b      	ldrh	r3, [r3, #16]
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	89bb      	ldrh	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	8a5b      	ldrh	r3, [r3, #18]
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	89bb      	ldrh	r3, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	89ba      	ldrh	r2, [r7, #12]
 8000ca6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	897a      	ldrh	r2, [r7, #10]
 8000cac:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	89fa      	ldrh	r2, [r7, #14]
 8000cba:	841a      	strh	r2, [r3, #32]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40010400 	.word	0x40010400

08000cd0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	81bb      	strh	r3, [r7, #12]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	817b      	strh	r3, [r7, #10]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	8c1b      	ldrh	r3, [r3, #32]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	8c1b      	ldrh	r3, [r3, #32]
 8000cfa:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	8b9b      	ldrh	r3, [r3, #28]
 8000d06:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8000d08:	89bb      	ldrh	r3, [r7, #12]
 8000d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d0e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000d10:	89bb      	ldrh	r3, [r7, #12]
 8000d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d16:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	89bb      	ldrh	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000d26:	897b      	ldrh	r3, [r7, #10]
 8000d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d2c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	899b      	ldrh	r3, [r3, #12]
 8000d32:	031b      	lsls	r3, r3, #12
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	897b      	ldrh	r3, [r7, #10]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	885b      	ldrh	r3, [r3, #2]
 8000d40:	031b      	lsls	r3, r3, #12
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	897b      	ldrh	r3, [r7, #10]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <TIM_OC4Init+0xc4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d003      	beq.n	8000d5a <TIM_OC4Init+0x8a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <TIM_OC4Init+0xc8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10a      	bne.n	8000d70 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8000d5a:	89fb      	ldrh	r3, [r7, #14]
 8000d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d60:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	8a1b      	ldrh	r3, [r3, #16]
 8000d66:	019b      	lsls	r3, r3, #6
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	89fb      	ldrh	r3, [r7, #14]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	89fa      	ldrh	r2, [r7, #14]
 8000d74:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	89ba      	ldrh	r2, [r7, #12]
 8000d7a:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	897a      	ldrh	r2, [r7, #10]
 8000d88:	841a      	strh	r2, [r3, #32]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40010000 	.word	0x40010000
 8000d98:	40010400 	.word	0x40010400

08000d9c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	8b9b      	ldrh	r3, [r3, #28]
 8000db0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	f023 0308 	bic.w	r3, r3, #8
 8000db8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000dba:	89fa      	ldrh	r2, [r7, #14]
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	89fa      	ldrh	r2, [r7, #14]
 8000dc6:	839a      	strh	r2, [r3, #28]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	8b9b      	ldrh	r3, [r3, #28]
 8000de6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dee:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	89fa      	ldrh	r2, [r7, #14]
 8000e00:	839a      	strh	r2, [r3, #28]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d008      	beq.n	8000e34 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	899b      	ldrh	r3, [r3, #12]
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000e32:	e009      	b.n	8000e48 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	899b      	ldrh	r3, [r3, #12]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	819a      	strh	r2, [r3, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	821a      	strh	r2, [r3, #16]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	807b      	strh	r3, [r7, #2]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e82:	787b      	ldrb	r3, [r7, #1]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d008      	beq.n	8000e9a <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	899b      	ldrh	r3, [r3, #12]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8000e98:	e009      	b.n	8000eae <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	899b      	ldrh	r3, [r3, #12]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	819a      	strh	r2, [r3, #12]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <UB_VGA_Screen_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <UB_VGA_Screen_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <UB_VGA_Screen_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	80bb      	strh	r3, [r7, #4]
 8000ed4:	e017      	b.n	8000f06 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	80fb      	strh	r3, [r7, #6]
 8000eda:	e00d      	b.n	8000ef8 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	441a      	add	r2, r3
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <UB_VGA_Screen_Init+0x78>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	80fb      	strh	r3, [r7, #6]
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000efe:	d9ed      	bls.n	8000edc <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	3301      	adds	r3, #1
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	2bef      	cmp	r3, #239	; 0xef
 8000f0a:	d9e4      	bls.n	8000ed6 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8000f0c:	f000 f85c 	bl	8000fc8 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8000f10:	f000 f8ae 	bl	8001070 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8000f14:	f000 f93e 	bl	8001194 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8000f18:	f000 f910 	bl	800113c <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <UB_VGA_Screen_Init+0x7c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a02      	ldr	r2, [pc, #8]	; (8000f2c <UB_VGA_Screen_Init+0x74>)
 8000f22:	6093      	str	r3, [r2, #8]
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200000a0 	.word	0x200000a0
 8000f30:	200000ac 	.word	0x200000ac
 8000f34:	40026488 	.word	0x40026488

08000f38 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	81bb      	strh	r3, [r7, #12]
 8000f46:	e012      	b.n	8000f6e <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	81fb      	strh	r3, [r7, #14]
 8000f4c:	e008      	b.n	8000f60 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8000f4e:	79fa      	ldrb	r2, [r7, #7]
 8000f50:	89b9      	ldrh	r1, [r7, #12]
 8000f52:	89fb      	ldrh	r3, [r7, #14]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f811 	bl	8000f7c <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	81fb      	strh	r3, [r7, #14]
 8000f60:	89fb      	ldrh	r3, [r7, #14]
 8000f62:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f66:	d3f2      	bcc.n	8000f4e <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	81bb      	strh	r3, [r7, #12]
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	2bef      	cmp	r3, #239	; 0xef
 8000f72:	d9e9      	bls.n	8000f48 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	460b      	mov	r3, r1
 8000f88:	80bb      	strh	r3, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f94:	d301      	bcc.n	8000f9a <UB_VGA_SetPixel+0x1e>
 8000f96:	2300      	movs	r3, #0
 8000f98:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8000f9a:	88bb      	ldrh	r3, [r7, #4]
 8000f9c:	2bef      	cmp	r3, #239	; 0xef
 8000f9e:	d901      	bls.n	8000fa4 <UB_VGA_SetPixel+0x28>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8000fa4:	88ba      	ldrh	r2, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	019b      	lsls	r3, r3, #6
 8000fae:	441a      	add	r2, r3
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4903      	ldr	r1, [pc, #12]	; (8000fc4 <UB_VGA_SetPixel+0x48>)
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	54ca      	strb	r2, [r1, r3]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	200000ac 	.word	0x200000ac

08000fc8 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f7ff fccb 	bl	800096c <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8000fd6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fda:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <P_VGA_InitIO+0xa0>)
 8000ff2:	f7ff fbe5 	bl	80007c0 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <P_VGA_InitIO+0xa0>)
 8000ff8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000ffc:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000ffe:	2101      	movs	r1, #1
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fcb3 	bl	800096c <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8001006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800100a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800100c:	2302      	movs	r3, #2
 800100e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001010:	2303      	movs	r3, #3
 8001012:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001014:	2300      	movs	r3, #0
 8001016:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001018:	2301      	movs	r3, #1
 800101a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4812      	ldr	r0, [pc, #72]	; (800106c <P_VGA_InitIO+0xa4>)
 8001022:	f7ff fbcd 	bl	80007c0 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8001026:	2201      	movs	r2, #1
 8001028:	210b      	movs	r1, #11
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <P_VGA_InitIO+0xa4>)
 800102c:	f7ff fc55 	bl	80008da <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001030:	2101      	movs	r1, #1
 8001032:	2002      	movs	r0, #2
 8001034:	f7ff fc9a 	bl	800096c <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800103e:	2301      	movs	r3, #1
 8001040:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001042:	2300      	movs	r3, #0
 8001044:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001046:	2301      	movs	r3, #1
 8001048:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800104a:	2303      	movs	r3, #3
 800104c:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <P_VGA_InitIO+0xa4>)
 8001054:	f7ff fbb4 	bl	80007c0 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <P_VGA_InitIO+0xa4>)
 800105a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800105e:	831a      	strh	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000
 800106c:	40020400 	.word	0x40020400

08001070 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001076:	2101      	movs	r1, #1
 8001078:	2001      	movs	r0, #1
 800107a:	f7ff fcb3 	bl	80009e4 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 800107e:	230b      	movs	r3, #11
 8001080:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8001082:	2300      	movs	r3, #0
 8001084:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800108a:	2300      	movs	r3, #0
 800108c:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4828      	ldr	r0, [pc, #160]	; (8001138 <P_VGA_InitTIM+0xc8>)
 8001096:	f7ff fced 	bl	8000a74 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800109a:	2101      	movs	r1, #1
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fc83 	bl	80009a8 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 80010a2:	f640 236b 	movw	r3, #2667	; 0xa6b
 80010a6:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80010b0:	2300      	movs	r3, #0
 80010b2:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010be:	f7ff fcd9 	bl	8000a74 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80010c2:	2360      	movs	r3, #96	; 0x60
 80010c4:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80010c6:	2301      	movs	r3, #1
 80010c8:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 80010ca:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80010ce:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80010d0:	2302      	movs	r3, #2
 80010d2:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010dc:	f7ff fd72 	bl	8000bc4 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80010e0:	2108      	movs	r1, #8
 80010e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010e6:	f7ff fe59 	bl	8000d9c <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80010ee:	2301      	movs	r3, #1
 80010f0:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 80010f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010f6:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80010f8:	2302      	movs	r3, #2
 80010fa:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001104:	f7ff fde4 	bl	8000cd0 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001108:	2108      	movs	r1, #8
 800110a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800110e:	f7ff fe60 	bl	8000dd2 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8001112:	2101      	movs	r1, #1
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <P_VGA_InitTIM+0xc8>)
 8001116:	f7ff fd17 	bl	8000b48 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 800111a:	2101      	movs	r1, #1
 800111c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001120:	f7ff fd12 	bl	8000b48 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8001124:	2101      	movs	r1, #1
 8001126:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800112a:	f7ff fd2c 	bl	8000b86 <TIM_Cmd>

}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40010000 	.word	0x40010000

0800113c <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <P_VGA_InitINT+0x54>)
 8001148:	f7ff fa7c 	bl	8000644 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 800114c:	2344      	movs	r3, #68	; 0x44
 800114e:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001158:	2301      	movs	r3, #1
 800115a:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f832 	bl	80001c8 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8001164:	2201      	movs	r2, #1
 8001166:	2108      	movs	r1, #8
 8001168:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800116c:	f7ff fe4e 	bl	8000e0c <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8001170:	231c      	movs	r3, #28
 8001172:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800117c:	2301      	movs	r3, #1
 800117e:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f820 	bl	80001c8 <NVIC_Init>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40026488 	.word	0x40026488

08001194 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b090      	sub	sp, #64	; 0x40
 8001198:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 800119a:	2101      	movs	r1, #1
 800119c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80011a0:	f7ff fbe4 	bl	800096c <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 80011a4:	2100      	movs	r1, #0
 80011a6:	481b      	ldr	r0, [pc, #108]	; (8001214 <P_VGA_InitDMA+0x80>)
 80011a8:	f7ff f9b2 	bl	8000510 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 80011ac:	4819      	ldr	r0, [pc, #100]	; (8001214 <P_VGA_InitDMA+0x80>)
 80011ae:	f7ff f887 	bl	80002c0 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 80011b2:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80011b6:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <P_VGA_InitDMA+0x84>)
 80011ba:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <P_VGA_InitDMA+0x88>)
 80011be:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80011c0:	2340      	movs	r3, #64	; 0x40
 80011c2:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 80011c4:	f240 1341 	movw	r3, #321	; 0x141
 80011c8:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80011ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d2:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80011e0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80011e6:	2300      	movs	r3, #0
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80011ea:	2301      	movs	r3, #1
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80011f2:	2300      	movs	r3, #0
 80011f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <P_VGA_InitDMA+0x80>)
 80011fc:	f7ff f932 	bl	8000464 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <P_VGA_InitDMA+0x8c>)
 8001208:	f7ff fe33 	bl	8000e72 <TIM_DMACmd>
}
 800120c:	bf00      	nop
 800120e:	3740      	adds	r7, #64	; 0x40
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40026488 	.word	0x40026488
 8001218:	40021015 	.word	0x40021015
 800121c:	200000ac 	.word	0x200000ac
 8001220:	40010000 	.word	0x40010000

08001224 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8001228:	2108      	movs	r1, #8
 800122a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800122e:	f7ff fe10 	bl	8000e52 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <TIM2_IRQHandler+0xa8>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <TIM2_IRQHandler+0xa8>)
 800123c:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <TIM2_IRQHandler+0xa8>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001246:	d905      	bls.n	8001254 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <TIM2_IRQHandler+0xa8>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 800124e:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <TIM2_IRQHandler+0xac>)
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <TIM2_IRQHandler+0xa8>)
 8001252:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <TIM2_IRQHandler+0xa8>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d804      	bhi.n	8001266 <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <TIM2_IRQHandler+0xb0>)
 800125e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001262:	835a      	strh	r2, [r3, #26]
 8001264:	e003      	b.n	800126e <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <TIM2_IRQHandler+0xb0>)
 8001268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800126c:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <TIM2_IRQHandler+0xa8>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2b23      	cmp	r3, #35	; 0x23
 8001274:	d927      	bls.n	80012c6 <TIM2_IRQHandler+0xa2>
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <TIM2_IRQHandler+0xa8>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	f240 2202 	movw	r2, #514	; 0x202
 800127e:	4293      	cmp	r3, r2
 8001280:	d821      	bhi.n	80012c6 <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <TIM2_IRQHandler+0xb4>)
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <TIM2_IRQHandler+0xa8>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <TIM2_IRQHandler+0xb4>)
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <TIM2_IRQHandler+0xa8>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <TIM2_IRQHandler+0xb8>)
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <TIM2_IRQHandler+0xb8>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	b29b      	uxth	r3, r3
 80012a0:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 80012a2:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <TIM2_IRQHandler+0xb4>)
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <TIM2_IRQHandler+0xb4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <TIM2_IRQHandler+0xa8>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <TIM2_IRQHandler+0xa8>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f203 1341 	addw	r3, r3, #321	; 0x141
 80012c2:	4a02      	ldr	r2, [pc, #8]	; (80012cc <TIM2_IRQHandler+0xa8>)
 80012c4:	6053      	str	r3, [r2, #4]
    }
  }
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000a0 	.word	0x200000a0
 80012d0:	200000ac 	.word	0x200000ac
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40026488 	.word	0x40026488
 80012dc:	40010000 	.word	0x40010000

080012e0 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 80012e4:	490d      	ldr	r1, [pc, #52]	; (800131c <DMA2_Stream5_IRQHandler+0x3c>)
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <DMA2_Stream5_IRQHandler+0x40>)
 80012e8:	f7ff f9e6 	bl	80006b8 <DMA_GetITStatus>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d012      	beq.n	8001318 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 80012f2:	490a      	ldr	r1, [pc, #40]	; (800131c <DMA2_Stream5_IRQHandler+0x3c>)
 80012f4:	480a      	ldr	r0, [pc, #40]	; (8001320 <DMA2_Stream5_IRQHandler+0x40>)
 80012f6:	f7ff fa35 	bl	8000764 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <DMA2_Stream5_IRQHandler+0x44>)
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <DMA2_Stream5_IRQHandler+0x44>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <DMA2_Stream5_IRQHandler+0x40>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <DMA2_Stream5_IRQHandler+0x48>)
 8001312:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8001316:	835a      	strh	r2, [r3, #26]
  }
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20008800 	.word	0x20008800
 8001320:	40026488 	.word	0x40026488
 8001324:	40010000 	.word	0x40010000
 8001328:	40021000 	.word	0x40021000

0800132c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a10      	ldr	r2, [pc, #64]	; (800137c <STM_EVAL_LEDInit+0x50>)
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	2101      	movs	r1, #1
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fb13 	bl	800096c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <STM_EVAL_LEDInit+0x54>)
 800134a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001350:	2301      	movs	r3, #1
 8001352:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001354:	2300      	movs	r3, #0
 8001356:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800135c:	2302      	movs	r3, #2
 800135e:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <STM_EVAL_LEDInit+0x58>)
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	f107 0208 	add.w	r2, r7, #8
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fa26 	bl	80007c0 <GPIO_Init>
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	08001bdc 	.word	0x08001bdc
 8001380:	08001bd4 	.word	0x08001bd4
 8001384:	20000000 	.word	0x20000000

08001388 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <STM_EVAL_LEDOn+0x28>)
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4905      	ldr	r1, [pc, #20]	; (80013b4 <STM_EVAL_LEDOn+0x2c>)
 800139e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013a2:	831a      	strh	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000000 	.word	0x20000000
 80013b4:	08001bd4 	.word	0x08001bd4

080013b8 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80013bc:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <Audio_MAL_IRQHandler+0xe8>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <Audio_MAL_IRQHandler+0xec>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff f8d4 	bl	8000574 <DMA_GetFlagStatus>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d064      	beq.n	800149c <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80013d2:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <Audio_MAL_IRQHandler+0xf0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d04c      	beq.n	8001474 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80013da:	bf00      	nop
 80013dc:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <Audio_MAL_IRQHandler+0xe8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8b0 	bl	8000546 <DMA_GetCmdStatus>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f7      	bne.n	80013dc <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <Audio_MAL_IRQHandler+0xe8>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <Audio_MAL_IRQHandler+0xec>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f7ff f8f6 	bl	80005e8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80013fc:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <Audio_MAL_IRQHandler+0xf4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <Audio_MAL_IRQHandler+0xf8>)
 8001404:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <Audio_MAL_IRQHandler+0xf0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140e:	4293      	cmp	r3, r2
 8001410:	bf28      	it	cs
 8001412:	4613      	movcs	r3, r2
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <Audio_MAL_IRQHandler+0xf8>)
 8001416:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <Audio_MAL_IRQHandler+0xe8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4924      	ldr	r1, [pc, #144]	; (80014b0 <Audio_MAL_IRQHandler+0xf8>)
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f820 	bl	8000464 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <Audio_MAL_IRQHandler+0xe8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f870 	bl	8000510 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <Audio_MAL_IRQHandler+0xf4>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <Audio_MAL_IRQHandler+0xf0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d203      	bcs.n	8001446 <Audio_MAL_IRQHandler+0x8e>
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <Audio_MAL_IRQHandler+0xf0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	e000      	b.n	8001448 <Audio_MAL_IRQHandler+0x90>
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <Audio_MAL_IRQHandler+0xfc>)
 8001448:	4413      	add	r3, r2
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <Audio_MAL_IRQHandler+0xf4>)
 800144c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <Audio_MAL_IRQHandler+0xf0>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <Audio_MAL_IRQHandler+0xf0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800145a:	428b      	cmp	r3, r1
 800145c:	bf28      	it	cs
 800145e:	460b      	movcs	r3, r1
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <Audio_MAL_IRQHandler+0xf0>)
 8001464:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <Audio_MAL_IRQHandler+0xe8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2101      	movs	r1, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f84f 	bl	8000510 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001472:	e013      	b.n	800149c <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <Audio_MAL_IRQHandler+0xe8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f848 	bl	8000510 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <Audio_MAL_IRQHandler+0xe8>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <Audio_MAL_IRQHandler+0xec>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f7ff f8ac 	bl	80005e8 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <Audio_MAL_IRQHandler+0xf4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fa04 	bl	80018a4 <EVAL_AUDIO_TransferComplete_CallBack>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000018 	.word	0x20000018
 80014a4:	2000001c 	.word	0x2000001c
 80014a8:	20000010 	.word	0x20000010
 80014ac:	20012da0 	.word	0x20012da0
 80014b0:	20012de0 	.word	0x20012de0
 80014b4:	0001fffe 	.word	0x0001fffe

080014b8 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80014bc:	f7ff ff7c 	bl	80013b8 <Audio_MAL_IRQHandler>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80014c8:	f7ff ff76 	bl	80013b8 <Audio_MAL_IRQHandler>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80014d4:	2102      	movs	r1, #2
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <SPI3_IRQHandler+0x3c>)
 80014d8:	f7ff fab0 	bl	8000a3c <SPI_I2S_GetFlagStatus>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d011      	beq.n	8001506 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <SPI3_IRQHandler+0x40>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d106      	bne.n	80014f8 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80014ea:	f000 f9e5 	bl	80018b8 <EVAL_AUDIO_GetSampleCallBack>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4619      	mov	r1, r3
 80014f2:	2004      	movs	r0, #4
 80014f4:	f7fe feca 	bl	800028c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80014f8:	f000 f9de 	bl	80018b8 <EVAL_AUDIO_GetSampleCallBack>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4619      	mov	r1, r3
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <SPI3_IRQHandler+0x3c>)
 8001502:	f7ff fa8d 	bl	8000a20 <SPI_I2S_SendData>
  }
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40003c00 	.word	0x40003c00
 8001510:	20000014 	.word	0x20000014

08001514 <_ZN9VgascreenC1Ev>:
#include <stm32_ub_vga_screen.h>
#include <stdlib.h>
#include <Vgascreen.h>
#include <algorithm>

Vgascreen::Vgascreen() {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_ZN9VgascreenC1Ev+0x20>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	init_VGA();
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f827 	bl	8001576 <_ZN9Vgascreen8init_VGAEv>
}
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	08001bf4 	.word	0x08001bf4

08001538 <_ZN9VgascreenD1Ev>:

Vgascreen::~Vgascreen() {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <_ZN9VgascreenD1Ev+0x1c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	08001bf4 	.word	0x08001bf4

08001558 <_ZN9VgascreenD0Ev>:
Vgascreen::~Vgascreen() {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
}
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ffe9 	bl	8001538 <_ZN9VgascreenD1Ev>
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 faaa 	bl	8001ac0 <_ZdlPv>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_ZN9Vgascreen8init_VGAEv>:


int Vgascreen::init_VGA(){
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
	UB_VGA_Screen_Init(); // Init VGA-Screen
 800157e:	f7ff fc9b 	bl	8000eb8 <UB_VGA_Screen_Init>
	UB_VGA_FillScreen(VGA_COL_GREEN);// Set screen green.
 8001582:	201c      	movs	r0, #28
 8001584:	f7ff fcd8 	bl	8000f38 <UB_VGA_FillScreen>
}
 8001588:	bf00      	nop
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_ZN9Vgascreen9draw_lineEiiiiii>:
int Vgascreen::VGA_pos(int x, int y){
	x_pos = x;// Set x position.
	y_pos = y;// Set y position.
}

int Vgascreen::draw_line(int x1, int y1, int x2, int y2, int width, int color){
 8001592:	b580      	push	{r7, lr}
 8001594:	b08c      	sub	sp, #48	; 0x30
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	603b      	str	r3, [r7, #0]
	const int dx = abs(x1-x2);
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bfb8      	it	lt
 80015aa:	425b      	neglt	r3, r3
 80015ac:	61fb      	str	r3, [r7, #28]
	const int dy = abs(y1-y2);
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bfb8      	it	lt
 80015b8:	425b      	neglt	r3, r3
 80015ba:	61bb      	str	r3, [r7, #24]
	bool a= true;
 80015bc:	2301      	movs	r3, #1
 80015be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(dy>dx){
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dd0c      	ble.n	80015e4 <_ZN9Vgascreen9draw_lineEiiiiii+0x52>
		std::swap(x1, y1);
 80015ca:	1d3a      	adds	r2, r7, #4
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f8fc 	bl	80017d0 <_ZSt4swapIiEvRT_S1_>
		std::swap(x2, y2);
 80015d8:	463b      	mov	r3, r7
 80015da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f8f6 	bl	80017d0 <_ZSt4swapIiEvRT_S1_>
	}

	if(x1>x2){
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dd0c      	ble.n	8001606 <_ZN9Vgascreen9draw_lineEiiiiii+0x74>
		std::swap(x1,x2);
 80015ec:	463a      	mov	r2, r7
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f8eb 	bl	80017d0 <_ZSt4swapIiEvRT_S1_>
		std::swap(y1,y2);
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f8e5 	bl	80017d0 <_ZSt4swapIiEvRT_S1_>
	}

	if(y1>y2){
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800160a:	429a      	cmp	r2, r3
 800160c:	dd02      	ble.n	8001614 <_ZN9Vgascreen9draw_lineEiiiiii+0x82>
		a = false;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	int y;
	int c;
	for(int j = 0; j< width; j++){
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800161c:	429a      	cmp	r2, r3
 800161e:	da65      	bge.n	80016ec <_ZN9Vgascreen9draw_lineEiiiiii+0x15a>
		for(int i = x1; i< x2; i++){
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	623b      	str	r3, [r7, #32]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	6a3a      	ldr	r2, [r7, #32]
 8001628:	429a      	cmp	r2, r3
 800162a:	da55      	bge.n	80016d8 <_ZN9Vgascreen9draw_lineEiiiiii+0x146>
			c = i - x1;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
			if(a){
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001638:	2b00      	cmp	r3, #0
 800163a:	d019      	beq.n	8001670 <_ZN9Vgascreen9draw_lineEiiiiii+0xde>
				if(dx>dy){
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	429a      	cmp	r2, r3
 8001642:	dd0a      	ble.n	800165a <_ZN9Vgascreen9draw_lineEiiiiii+0xc8>
					y = y1 + dy * (c) / dx;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	fb02 f203 	mul.w	r2, r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
 8001658:	e023      	b.n	80016a2 <_ZN9Vgascreen9draw_lineEiiiiii+0x110>
				}else{
					y = y1 + dx * (c) / dy;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	fb02 f203 	mul.w	r2, r2, r3
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	fb92 f2f3 	sdiv	r2, r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
 800166e:	e018      	b.n	80016a2 <_ZN9Vgascreen9draw_lineEiiiiii+0x110>
				}
			}else {
				if(dx>dy){
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	429a      	cmp	r2, r3
 8001676:	dd0a      	ble.n	800168e <_ZN9Vgascreen9draw_lineEiiiiii+0xfc>
					y = y1 - dy * (c) / dx;
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	6979      	ldr	r1, [r7, #20]
 800167e:	fb01 f103 	mul.w	r1, r1, r3
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fb91 f3f3 	sdiv	r3, r1, r3
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
 800168c:	e009      	b.n	80016a2 <_ZN9Vgascreen9draw_lineEiiiiii+0x110>
				}else{
					y = y1 - dx * (c) / dy;
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	6979      	ldr	r1, [r7, #20]
 8001694:	fb01 f103 	mul.w	r1, r1, r3
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fb91 f3f3 	sdiv	r3, r1, r3
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			int xset = i;
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	613b      	str	r3, [r7, #16]
			if (dx>dy){
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	dd08      	ble.n	80016c0 <_ZN9Vgascreen9draw_lineEiiiiii+0x12e>
				UB_VGA_SetPixel((xset),(y),254);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b4:	b291      	uxth	r1, r2
 80016b6:	22fe      	movs	r2, #254	; 0xfe
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fc5f 	bl	8000f7c <UB_VGA_SetPixel>
 80016be:	e007      	b.n	80016d0 <_ZN9Vgascreen9draw_lineEiiiiii+0x13e>
			}else{
				UB_VGA_SetPixel((y),(xset),254);
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	b291      	uxth	r1, r2
 80016c8:	22fe      	movs	r2, #254	; 0xfe
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fc56 	bl	8000f7c <UB_VGA_SetPixel>
		for(int i = x1; i< x2; i++){
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	3301      	adds	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	e7a5      	b.n	8001624 <_ZN9Vgascreen9draw_lineEiiiiii+0x92>
			}
		}

		y1 += 1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	607b      	str	r3, [r7, #4]
		y2 += 1;
 80016de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e0:	3301      	adds	r3, #1
 80016e2:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int j = 0; j< width; j++){
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	3301      	adds	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ea:	e795      	b.n	8001618 <_ZN9Vgascreen9draw_lineEiiiiii+0x86>

	}
	return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3730      	adds	r7, #48	; 0x30
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_ZN9Vgascreen14draw_rectangleEiiiii>:

int Vgascreen::draw_rectangle(int x_lo, int y_lo, int x_rb, int y_rb, int color){
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b088      	sub	sp, #32
 80016fa:	af04      	add	r7, sp, #16
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	603b      	str	r3, [r7, #0]
	  draw_line(x_lo,y_rb,x_rb,y_rb,1,254);
 8001704:	23fe      	movs	r3, #254	; 0xfe
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2301      	movs	r3, #1
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7ff ff3b 	bl	8001592 <_ZN9Vgascreen9draw_lineEiiiiii>
	  draw_line(x_rb,y_rb+1,x_rb,y_lo,1,254);
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	23fe      	movs	r3, #254	; 0xfe
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	6839      	ldr	r1, [r7, #0]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff ff2e 	bl	8001592 <_ZN9Vgascreen9draw_lineEiiiiii>
	  draw_line(x_rb,y_lo,x_lo,y_lo,1,254);
 8001736:	23fe      	movs	r3, #254	; 0xfe
 8001738:	9302      	str	r3, [sp, #8]
 800173a:	2301      	movs	r3, #1
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7ff ff22 	bl	8001592 <_ZN9Vgascreen9draw_lineEiiiiii>
	  draw_line(x_lo,y_lo,x_lo,y_rb,1,254);
 800174e:	23fe      	movs	r3, #254	; 0xfe
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2301      	movs	r3, #1
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff ff16 	bl	8001592 <_ZN9Vgascreen9draw_lineEiiiiii>
}
 8001766:	bf00      	nop
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_ZN9Vgascreen13draw_triangleEiiiiiii>:

int Vgascreen::draw_triangle(int x1, int y1, int x2, int y2, int x3, int y3, int color){
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af04      	add	r7, sp, #16
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
	  draw_line(x1,y1,x2,y2,1,254);
 800177e:	23fe      	movs	r3, #254	; 0xfe
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	2301      	movs	r3, #1
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7ff fefe 	bl	8001592 <_ZN9Vgascreen9draw_lineEiiiiii>
	  draw_line(x1,y1,x3,y3,1,254);
 8001796:	23fe      	movs	r3, #254	; 0xfe
 8001798:	9302      	str	r3, [sp, #8]
 800179a:	2301      	movs	r3, #1
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7ff fef2 	bl	8001592 <_ZN9Vgascreen9draw_lineEiiiiii>
	  draw_line(x2,y2,x3,y3,1,254);
 80017ae:	23fe      	movs	r3, #254	; 0xfe
 80017b0:	9302      	str	r3, [sp, #8]
 80017b2:	2301      	movs	r3, #1
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fee6 	bl	8001592 <_ZN9Vgascreen9draw_lineEiiiiii>
}
 80017c6:	bf00      	nop
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_ZSt4swapIiEvRT_S1_>:
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
	            is_nothrow_move_assignable<_Tp>>::value)
#else
    void
    swap(_Tp& __a, _Tp& __b)
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	601a      	str	r2, [r3, #0]
    }
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08e      	sub	sp, #56	; 0x38
 80017fc:	af04      	add	r7, sp, #16
  int i = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  int b = 65;
 8001802:	2341      	movs	r3, #65	; 0x41
 8001804:	623b      	str	r3, [r7, #32]
  int x1 =10;
 8001806:	230a      	movs	r3, #10
 8001808:	61fb      	str	r3, [r7, #28]
  int y1 = 50;
 800180a:	2332      	movs	r3, #50	; 0x32
 800180c:	61bb      	str	r3, [r7, #24]
  int x2 = 150;
 800180e:	2396      	movs	r3, #150	; 0x96
 8001810:	617b      	str	r3, [r7, #20]
  int y2 = 150;
 8001812:	2396      	movs	r3, #150	; 0x96
 8001814:	613b      	str	r3, [r7, #16]
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */
  /** @code */
  /* TODO - Add your application code here */
  SystemInit(); // System speed to 168MHz
 8001816:	f000 f8ab 	bl	8001970 <SystemInit>

  Vgascreen s1 = Vgascreen();
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe79 	bl	8001514 <_ZN9VgascreenC1Ev>

  //sqaure
  s1.draw_rectangle(x1,y1,x2,y2,5);
 8001822:	1d38      	adds	r0, r7, #4
 8001824:	2305      	movs	r3, #5
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	f7ff ff60 	bl	80016f6 <_ZN9Vgascreen14draw_rectangleEiiiii>

  //linetest
  s1.draw_line(180,0,180,240,2,254);
 8001836:	1d38      	adds	r0, r7, #4
 8001838:	23fe      	movs	r3, #254	; 0xfe
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	2302      	movs	r3, #2
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	23f0      	movs	r3, #240	; 0xf0
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	23b4      	movs	r3, #180	; 0xb4
 8001846:	2200      	movs	r2, #0
 8001848:	21b4      	movs	r1, #180	; 0xb4
 800184a:	f7ff fea2 	bl	8001592 <_ZN9Vgascreen9draw_lineEiiiiii>
  //s1.draw_line(120,60,180,180,5,254);

  //triangle
  s1.draw_triangle(300, 20, 180,180, 120,60,1);
 800184e:	1d38      	adds	r0, r7, #4
 8001850:	2301      	movs	r3, #1
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	233c      	movs	r3, #60	; 0x3c
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	2378      	movs	r3, #120	; 0x78
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	23b4      	movs	r3, #180	; 0xb4
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	23b4      	movs	r3, #180	; 0xb4
 8001862:	2214      	movs	r2, #20
 8001864:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001868:	f7ff ff82 	bl	8001770 <_ZN9Vgascreen13draw_triangleEiiiiiii>

  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 800186c:	2001      	movs	r0, #1
 800186e:	f7ff fd5d 	bl	800132c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fd5a 	bl	800132c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 8001878:	2002      	movs	r0, #2
 800187a:	f7ff fd57 	bl	800132c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 800187e:	2003      	movs	r0, #3
 8001880:	f7ff fd54 	bl	800132c <STM_EVAL_LEDInit>

  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff fd7f 	bl	8001388 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED4);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fd7c 	bl	8001388 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED5);
 8001890:	2002      	movs	r0, #2
 8001892:	f7ff fd79 	bl	8001388 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);
 8001896:	2003      	movs	r0, #3
 8001898:	f7ff fd76 	bl	8001388 <STM_EVAL_LEDOn>


  /* Infinite loop */
  while (1)
  {
	i++;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3301      	adds	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
 80018a2:	e7fb      	b.n	800189c <main+0xa4>

080018a4 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80018ae:	bf00      	nop
}
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80018bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001900 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ce:	e003      	b.n	80018d8 <LoopCopyDataInit>

080018d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018d6:	3104      	adds	r1, #4

080018d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e0:	d3f6      	bcc.n	80018d0 <CopyDataInit>
  ldr  r2, =_sbss
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018e4:	e002      	b.n	80018ec <LoopFillZerobss>

080018e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018e8:	f842 3b04 	str.w	r3, [r2], #4

080018ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f0:	d3f9      	bcc.n	80018e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018f2:	f000 f83d 	bl	8001970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f000 f8e5 	bl	8001ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff ff7d 	bl	80017f8 <main>
  bx  lr    
 80018fe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001900:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001904:	08001c04 	.word	0x08001c04
  ldr  r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800190c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001910:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001914:	20012e1c 	.word	0x20012e1c

08001918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC_IRQHandler>

0800191a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
	...

08001970 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <SystemInit+0x50>)
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <SystemInit+0x50>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <SystemInit+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <SystemInit+0x50>)
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <SystemInit+0x50>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <SystemInit+0x50>)
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <SystemInit+0x54>)
 800199a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <SystemInit+0x50>)
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <SystemInit+0x50>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SystemInit+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80019ae:	f000 f80d 	bl	80019cc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SystemInit+0x58>)
 80019b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019b8:	609a      	str	r2, [r3, #8]
#endif
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	24003010 	.word	0x24003010
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80019da:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <SetSysClock+0xe4>)
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <SetSysClock+0xe4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <SetSysClock+0xe4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3301      	adds	r3, #1
 80019f4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <SetSysClock+0x38>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a02:	d1f0      	bne.n	80019e6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <SetSysClock+0xe4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001a10:	2301      	movs	r3, #1
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	e001      	b.n	8001a1a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d142      	bne.n	8001aa6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <SetSysClock+0xe4>)
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <SetSysClock+0xe4>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001a2c:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <SetSysClock+0xe8>)
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <SetSysClock+0xe8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a36:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <SetSysClock+0xe4>)
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <SetSysClock+0xe4>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <SetSysClock+0xe4>)
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <SetSysClock+0xe4>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <SetSysClock+0xe4>)
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <SetSysClock+0xe4>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001a56:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <SetSysClock+0xe4>)
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <SetSysClock+0xec>)
 8001a5c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <SetSysClock+0xe4>)
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <SetSysClock+0xe4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a68:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001a6a:	bf00      	nop
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <SetSysClock+0xe4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f9      	beq.n	8001a6c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <SetSysClock+0xf0>)
 8001a7a:	f240 6205 	movw	r2, #1541	; 0x605
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <SetSysClock+0xe4>)
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <SetSysClock+0xe4>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001a8c:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <SetSysClock+0xe4>)
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <SetSysClock+0xe4>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001a98:	bf00      	nop
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SetSysClock+0xe4>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d1f9      	bne.n	8001a9a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	07405408 	.word	0x07405408
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <_ZdlPv>:
 8001ac0:	f000 b824 	b.w	8001b0c <free>

08001ac4 <__libc_init_array>:
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	4e0d      	ldr	r6, [pc, #52]	; (8001afc <__libc_init_array+0x38>)
 8001ac8:	4c0d      	ldr	r4, [pc, #52]	; (8001b00 <__libc_init_array+0x3c>)
 8001aca:	1ba4      	subs	r4, r4, r6
 8001acc:	10a4      	asrs	r4, r4, #2
 8001ace:	2500      	movs	r5, #0
 8001ad0:	42a5      	cmp	r5, r4
 8001ad2:	d109      	bne.n	8001ae8 <__libc_init_array+0x24>
 8001ad4:	4e0b      	ldr	r6, [pc, #44]	; (8001b04 <__libc_init_array+0x40>)
 8001ad6:	4c0c      	ldr	r4, [pc, #48]	; (8001b08 <__libc_init_array+0x44>)
 8001ad8:	f000 f870 	bl	8001bbc <_init>
 8001adc:	1ba4      	subs	r4, r4, r6
 8001ade:	10a4      	asrs	r4, r4, #2
 8001ae0:	2500      	movs	r5, #0
 8001ae2:	42a5      	cmp	r5, r4
 8001ae4:	d105      	bne.n	8001af2 <__libc_init_array+0x2e>
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aec:	4798      	blx	r3
 8001aee:	3501      	adds	r5, #1
 8001af0:	e7ee      	b.n	8001ad0 <__libc_init_array+0xc>
 8001af2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001af6:	4798      	blx	r3
 8001af8:	3501      	adds	r5, #1
 8001afa:	e7f2      	b.n	8001ae2 <__libc_init_array+0x1e>
 8001afc:	08001bfc 	.word	0x08001bfc
 8001b00:	08001bfc 	.word	0x08001bfc
 8001b04:	08001bfc 	.word	0x08001bfc
 8001b08:	08001c00 	.word	0x08001c00

08001b0c <free>:
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <free+0xc>)
 8001b0e:	4601      	mov	r1, r0
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f000 b803 	b.w	8001b1c <_free_r>
 8001b16:	bf00      	nop
 8001b18:	20000020 	.word	0x20000020

08001b1c <_free_r>:
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	4605      	mov	r5, r0
 8001b20:	2900      	cmp	r1, #0
 8001b22:	d045      	beq.n	8001bb0 <_free_r+0x94>
 8001b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b28:	1f0c      	subs	r4, r1, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bfb8      	it	lt
 8001b2e:	18e4      	addlt	r4, r4, r3
 8001b30:	f000 f842 	bl	8001bb8 <__malloc_lock>
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <_free_r+0x98>)
 8001b36:	6813      	ldr	r3, [r2, #0]
 8001b38:	4610      	mov	r0, r2
 8001b3a:	b933      	cbnz	r3, 8001b4a <_free_r+0x2e>
 8001b3c:	6063      	str	r3, [r4, #4]
 8001b3e:	6014      	str	r4, [r2, #0]
 8001b40:	4628      	mov	r0, r5
 8001b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b46:	f000 b838 	b.w	8001bba <__malloc_unlock>
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	d90c      	bls.n	8001b68 <_free_r+0x4c>
 8001b4e:	6821      	ldr	r1, [r4, #0]
 8001b50:	1862      	adds	r2, r4, r1
 8001b52:	4293      	cmp	r3, r2
 8001b54:	bf04      	itt	eq
 8001b56:	681a      	ldreq	r2, [r3, #0]
 8001b58:	685b      	ldreq	r3, [r3, #4]
 8001b5a:	6063      	str	r3, [r4, #4]
 8001b5c:	bf04      	itt	eq
 8001b5e:	1852      	addeq	r2, r2, r1
 8001b60:	6022      	streq	r2, [r4, #0]
 8001b62:	6004      	str	r4, [r0, #0]
 8001b64:	e7ec      	b.n	8001b40 <_free_r+0x24>
 8001b66:	4613      	mov	r3, r2
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	b10a      	cbz	r2, 8001b70 <_free_r+0x54>
 8001b6c:	42a2      	cmp	r2, r4
 8001b6e:	d9fa      	bls.n	8001b66 <_free_r+0x4a>
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	1858      	adds	r0, r3, r1
 8001b74:	42a0      	cmp	r0, r4
 8001b76:	d10b      	bne.n	8001b90 <_free_r+0x74>
 8001b78:	6820      	ldr	r0, [r4, #0]
 8001b7a:	4401      	add	r1, r0
 8001b7c:	1858      	adds	r0, r3, r1
 8001b7e:	4282      	cmp	r2, r0
 8001b80:	6019      	str	r1, [r3, #0]
 8001b82:	d1dd      	bne.n	8001b40 <_free_r+0x24>
 8001b84:	6810      	ldr	r0, [r2, #0]
 8001b86:	6852      	ldr	r2, [r2, #4]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	4401      	add	r1, r0
 8001b8c:	6019      	str	r1, [r3, #0]
 8001b8e:	e7d7      	b.n	8001b40 <_free_r+0x24>
 8001b90:	d902      	bls.n	8001b98 <_free_r+0x7c>
 8001b92:	230c      	movs	r3, #12
 8001b94:	602b      	str	r3, [r5, #0]
 8001b96:	e7d3      	b.n	8001b40 <_free_r+0x24>
 8001b98:	6820      	ldr	r0, [r4, #0]
 8001b9a:	1821      	adds	r1, r4, r0
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	bf04      	itt	eq
 8001ba0:	6811      	ldreq	r1, [r2, #0]
 8001ba2:	6852      	ldreq	r2, [r2, #4]
 8001ba4:	6062      	str	r2, [r4, #4]
 8001ba6:	bf04      	itt	eq
 8001ba8:	1809      	addeq	r1, r1, r0
 8001baa:	6021      	streq	r1, [r4, #0]
 8001bac:	605c      	str	r4, [r3, #4]
 8001bae:	e7c7      	b.n	8001b40 <_free_r+0x24>
 8001bb0:	bd38      	pop	{r3, r4, r5, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20012d9c 	.word	0x20012d9c

08001bb8 <__malloc_lock>:
 8001bb8:	4770      	bx	lr

08001bba <__malloc_unlock>:
 8001bba:	4770      	bx	lr

08001bbc <_init>:
 8001bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbe:	bf00      	nop
 8001bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc2:	bc08      	pop	{r3}
 8001bc4:	469e      	mov	lr, r3
 8001bc6:	4770      	bx	lr

08001bc8 <_fini>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	bf00      	nop
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr
