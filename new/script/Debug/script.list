
script.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002194  08002194  00012194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08002198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          00012d98  20000084  20000084  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012e1c  20012e1c  00020084  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b04d  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000226f  00000000  00000000  0002b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cf0  00000000  00000000  0002d370  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bc8  00000000  00000000  0002e060  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004943  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000042cf  00000000  00000000  0003356b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003783a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000037d4  00000000  00000000  000378b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002108 	.word	0x08002108

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08002108 	.word	0x08002108

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <DAC_SetChannel1Data+0x30>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40007400 	.word	0x40007400

080002c0 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f023 0201 	bic.w	r2, r3, #1
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2221      	movs	r2, #33	; 0x21
 80002f6:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a45      	ldr	r2, [pc, #276]	; (8000410 <DMA_DeInit+0x150>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d103      	bne.n	8000308 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000300:	4b44      	ldr	r3, [pc, #272]	; (8000414 <DMA_DeInit+0x154>)
 8000302:	223d      	movs	r2, #61	; 0x3d
 8000304:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000306:	e07e      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a43      	ldr	r2, [pc, #268]	; (8000418 <DMA_DeInit+0x158>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d104      	bne.n	800031a <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000310:	4b40      	ldr	r3, [pc, #256]	; (8000414 <DMA_DeInit+0x154>)
 8000312:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000316:	609a      	str	r2, [r3, #8]
}
 8000318:	e075      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a3f      	ldr	r2, [pc, #252]	; (800041c <DMA_DeInit+0x15c>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d104      	bne.n	800032c <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000322:	4b3c      	ldr	r3, [pc, #240]	; (8000414 <DMA_DeInit+0x154>)
 8000324:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000328:	609a      	str	r2, [r3, #8]
}
 800032a:	e06c      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a3c      	ldr	r2, [pc, #240]	; (8000420 <DMA_DeInit+0x160>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d104      	bne.n	800033e <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000334:	4b37      	ldr	r3, [pc, #220]	; (8000414 <DMA_DeInit+0x154>)
 8000336:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800033a:	609a      	str	r2, [r3, #8]
}
 800033c:	e063      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a38      	ldr	r2, [pc, #224]	; (8000424 <DMA_DeInit+0x164>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d103      	bne.n	800034e <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000346:	4b33      	ldr	r3, [pc, #204]	; (8000414 <DMA_DeInit+0x154>)
 8000348:	4a37      	ldr	r2, [pc, #220]	; (8000428 <DMA_DeInit+0x168>)
 800034a:	60da      	str	r2, [r3, #12]
}
 800034c:	e05b      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <DMA_DeInit+0x16c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d103      	bne.n	800035e <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <DMA_DeInit+0x154>)
 8000358:	4a35      	ldr	r2, [pc, #212]	; (8000430 <DMA_DeInit+0x170>)
 800035a:	60da      	str	r2, [r3, #12]
}
 800035c:	e053      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a34      	ldr	r2, [pc, #208]	; (8000434 <DMA_DeInit+0x174>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d103      	bne.n	800036e <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000366:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <DMA_DeInit+0x154>)
 8000368:	4a33      	ldr	r2, [pc, #204]	; (8000438 <DMA_DeInit+0x178>)
 800036a:	60da      	str	r2, [r3, #12]
}
 800036c:	e04b      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a32      	ldr	r2, [pc, #200]	; (800043c <DMA_DeInit+0x17c>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d104      	bne.n	8000380 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <DMA_DeInit+0x154>)
 8000378:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800037c:	60da      	str	r2, [r3, #12]
}
 800037e:	e042      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a2f      	ldr	r2, [pc, #188]	; (8000440 <DMA_DeInit+0x180>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d103      	bne.n	8000390 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000388:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <DMA_DeInit+0x184>)
 800038a:	223d      	movs	r2, #61	; 0x3d
 800038c:	609a      	str	r2, [r3, #8]
}
 800038e:	e03a      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a2d      	ldr	r2, [pc, #180]	; (8000448 <DMA_DeInit+0x188>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d104      	bne.n	80003a2 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000398:	4b2a      	ldr	r3, [pc, #168]	; (8000444 <DMA_DeInit+0x184>)
 800039a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800039e:	609a      	str	r2, [r3, #8]
}
 80003a0:	e031      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a29      	ldr	r2, [pc, #164]	; (800044c <DMA_DeInit+0x18c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d104      	bne.n	80003b4 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80003aa:	4b26      	ldr	r3, [pc, #152]	; (8000444 <DMA_DeInit+0x184>)
 80003ac:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80003b0:	609a      	str	r2, [r3, #8]
}
 80003b2:	e028      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a26      	ldr	r2, [pc, #152]	; (8000450 <DMA_DeInit+0x190>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d104      	bne.n	80003c6 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <DMA_DeInit+0x184>)
 80003be:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80003c2:	609a      	str	r2, [r3, #8]
}
 80003c4:	e01f      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a22      	ldr	r2, [pc, #136]	; (8000454 <DMA_DeInit+0x194>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d103      	bne.n	80003d6 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80003ce:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <DMA_DeInit+0x184>)
 80003d0:	4a15      	ldr	r2, [pc, #84]	; (8000428 <DMA_DeInit+0x168>)
 80003d2:	60da      	str	r2, [r3, #12]
}
 80003d4:	e017      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <DMA_DeInit+0x198>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d103      	bne.n	80003e6 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <DMA_DeInit+0x184>)
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <DMA_DeInit+0x170>)
 80003e2:	60da      	str	r2, [r3, #12]
}
 80003e4:	e00f      	b.n	8000406 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1c      	ldr	r2, [pc, #112]	; (800045c <DMA_DeInit+0x19c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d103      	bne.n	80003f6 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <DMA_DeInit+0x184>)
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <DMA_DeInit+0x178>)
 80003f2:	60da      	str	r2, [r3, #12]
}
 80003f4:	e007      	b.n	8000406 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a19      	ldr	r2, [pc, #100]	; (8000460 <DMA_DeInit+0x1a0>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d103      	bne.n	8000406 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <DMA_DeInit+0x184>)
 8000400:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000404:	60da      	str	r2, [r3, #12]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40026010 	.word	0x40026010
 8000414:	40026000 	.word	0x40026000
 8000418:	40026028 	.word	0x40026028
 800041c:	40026040 	.word	0x40026040
 8000420:	40026058 	.word	0x40026058
 8000424:	40026070 	.word	0x40026070
 8000428:	2000003d 	.word	0x2000003d
 800042c:	40026088 	.word	0x40026088
 8000430:	20000f40 	.word	0x20000f40
 8000434:	400260a0 	.word	0x400260a0
 8000438:	203d0000 	.word	0x203d0000
 800043c:	400260b8 	.word	0x400260b8
 8000440:	40026410 	.word	0x40026410
 8000444:	40026400 	.word	0x40026400
 8000448:	40026428 	.word	0x40026428
 800044c:	40026440 	.word	0x40026440
 8000450:	40026458 	.word	0x40026458
 8000454:	40026470 	.word	0x40026470
 8000458:	40026488 	.word	0x40026488
 800045c:	400264a0 	.word	0x400264a0
 8000460:	400264b8 	.word	0x400264b8

08000464 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <DMA_Init+0xa8>)
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800048e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800049a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	6a1b      	ldr	r3, [r3, #32]
 80004a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80004b2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	4313      	orrs	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f023 0307 	bic.w	r3, r3, #7
 80004d2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4313      	orrs	r3, r2
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	691a      	ldr	r2, [r3, #16]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	689a      	ldr	r2, [r3, #8]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60da      	str	r2, [r3, #12]
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	f01c803f 	.word	0xf01c803f

08000510 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f043 0201 	orr.w	r2, r3, #1
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800052e:	e005      	b.n	800053c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f023 0201 	bic.w	r2, r3, #1
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000546:	b480      	push	{r7}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d002      	beq.n	8000564 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800055e:	2301      	movs	r3, #1
 8000560:	73fb      	strb	r3, [r7, #15]
 8000562:	e001      	b.n	8000568 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000568:	7bfb      	ldrb	r3, [r7, #15]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000574:	b480      	push	{r7}
 8000576:	b087      	sub	sp, #28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <DMA_GetFlagStatus+0x68>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d802      	bhi.n	8000594 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <DMA_GetFlagStatus+0x6c>)
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	e001      	b.n	8000598 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <DMA_GetFlagStatus+0x70>)
 8000596:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	e002      	b.n	80005b0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005b6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80005ba:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	4013      	ands	r3, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80005c6:	2301      	movs	r3, #1
 80005c8:	75fb      	strb	r3, [r7, #23]
 80005ca:	e001      	b.n	80005d0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80005cc:	2300      	movs	r3, #0
 80005ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	371c      	adds	r7, #28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	4002640f 	.word	0x4002640f
 80005e0:	40026000 	.word	0x40026000
 80005e4:	40026400 	.word	0x40026400

080005e8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <DMA_ClearFlag+0x50>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d802      	bhi.n	8000600 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <DMA_ClearFlag+0x54>)
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	e001      	b.n	8000604 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <DMA_ClearFlag+0x58>)
 8000602:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d007      	beq.n	800061e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000614:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800061c:	e006      	b.n	800062c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000624:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	6093      	str	r3, [r2, #8]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	4002640f 	.word	0x4002640f
 800063c:	40026000 	.word	0x40026000
 8000640:	40026400 	.word	0x40026400

08000644 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	4613      	mov	r3, r2
 8000650:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00f      	beq.n	800067c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	615a      	str	r2, [r3, #20]
 800066e:	e005      	b.n	800067c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b80      	cmp	r3, #128	; 0x80
 8000680:	d014      	beq.n	80006ac <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d008      	beq.n	800069a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	f003 031e 	and.w	r3, r3, #30
 8000692:	431a      	orrs	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000698:	e008      	b.n	80006ac <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	f003 031e 	and.w	r3, r3, #30
 80006a4:	43db      	mvns	r3, r3
 80006a6:	401a      	ands	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
	...

080006b8 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <DMA_GetITStatus+0xa0>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d802      	bhi.n	80006dc <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <DMA_GetITStatus+0xa4>)
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	e001      	b.n	80006e0 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <DMA_GetITStatus+0xa8>)
 80006de:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006e6:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00a      	beq.n	8000704 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	0adb      	lsrs	r3, r3, #11
 80006f2:	f003 031e 	and.w	r3, r3, #30
 80006f6:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4013      	ands	r3, r2
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	e004      	b.n	800070e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	e002      	b.n	8000726 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800072c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000730:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	4013      	ands	r3, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d005      	beq.n	8000748 <DMA_GetITStatus+0x90>
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000742:	2301      	movs	r3, #1
 8000744:	75fb      	strb	r3, [r7, #23]
 8000746:	e001      	b.n	800074c <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800074c:	7dfb      	ldrb	r3, [r7, #23]
}
 800074e:	4618      	mov	r0, r3
 8000750:	371c      	adds	r7, #28
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	4002640f 	.word	0x4002640f
 800075c:	40026000 	.word	0x40026000
 8000760:	40026400 	.word	0x40026400

08000764 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <DMA_ClearITPendingBit+0x50>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d802      	bhi.n	800077c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <DMA_ClearITPendingBit+0x54>)
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e001      	b.n	8000780 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <DMA_ClearITPendingBit+0x58>)
 800077e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000790:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000798:	e006      	b.n	80007a8 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007a0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	6093      	str	r3, [r2, #8]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	4002640f 	.word	0x4002640f
 80007b8:	40026000 	.word	0x40026000
 80007bc:	40026400 	.word	0x40026400

080007c0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e076      	b.n	80008ca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007dc:	2201      	movs	r2, #1
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d165      	bne.n	80008c4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	2103      	movs	r1, #3
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	401a      	ands	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	4619      	mov	r1, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	431a      	orrs	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d003      	beq.n	8000836 <GPIO_Init+0x76>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d12e      	bne.n	8000894 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2103      	movs	r1, #3
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	795b      	ldrb	r3, [r3, #5]
 8000854:	4619      	mov	r1, r3
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	431a      	orrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	b29b      	uxth	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	2301      	movs	r3, #1
 8000870:	408b      	lsls	r3, r1
 8000872:	43db      	mvns	r3, r3
 8000874:	401a      	ands	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	7992      	ldrb	r2, [r2, #6]
 8000882:	4611      	mov	r1, r2
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	b292      	uxth	r2, r2
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	b292      	uxth	r2, r2
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	b29b      	uxth	r3, r3
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	2103      	movs	r1, #3
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	401a      	ands	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	79db      	ldrb	r3, [r3, #7]
 80008b4:	4619      	mov	r1, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	431a      	orrs	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d985      	bls.n	80007dc <GPIO_Init+0x1c>
    }
  }
}
 80008d0:	bf00      	nop
 80008d2:	371c      	adds	r7, #28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008da:	b480      	push	{r7}
 80008dc:	b085      	sub	sp, #20
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	807b      	strh	r3, [r7, #2]
 80008e6:	4613      	mov	r3, r2
 80008e8:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008f2:	787a      	ldrb	r2, [r7, #1]
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000902:	887b      	ldrh	r3, [r7, #2]
 8000904:	08db      	lsrs	r3, r3, #3
 8000906:	b29b      	uxth	r3, r3
 8000908:	4618      	mov	r0, r3
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	08db      	lsrs	r3, r3, #3
 800090e:	b29b      	uxth	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3208      	adds	r2, #8
 8000916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	210f      	movs	r1, #15
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	ea02 0103 	and.w	r1, r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f100 0208 	add.w	r2, r0, #8
 8000934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	b29b      	uxth	r3, r3
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3208      	adds	r2, #8
 8000944:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4313      	orrs	r3, r2
 800094c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800094e:	887b      	ldrh	r3, [r7, #2]
 8000950:	08db      	lsrs	r3, r3, #3
 8000952:	b29b      	uxth	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3208      	adds	r2, #8
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
	...

0800096c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800096c:	b480      	push	{r7}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
 8000980:	2302      	movs	r3, #2
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	2302      	movs	r3, #2
 800098a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800098c:	4b47      	ldr	r3, [pc, #284]	; (8000aac <RCC_GetClocksFreq+0x140>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	f003 030c 	and.w	r3, r3, #12
 8000994:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	2b04      	cmp	r3, #4
 800099a:	d007      	beq.n	80009ac <RCC_GetClocksFreq+0x40>
 800099c:	2b08      	cmp	r3, #8
 800099e:	d009      	beq.n	80009b4 <RCC_GetClocksFreq+0x48>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d13d      	bne.n	8000a20 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a42      	ldr	r2, [pc, #264]	; (8000ab0 <RCC_GetClocksFreq+0x144>)
 80009a8:	601a      	str	r2, [r3, #0]
      break;
 80009aa:	e03d      	b.n	8000a28 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a41      	ldr	r2, [pc, #260]	; (8000ab4 <RCC_GetClocksFreq+0x148>)
 80009b0:	601a      	str	r2, [r3, #0]
      break;
 80009b2:	e039      	b.n	8000a28 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <RCC_GetClocksFreq+0x140>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	0d9b      	lsrs	r3, r3, #22
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009c0:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <RCC_GetClocksFreq+0x140>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009c8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009d0:	4a38      	ldr	r2, [pc, #224]	; (8000ab4 <RCC_GetClocksFreq+0x148>)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d8:	4a34      	ldr	r2, [pc, #208]	; (8000aac <RCC_GetClocksFreq+0x140>)
 80009da:	6852      	ldr	r2, [r2, #4]
 80009dc:	0992      	lsrs	r2, r2, #6
 80009de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	e00b      	b.n	8000a02 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009ea:	4a31      	ldr	r2, [pc, #196]	; (8000ab0 <RCC_GetClocksFreq+0x144>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4a2e      	ldr	r2, [pc, #184]	; (8000aac <RCC_GetClocksFreq+0x140>)
 80009f4:	6852      	ldr	r2, [r2, #4]
 80009f6:	0992      	lsrs	r2, r2, #6
 80009f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <RCC_GetClocksFreq+0x140>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	0c1b      	lsrs	r3, r3, #16
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	601a      	str	r2, [r3, #0]
      break;
 8000a1e:	e003      	b.n	8000a28 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <RCC_GetClocksFreq+0x144>)
 8000a24:	601a      	str	r2, [r3, #0]
      break;
 8000a26:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <RCC_GetClocksFreq+0x140>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a30:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	091b      	lsrs	r3, r3, #4
 8000a36:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a38:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <RCC_GetClocksFreq+0x14c>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	40da      	lsrs	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <RCC_GetClocksFreq+0x140>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a58:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	0a9b      	lsrs	r3, r3, #10
 8000a5e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a60:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <RCC_GetClocksFreq+0x14c>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	40da      	lsrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <RCC_GetClocksFreq+0x140>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a80:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	0b5b      	lsrs	r3, r3, #13
 8000a86:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <RCC_GetClocksFreq+0x14c>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	40da      	lsrs	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	60da      	str	r2, [r3, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3724      	adds	r7, #36	; 0x24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	00f42400 	.word	0x00f42400
 8000ab4:	007a1200 	.word	0x007a1200
 8000ab8:	20000000 	.word	0x20000000

08000abc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d006      	beq.n	8000adc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000ace:	4909      	ldr	r1, [pc, #36]	; (8000af4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ada:	e006      	b.n	8000aea <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000adc:	4905      	ldr	r1, [pc, #20]	; (8000af4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <RCC_AHB1PeriphClockCmd+0x38>)
 8000ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40023800 	.word	0x40023800

08000af8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b0a:	4909      	ldr	r1, [pc, #36]	; (8000b30 <RCC_APB1PeriphClockCmd+0x38>)
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <RCC_APB1PeriphClockCmd+0x38>)
 8000b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000b16:	e006      	b.n	8000b26 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b18:	4905      	ldr	r1, [pc, #20]	; (8000b30 <RCC_APB1PeriphClockCmd+0x38>)
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <RCC_APB1PeriphClockCmd+0x38>)
 8000b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	4013      	ands	r3, r2
 8000b24:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40023800 	.word	0x40023800

08000b34 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b46:	4909      	ldr	r1, [pc, #36]	; (8000b6c <RCC_APB2PeriphClockCmd+0x38>)
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <RCC_APB2PeriphClockCmd+0x38>)
 8000b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000b52:	e006      	b.n	8000b62 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b54:	4905      	ldr	r1, [pc, #20]	; (8000b6c <RCC_APB2PeriphClockCmd+0x38>)
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <RCC_APB2PeriphClockCmd+0x38>)
 8000b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4013      	ands	r3, r2
 8000b60:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40023800 	.word	0x40023800

08000b70 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	819a      	strh	r2, [r3, #12]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	891b      	ldrh	r3, [r3, #8]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e001      	b.n	8000bb6 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
	...

08000bc4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <TIM_TimeBaseInit+0xb8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d013      	beq.n	8000c08 <TIM_TimeBaseInit+0x44>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <TIM_TimeBaseInit+0xbc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d00f      	beq.n	8000c08 <TIM_TimeBaseInit+0x44>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bee:	d00b      	beq.n	8000c08 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <TIM_TimeBaseInit+0xc0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d007      	beq.n	8000c08 <TIM_TimeBaseInit+0x44>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <TIM_TimeBaseInit+0xc4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d003      	beq.n	8000c08 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <TIM_TimeBaseInit+0xc8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d108      	bne.n	8000c1a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c0e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	885a      	ldrh	r2, [r3, #2]
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <TIM_TimeBaseInit+0xcc>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d00c      	beq.n	8000c3c <TIM_TimeBaseInit+0x78>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <TIM_TimeBaseInit+0xd0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d008      	beq.n	8000c3c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c30:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	891a      	ldrh	r2, [r3, #8]
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	89fa      	ldrh	r2, [r7, #14]
 8000c40:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	881a      	ldrh	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <TIM_TimeBaseInit+0xb8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d003      	beq.n	8000c62 <TIM_TimeBaseInit+0x9e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <TIM_TimeBaseInit+0xbc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d104      	bne.n	8000c6c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	7a9b      	ldrb	r3, [r3, #10]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	829a      	strh	r2, [r3, #20]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	40010400 	.word	0x40010400
 8000c84:	40000400 	.word	0x40000400
 8000c88:	40000800 	.word	0x40000800
 8000c8c:	40000c00 	.word	0x40000c00
 8000c90:	40001000 	.word	0x40001000
 8000c94:	40001400 	.word	0x40001400

08000c98 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d008      	beq.n	8000cbc <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8000cba:	e007      	b.n	8000ccc <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	801a      	strh	r2, [r3, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d008      	beq.n	8000cfa <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000cf8:	e007      	b.n	8000d0a <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	801a      	strh	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	817b      	strh	r3, [r7, #10]
 8000d22:	2300      	movs	r3, #0
 8000d24:	81fb      	strh	r3, [r7, #14]
 8000d26:	2300      	movs	r3, #0
 8000d28:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	8c1b      	ldrh	r3, [r3, #32]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	8c1b      	ldrh	r3, [r3, #32]
 8000d3e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	889b      	ldrh	r3, [r3, #4]
 8000d44:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	8b9b      	ldrh	r3, [r3, #28]
 8000d4a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8000d4c:	897b      	ldrh	r3, [r7, #10]
 8000d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d52:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8000d54:	897b      	ldrh	r3, [r7, #10]
 8000d56:	f023 0303 	bic.w	r3, r3, #3
 8000d5a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	881a      	ldrh	r2, [r3, #0]
 8000d60:	897b      	ldrh	r3, [r7, #10]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000d66:	89fb      	ldrh	r3, [r7, #14]
 8000d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d6c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	899b      	ldrh	r3, [r3, #12]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	89fb      	ldrh	r3, [r7, #14]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	885b      	ldrh	r3, [r3, #2]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	89fb      	ldrh	r3, [r7, #14]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <TIM_OC3Init+0x104>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d003      	beq.n	8000d9a <TIM_OC3Init+0x86>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <TIM_OC3Init+0x108>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000d9a:	89fb      	ldrh	r3, [r7, #14]
 8000d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000da0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	89db      	ldrh	r3, [r3, #14]
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000db6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	889b      	ldrh	r3, [r3, #4]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8000dc6:	89bb      	ldrh	r3, [r7, #12]
 8000dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dcc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000dce:	89bb      	ldrh	r3, [r7, #12]
 8000dd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dd4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	8a1b      	ldrh	r3, [r3, #16]
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	89bb      	ldrh	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	8a5b      	ldrh	r3, [r3, #18]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	89bb      	ldrh	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	89ba      	ldrh	r2, [r7, #12]
 8000df6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	897a      	ldrh	r2, [r7, #10]
 8000dfc:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	89fa      	ldrh	r2, [r7, #14]
 8000e0a:	841a      	strh	r2, [r3, #32]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	40010400 	.word	0x40010400

08000e20 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	81bb      	strh	r3, [r7, #12]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	817b      	strh	r3, [r7, #10]
 8000e32:	2300      	movs	r3, #0
 8000e34:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	8c1b      	ldrh	r3, [r3, #32]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	8c1b      	ldrh	r3, [r3, #32]
 8000e4a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	889b      	ldrh	r3, [r3, #4]
 8000e50:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	8b9b      	ldrh	r3, [r3, #28]
 8000e56:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8000e58:	89bb      	ldrh	r3, [r7, #12]
 8000e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e5e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000e60:	89bb      	ldrh	r3, [r7, #12]
 8000e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e66:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	89bb      	ldrh	r3, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000e76:	897b      	ldrh	r3, [r7, #10]
 8000e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e7c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	899b      	ldrh	r3, [r3, #12]
 8000e82:	031b      	lsls	r3, r3, #12
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	897b      	ldrh	r3, [r7, #10]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	885b      	ldrh	r3, [r3, #2]
 8000e90:	031b      	lsls	r3, r3, #12
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	897b      	ldrh	r3, [r7, #10]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <TIM_OC4Init+0xc4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d003      	beq.n	8000eaa <TIM_OC4Init+0x8a>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <TIM_OC4Init+0xc8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10a      	bne.n	8000ec0 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000eb0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	8a1b      	ldrh	r3, [r3, #16]
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	89fa      	ldrh	r2, [r7, #14]
 8000ec4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	89ba      	ldrh	r2, [r7, #12]
 8000eca:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	897a      	ldrh	r2, [r7, #10]
 8000ed8:	841a      	strh	r2, [r3, #32]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40010400 	.word	0x40010400

08000eec <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	8b9b      	ldrh	r3, [r3, #28]
 8000f00:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8000f02:	89fb      	ldrh	r3, [r7, #14]
 8000f04:	f023 0308 	bic.w	r3, r3, #8
 8000f08:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000f0a:	89fa      	ldrh	r2, [r7, #14]
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	89fa      	ldrh	r2, [r7, #14]
 8000f16:	839a      	strh	r2, [r3, #28]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	8b9b      	ldrh	r3, [r3, #28]
 8000f36:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8000f38:	89fb      	ldrh	r3, [r7, #14]
 8000f3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f3e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	89fa      	ldrh	r2, [r7, #14]
 8000f50:	839a      	strh	r2, [r3, #28]
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	899b      	ldrh	r3, [r3, #12]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000f82:	e009      	b.n	8000f98 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	899b      	ldrh	r3, [r3, #12]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	819a      	strh	r2, [r3, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	821a      	strh	r2, [r3, #16]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fd2:	787b      	ldrb	r3, [r7, #1]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	899b      	ldrh	r3, [r3, #12]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8000fe8:	e009      	b.n	8000ffe <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	899b      	ldrh	r3, [r3, #12]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	819a      	strh	r2, [r3, #12]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8a1b      	ldrh	r3, [r3, #16]
 8001026:	b29b      	uxth	r3, r3
 8001028:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001030:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	88db      	ldrh	r3, [r3, #6]
 8001036:	461a      	mov	r2, r3
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	4313      	orrs	r3, r2
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	b29a      	uxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	899b      	ldrh	r3, [r3, #12]
 800104a:	b29b      	uxth	r3, r3
 800104c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001054:	f023 030c 	bic.w	r3, r3, #12
 8001058:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	889a      	ldrh	r2, [r3, #4]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	891b      	ldrh	r3, [r3, #8]
 8001062:	4313      	orrs	r3, r2
 8001064:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800106a:	4313      	orrs	r3, r2
 800106c:	b29b      	uxth	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	4313      	orrs	r3, r2
 8001074:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	b29a      	uxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	8a9b      	ldrh	r3, [r3, #20]
 8001082:	b29b      	uxth	r3, r3
 8001084:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800108c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	899b      	ldrh	r3, [r3, #12]
 8001092:	461a      	mov	r2, r3
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	4313      	orrs	r3, r2
 8001098:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fc60 	bl	800096c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <USART_Init+0x168>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d003      	beq.n	80010bc <USART_Init+0xb4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <USART_Init+0x16c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d102      	bne.n	80010c2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	623b      	str	r3, [r7, #32]
 80010c0:	e001      	b.n	80010c6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	899b      	ldrh	r3, [r3, #12]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da0c      	bge.n	80010ec <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80010d2:	6a3a      	ldr	r2, [r7, #32]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	009a      	lsls	r2, r3, #2
 80010dc:	441a      	add	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e00b      	b.n	8001104 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80010ec:	6a3a      	ldr	r2, [r7, #32]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	009a      	lsls	r2, r3, #2
 80010f6:	441a      	add	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <USART_Init+0x170>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	095b      	lsrs	r3, r3, #5
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	2264      	movs	r2, #100	; 0x64
 8001118:	fb02 f303 	mul.w	r3, r2, r3
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	899b      	ldrh	r3, [r3, #12]
 8001126:	b29b      	uxth	r3, r3
 8001128:	b21b      	sxth	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	da0c      	bge.n	8001148 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	3332      	adds	r3, #50	; 0x32
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <USART_Init+0x170>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001142:	4313      	orrs	r3, r2
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	e00b      	b.n	8001160 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	3332      	adds	r3, #50	; 0x32
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <USART_Init+0x170>)
 8001150:	fba2 2303 	umull	r2, r3, r2, r3
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115c:	4313      	orrs	r3, r2
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	811a      	strh	r2, [r3, #8]
}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40011000 	.word	0x40011000
 8001174:	40011400 	.word	0x40011400
 8001178:	51eb851f 	.word	0x51eb851f

0800117c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d008      	beq.n	80011a0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	899b      	ldrh	r3, [r3, #12]
 8001192:	b29b      	uxth	r3, r3
 8001194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800119e:	e007      	b.n	80011b0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	899b      	ldrh	r3, [r3, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	819a      	strh	r2, [r3, #12]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b087      	sub	sp, #28
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80011f0:	2201      	movs	r2, #1
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d103      	bne.n	8001208 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	330c      	adds	r3, #12
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e009      	b.n	800121c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d103      	bne.n	8001216 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3310      	adds	r3, #16
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e002      	b.n	800121c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3314      	adds	r3, #20
 800121a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	6811      	ldr	r1, [r2, #0]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800122e:	e006      	b.n	800123e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	6811      	ldr	r1, [r2, #0]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	43d2      	mvns	r2, r2
 800123a:	400a      	ands	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <UB_VGA_Screen_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <UB_VGA_Screen_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <UB_VGA_Screen_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001260:	2300      	movs	r3, #0
 8001262:	80bb      	strh	r3, [r7, #4]
 8001264:	e017      	b.n	8001296 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8001266:	2300      	movs	r3, #0
 8001268:	80fb      	strh	r3, [r7, #6]
 800126a:	e00d      	b.n	8001288 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 800126c:	88ba      	ldrh	r2, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	441a      	add	r2, r3
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	4413      	add	r3, r2
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <UB_VGA_Screen_Init+0x78>)
 800127e:	2100      	movs	r1, #0
 8001280:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	3301      	adds	r3, #1
 8001286:	80fb      	strh	r3, [r7, #6]
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800128e:	d9ed      	bls.n	800126c <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	80bb      	strh	r3, [r7, #4]
 8001296:	88bb      	ldrh	r3, [r7, #4]
 8001298:	2bef      	cmp	r3, #239	; 0xef
 800129a:	d9e4      	bls.n	8001266 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 800129c:	f000 f85c 	bl	8001358 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 80012a0:	f000 f8ae 	bl	8001400 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 80012a4:	f000 f93e 	bl	8001524 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 80012a8:	f000 f910 	bl	80014cc <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <UB_VGA_Screen_Init+0x7c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a02      	ldr	r2, [pc, #8]	; (80012bc <UB_VGA_Screen_Init+0x74>)
 80012b2:	6093      	str	r3, [r2, #8]
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200000a0 	.word	0x200000a0
 80012c0:	200000ac 	.word	0x200000ac
 80012c4:	40026488 	.word	0x40026488

080012c8 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	81bb      	strh	r3, [r7, #12]
 80012d6:	e012      	b.n	80012fe <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	81fb      	strh	r3, [r7, #14]
 80012dc:	e008      	b.n	80012f0 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	89b9      	ldrh	r1, [r7, #12]
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f811 	bl	800130c <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	3301      	adds	r3, #1
 80012ee:	81fb      	strh	r3, [r7, #14]
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012f6:	d3f2      	bcc.n	80012de <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80012f8:	89bb      	ldrh	r3, [r7, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	2bef      	cmp	r3, #239	; 0xef
 8001302:	d9e9      	bls.n	80012d8 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
 8001316:	460b      	mov	r3, r1
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001324:	d301      	bcc.n	800132a <UB_VGA_SetPixel+0x1e>
 8001326:	2300      	movs	r3, #0
 8001328:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	2bef      	cmp	r3, #239	; 0xef
 800132e:	d901      	bls.n	8001334 <UB_VGA_SetPixel+0x28>
 8001330:	2300      	movs	r3, #0
 8001332:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8001334:	88ba      	ldrh	r2, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	019b      	lsls	r3, r3, #6
 800133e:	441a      	add	r2, r3
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	4413      	add	r3, r2
 8001344:	4903      	ldr	r1, [pc, #12]	; (8001354 <UB_VGA_SetPixel+0x48>)
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	54ca      	strb	r2, [r1, r3]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	200000ac 	.word	0x200000ac

08001358 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800135e:	2101      	movs	r1, #1
 8001360:	2010      	movs	r0, #16
 8001362:	f7ff fbab 	bl	8000abc <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8001366:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800136a:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800136c:	2301      	movs	r3, #1
 800136e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001370:	2300      	movs	r3, #0
 8001372:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001374:	2301      	movs	r3, #1
 8001376:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001378:	2303      	movs	r3, #3
 800137a:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	481d      	ldr	r0, [pc, #116]	; (80013f8 <P_VGA_InitIO+0xa0>)
 8001382:	f7ff fa1d 	bl	80007c0 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <P_VGA_InitIO+0xa0>)
 8001388:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800138c:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800138e:	2101      	movs	r1, #1
 8001390:	2002      	movs	r0, #2
 8001392:	f7ff fb93 	bl	8000abc <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8001396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800139a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800139c:	2302      	movs	r3, #2
 800139e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80013a0:	2303      	movs	r3, #3
 80013a2:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80013a8:	2301      	movs	r3, #1
 80013aa:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4812      	ldr	r0, [pc, #72]	; (80013fc <P_VGA_InitIO+0xa4>)
 80013b2:	f7ff fa05 	bl	80007c0 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 80013b6:	2201      	movs	r2, #1
 80013b8:	210b      	movs	r1, #11
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <P_VGA_InitIO+0xa4>)
 80013bc:	f7ff fa8d 	bl	80008da <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80013c0:	2101      	movs	r1, #1
 80013c2:	2002      	movs	r0, #2
 80013c4:	f7ff fb7a 	bl	8000abc <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80013ce:	2301      	movs	r3, #1
 80013d0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80013d2:	2300      	movs	r3, #0
 80013d4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80013da:	2303      	movs	r3, #3
 80013dc:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <P_VGA_InitIO+0xa4>)
 80013e4:	f7ff f9ec 	bl	80007c0 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <P_VGA_InitIO+0xa4>)
 80013ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ee:	831a      	strh	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40020400 	.word	0x40020400

08001400 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001406:	2101      	movs	r1, #1
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fb93 	bl	8000b34 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 800140e:	230b      	movs	r3, #11
 8001410:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8001412:	2300      	movs	r3, #0
 8001414:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800141a:	2300      	movs	r3, #0
 800141c:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	4828      	ldr	r0, [pc, #160]	; (80014c8 <P_VGA_InitTIM+0xc8>)
 8001426:	f7ff fbcd 	bl	8000bc4 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800142a:	2101      	movs	r1, #1
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff fb63 	bl	8000af8 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8001432:	f640 236b 	movw	r3, #2667	; 0xa6b
 8001436:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001438:	2300      	movs	r3, #0
 800143a:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001440:	2300      	movs	r3, #0
 8001442:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800144e:	f7ff fbb9 	bl	8000bc4 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001452:	2360      	movs	r3, #96	; 0x60
 8001454:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001456:	2301      	movs	r3, #1
 8001458:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 800145a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800145e:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001460:	2302      	movs	r3, #2
 8001462:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800146c:	f7ff fc52 	bl	8000d14 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001470:	2108      	movs	r1, #8
 8001472:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001476:	f7ff fd39 	bl	8000eec <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800147a:	2360      	movs	r3, #96	; 0x60
 800147c:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800147e:	2301      	movs	r3, #1
 8001480:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8001482:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001486:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001488:	2302      	movs	r3, #2
 800148a:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001494:	f7ff fcc4 	bl	8000e20 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001498:	2108      	movs	r1, #8
 800149a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800149e:	f7ff fd40 	bl	8000f22 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 80014a2:	2101      	movs	r1, #1
 80014a4:	4808      	ldr	r0, [pc, #32]	; (80014c8 <P_VGA_InitTIM+0xc8>)
 80014a6:	f7ff fbf7 	bl	8000c98 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 80014aa:	2101      	movs	r1, #1
 80014ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014b0:	f7ff fbf2 	bl	8000c98 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 80014b4:	2101      	movs	r1, #1
 80014b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014ba:	f7ff fc0c 	bl	8000cd6 <TIM_Cmd>

}
 80014be:	bf00      	nop
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010000 	.word	0x40010000

080014cc <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2110      	movs	r1, #16
 80014d6:	4812      	ldr	r0, [pc, #72]	; (8001520 <P_VGA_InitINT+0x54>)
 80014d8:	f7ff f8b4 	bl	8000644 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 80014dc:	2344      	movs	r3, #68	; 0x44
 80014de:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fe6a 	bl	80001c8 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2108      	movs	r1, #8
 80014f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014fc:	f7ff fd2e 	bl	8000f5c <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8001500:	231c      	movs	r3, #28
 8001502:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800150c:	2301      	movs	r3, #1
 800150e:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fe58 	bl	80001c8 <NVIC_Init>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40026488 	.word	0x40026488

08001524 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b090      	sub	sp, #64	; 0x40
 8001528:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 800152a:	2101      	movs	r1, #1
 800152c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001530:	f7ff fac4 	bl	8000abc <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8001534:	2100      	movs	r1, #0
 8001536:	481b      	ldr	r0, [pc, #108]	; (80015a4 <P_VGA_InitDMA+0x80>)
 8001538:	f7fe ffea 	bl	8000510 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 800153c:	4819      	ldr	r0, [pc, #100]	; (80015a4 <P_VGA_InitDMA+0x80>)
 800153e:	f7fe febf 	bl	80002c0 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8001542:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001546:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <P_VGA_InitDMA+0x84>)
 800154a:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <P_VGA_InitDMA+0x88>)
 800154e:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8001554:	f240 1341 	movw	r3, #321	; 0x141
 8001558:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800155e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001562:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001570:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001576:	2300      	movs	r3, #0
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800157a:	2301      	movs	r3, #1
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800157e:	2300      	movs	r3, #0
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001582:	2300      	movs	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <P_VGA_InitDMA+0x80>)
 800158c:	f7fe ff6a 	bl	8000464 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <P_VGA_InitDMA+0x8c>)
 8001598:	f7ff fd13 	bl	8000fc2 <TIM_DMACmd>
}
 800159c:	bf00      	nop
 800159e:	3740      	adds	r7, #64	; 0x40
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40026488 	.word	0x40026488
 80015a8:	40021015 	.word	0x40021015
 80015ac:	200000ac 	.word	0x200000ac
 80015b0:	40010000 	.word	0x40010000

080015b4 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 80015b8:	2108      	movs	r1, #8
 80015ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015be:	f7ff fcf0 	bl	8000fa2 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <TIM2_IRQHandler+0xa8>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <TIM2_IRQHandler+0xa8>)
 80015cc:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <TIM2_IRQHandler+0xa8>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80015d6:	d905      	bls.n	80015e4 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <TIM2_IRQHandler+0xa8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <TIM2_IRQHandler+0xac>)
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <TIM2_IRQHandler+0xa8>)
 80015e2:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <TIM2_IRQHandler+0xa8>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d804      	bhi.n	80015f6 <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <TIM2_IRQHandler+0xb0>)
 80015ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f2:	835a      	strh	r2, [r3, #26]
 80015f4:	e003      	b.n	80015fe <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <TIM2_IRQHandler+0xb0>)
 80015f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fc:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <TIM2_IRQHandler+0xa8>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2b23      	cmp	r3, #35	; 0x23
 8001604:	d927      	bls.n	8001656 <TIM2_IRQHandler+0xa2>
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <TIM2_IRQHandler+0xa8>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	f240 2202 	movw	r2, #514	; 0x202
 800160e:	4293      	cmp	r3, r2
 8001610:	d821      	bhi.n	8001656 <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <TIM2_IRQHandler+0xb4>)
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <TIM2_IRQHandler+0xa8>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 800161a:	4a13      	ldr	r2, [pc, #76]	; (8001668 <TIM2_IRQHandler+0xb4>)
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <TIM2_IRQHandler+0xa8>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <TIM2_IRQHandler+0xb8>)
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <TIM2_IRQHandler+0xb8>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	b29b      	uxth	r3, r3
 8001630:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8001632:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <TIM2_IRQHandler+0xb4>)
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <TIM2_IRQHandler+0xb4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <TIM2_IRQHandler+0xa8>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <TIM2_IRQHandler+0xa8>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001652:	4a02      	ldr	r2, [pc, #8]	; (800165c <TIM2_IRQHandler+0xa8>)
 8001654:	6053      	str	r3, [r2, #4]
    }
  }
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000a0 	.word	0x200000a0
 8001660:	200000ac 	.word	0x200000ac
 8001664:	40020400 	.word	0x40020400
 8001668:	40026488 	.word	0x40026488
 800166c:	40010000 	.word	0x40010000

08001670 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8001674:	490d      	ldr	r1, [pc, #52]	; (80016ac <DMA2_Stream5_IRQHandler+0x3c>)
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <DMA2_Stream5_IRQHandler+0x40>)
 8001678:	f7ff f81e 	bl	80006b8 <DMA_GetITStatus>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d012      	beq.n	80016a8 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 8001682:	490a      	ldr	r1, [pc, #40]	; (80016ac <DMA2_Stream5_IRQHandler+0x3c>)
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <DMA2_Stream5_IRQHandler+0x40>)
 8001686:	f7ff f86d 	bl	8000764 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <DMA2_Stream5_IRQHandler+0x44>)
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <DMA2_Stream5_IRQHandler+0x44>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	b29b      	uxth	r3, r3
 8001698:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <DMA2_Stream5_IRQHandler+0x40>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <DMA2_Stream5_IRQHandler+0x48>)
 80016a2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80016a6:	835a      	strh	r2, [r3, #26]
  }
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20008800 	.word	0x20008800
 80016b0:	40026488 	.word	0x40026488
 80016b4:	40010000 	.word	0x40010000
 80016b8:	40021000 	.word	0x40021000

080016bc <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80016c0:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <Audio_MAL_IRQHandler+0xe8>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <Audio_MAL_IRQHandler+0xec>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4610      	mov	r0, r2
 80016cc:	f7fe ff52 	bl	8000574 <DMA_GetFlagStatus>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d064      	beq.n	80017a0 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80016d6:	4b35      	ldr	r3, [pc, #212]	; (80017ac <Audio_MAL_IRQHandler+0xf0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d04c      	beq.n	8001778 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80016de:	bf00      	nop
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <Audio_MAL_IRQHandler+0xe8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff2e 	bl	8000546 <DMA_GetCmdStatus>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f7      	bne.n	80016e0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <Audio_MAL_IRQHandler+0xe8>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <Audio_MAL_IRQHandler+0xec>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f7fe ff74 	bl	80005e8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <Audio_MAL_IRQHandler+0xf4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <Audio_MAL_IRQHandler+0xf8>)
 8001708:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <Audio_MAL_IRQHandler+0xf0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001712:	4293      	cmp	r3, r2
 8001714:	bf28      	it	cs
 8001716:	4613      	movcs	r3, r2
 8001718:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <Audio_MAL_IRQHandler+0xf8>)
 800171a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <Audio_MAL_IRQHandler+0xe8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4924      	ldr	r1, [pc, #144]	; (80017b4 <Audio_MAL_IRQHandler+0xf8>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fe9e 	bl	8000464 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <Audio_MAL_IRQHandler+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe feee 	bl	8000510 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <Audio_MAL_IRQHandler+0xf4>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <Audio_MAL_IRQHandler+0xf0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d203      	bcs.n	800174a <Audio_MAL_IRQHandler+0x8e>
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <Audio_MAL_IRQHandler+0xf0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	e000      	b.n	800174c <Audio_MAL_IRQHandler+0x90>
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <Audio_MAL_IRQHandler+0xfc>)
 800174c:	4413      	add	r3, r2
 800174e:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <Audio_MAL_IRQHandler+0xf4>)
 8001750:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <Audio_MAL_IRQHandler+0xf0>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <Audio_MAL_IRQHandler+0xf0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175e:	428b      	cmp	r3, r1
 8001760:	bf28      	it	cs
 8001762:	460b      	movcs	r3, r1
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <Audio_MAL_IRQHandler+0xf0>)
 8001768:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <Audio_MAL_IRQHandler+0xe8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fecd 	bl	8000510 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001776:	e013      	b.n	80017a0 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <Audio_MAL_IRQHandler+0xe8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fec6 	bl	8000510 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <Audio_MAL_IRQHandler+0xe8>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <Audio_MAL_IRQHandler+0xec>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f7fe ff2a 	bl	80005e8 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <Audio_MAL_IRQHandler+0xf4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f000 faef 	bl	8001d7e <EVAL_AUDIO_TransferComplete_CallBack>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000018 	.word	0x20000018
 80017a8:	2000001c 	.word	0x2000001c
 80017ac:	20000010 	.word	0x20000010
 80017b0:	20012da0 	.word	0x20012da0
 80017b4:	20012de0 	.word	0x20012de0
 80017b8:	0001fffe 	.word	0x0001fffe

080017bc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80017c0:	f7ff ff7c 	bl	80016bc <Audio_MAL_IRQHandler>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80017cc:	f7ff ff76 	bl	80016bc <Audio_MAL_IRQHandler>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80017d8:	2102      	movs	r1, #2
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <SPI3_IRQHandler+0x3c>)
 80017dc:	f7ff f9d6 	bl	8000b8c <SPI_I2S_GetFlagStatus>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d011      	beq.n	800180a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <SPI3_IRQHandler+0x40>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d106      	bne.n	80017fc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80017ee:	f000 fad0 	bl	8001d92 <EVAL_AUDIO_GetSampleCallBack>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4619      	mov	r1, r3
 80017f6:	2004      	movs	r0, #4
 80017f8:	f7fe fd48 	bl	800028c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80017fc:	f000 fac9 	bl	8001d92 <EVAL_AUDIO_GetSampleCallBack>
 8001800:	4603      	mov	r3, r0
 8001802:	4619      	mov	r1, r3
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <SPI3_IRQHandler+0x3c>)
 8001806:	f7ff f9b3 	bl	8000b70 <SPI_I2S_SendData>
  }
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40003c00 	.word	0x40003c00
 8001814:	20000014 	.word	0x20000014

08001818 <_ZN11InputOutputC1Ev>:
 *      Author: M
 */

#include <InputOutput.h>

InputOutput::InputOutput() {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <_ZN11InputOutputC1Ev+0x38>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f8fc 	bl	8001a28 <_ZN4UARTC1Ev>
	// TODO Auto-generated constructor stub
	err = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	err = initUART();
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f846 	bl	80018ca <_ZN11InputOutput8initUARTEv>
 800183e:	4602      	mov	r2, r0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	08002148 	.word	0x08002148

08001854 <_ZN11InputOutputD1Ev>:

InputOutput::~InputOutput() {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <_ZN11InputOutputD1Ev+0x24>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3304      	adds	r3, #4
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f8f0 	bl	8001a4c <_ZN4UARTD1Ev>
	// TODO Auto-generated destructor stub
}
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	08002148 	.word	0x08002148

0800187c <_ZN11InputOutputD0Ev>:
InputOutput::~InputOutput() {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
}
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ffe5 	bl	8001854 <_ZN11InputOutputD1Ev>
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fb86 	bl	8001f9c <_ZdlPv>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_ZN4UARTaSERKS_>:
#define LF 10 // linefeed char

/*!
 * \brief De UART class
 */
class UART {
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	1d19      	adds	r1, r3, #4
 80018a8:	2277      	movs	r2, #119	; 0x77
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2a00      	cmp	r2, #0
 80018b0:	db05      	blt.n	80018be <_ZN4UARTaSERKS_+0x24>
 80018b2:	7818      	ldrb	r0, [r3, #0]
 80018b4:	7008      	strb	r0, [r1, #0]
 80018b6:	3101      	adds	r1, #1
 80018b8:	3301      	adds	r3, #1
 80018ba:	3a01      	subs	r2, #1
 80018bc:	e7f7      	b.n	80018ae <_ZN4UARTaSERKS_+0x14>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <_ZN11InputOutput8initUARTEv>:
 */
int InputOutput::read(char *buf){
	u1.read(buf);
}

int InputOutput::initUART(){
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b0a3      	sub	sp, #140	; 0x8c
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	u1 = UART();
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1d1c      	adds	r4, r3, #4
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f8a4 	bl	8001a28 <_ZN4UARTC1Ev>
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff ffd7 	bl	800189a <_ZN4UARTaSERKS_>
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f8ab 	bl	8001a4c <_ZN4UARTD1Ev>
}
 80018f6:	bf00      	nop
 80018f8:	4618      	mov	r0, r3
 80018fa:	378c      	adds	r7, #140	; 0x8c
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd90      	pop	{r4, r7, pc}

08001900 <_ZN9VgascreenaSERKS_>:
 * \brief de VGA class
 */
#ifndef VGASCREEN_H_
#define VGASCREEN_H_

class Vgascreen {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
	...

08001928 <_ZN10LogicLayerC1Ev>:

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
LogicLayer::LogicLayer() {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <_ZN10LogicLayerC1Ev+0x54>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f9d2 	bl	8001ce4 <_ZN9VgascreenC1Ev>
	// TODO Auto-generated constructor stub
	screen = Vgascreen();
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1d1c      	adds	r4, r3, #4
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f9cb 	bl	8001ce4 <_ZN9VgascreenC1Ev>
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4619      	mov	r1, r3
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff ffd3 	bl	8001900 <_ZN9VgascreenaSERKS_>
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f9d2 	bl	8001d08 <_ZN9VgascreenD1Ev>
	bufCount = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
	lastCount = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
}
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	371c      	adds	r7, #28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	bf00      	nop
 800197c:	08002158 	.word	0x08002158

08001980 <_ZN10LogicLayerD1Ev>:

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
LogicLayer::~LogicLayer() {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <_ZN10LogicLayerD1Ev+0x24>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f9b8 	bl	8001d08 <_ZN9VgascreenD1Ev>
	// TODO Auto-generated destructor stub
}
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	08002158 	.word	0x08002158

080019a8 <_ZN10LogicLayerD0Ev>:
LogicLayer::~LogicLayer() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
}
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe5 	bl	8001980 <_ZN10LogicLayerD1Ev>
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 faf0 	bl	8001f9c <_ZdlPv>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_ZN10LogicLayer4execEv>:

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::exec(){
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]

}
 80019ce:	bf00      	nop
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <_ZN10LogicLayer10setCommandEPc>:

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::setCommand(char *buf){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	int i = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	613b      	str	r3, [r7, #16]
	char *inbuf;
	inbuf = buf;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	60bb      	str	r3, [r7, #8]
	//int bufSize = sizeof(strtok(buf, " "));

	char *test;
	char *test2;
	test = strtok_r(inbuf, " ",&inbuf);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f107 0208 	add.w	r2, r7, #8
 80019f4:	490b      	ldr	r1, [pc, #44]	; (8001a24 <_ZN10LogicLayer10setCommandEPc+0x48>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fb81 	bl	80020fe <strtok_r>
 80019fc:	6178      	str	r0, [r7, #20]
	while(test != NULL){
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <_ZN10LogicLayer10setCommandEPc+0x3e>
		test = strtok_r(inbuf, " ", &inbuf);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f107 0208 	add.w	r2, r7, #8
 8001a0a:	4906      	ldr	r1, [pc, #24]	; (8001a24 <_ZN10LogicLayer10setCommandEPc+0x48>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fb76 	bl	80020fe <strtok_r>
 8001a12:	6178      	str	r0, [r7, #20]
		test2 = test;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	60fb      	str	r3, [r7, #12]
	while(test != NULL){
 8001a18:	e7f1      	b.n	80019fe <_ZN10LogicLayer10setCommandEPc+0x22>

	for(i; i < strlen(test); i= i + 1){
		break;
	}
	*/
}
 8001a1a:	bf00      	nop
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	08002120 	.word	0x08002120

08001a28 <_ZN4UARTC1Ev>:
 *      Author: M
 */

#include <UART.h>

UART::UART() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_ZN4UARTC1Ev+0x20>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	init();
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f828 	bl	8001a8c <_ZN4UART4initEv>

}
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	08002168 	.word	0x08002168

08001a4c <_ZN4UARTD1Ev>:

UART::~UART() {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <_ZN4UARTD1Ev+0x1c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	08002168 	.word	0x08002168

08001a6c <_ZN4UARTD0Ev>:
UART::~UART() {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
}
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe9 	bl	8001a4c <_ZN4UARTD1Ev>
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fa8e 	bl	8001f9c <_ZdlPv>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <_ZN4UART4initEv>:

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int UART::init(){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	  /* --------------------------- System Clocks Configuration -----------------*/
	  /* USART2 clock enable */
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001a94:	2101      	movs	r1, #1
 8001a96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a9a:	f7ff f82d 	bl	8000af8 <RCC_APB1PeriphClockCmd>

	  /* GPIOA clock enable */
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff f80b 	bl	8000abc <RCC_AHB1PeriphClockCmd>

	  GPIO_InitTypeDef GPIO_InitStructure;

	  /*-------------------------- GPIO Configuration ----------------------------*/
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001aa6:	230c      	movs	r3, #12
 8001aa8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	773b      	strb	r3, [r7, #28]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	77bb      	strb	r3, [r7, #30]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	77fb      	strb	r3, [r7, #31]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	777b      	strb	r3, [r7, #29]
	  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <_ZN4UART4initEv+0x94>)
 8001ac2:	f7fe fe7d 	bl	80007c0 <GPIO_Init>

	  /* Connect USART pins to AF */
	  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4815      	ldr	r0, [pc, #84]	; (8001b20 <_ZN4UART4initEv+0x94>)
 8001acc:	f7fe ff05 	bl	80008da <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	4812      	ldr	r0, [pc, #72]	; (8001b20 <_ZN4UART4initEv+0x94>)
 8001ad6:	f7fe ff00 	bl	80008da <GPIO_PinAFConfig>
	      - One Stop Bit
	      - No parity
	      - Hardware flow control disabled (RTS and CTS signals)
	      - Receive and transmit enabled
	*/
	USART_InitStructure.USART_BaudRate = 115200;
 8001ada:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ade:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001aec:	2300      	movs	r3, #0
 8001aee:	82bb      	strh	r3, [r7, #20]

	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001af0:	230c      	movs	r3, #12
 8001af2:	827b      	strh	r3, [r7, #18]

	USART_Init(USART2, &USART_InitStructure);
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <_ZN4UART4initEv+0x98>)
 8001afc:	f7ff fa84 	bl	8001008 <USART_Init>
	USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f240 5125 	movw	r1, #1317	; 0x525
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <_ZN4UART4initEv+0x98>)
 8001b08:	f7ff fb57 	bl	80011ba <USART_ITConfig>

	USART_Cmd(USART2, ENABLE);
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <_ZN4UART4initEv+0x98>)
 8001b10:	f7ff fb34 	bl	800117c <USART_Cmd>
}
 8001b14:	bf00      	nop
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40004400 	.word	0x40004400

08001b28 <_ZN10LogicLayeraSERKS_>:
	char attr7;
	char attr8;
	char attr9;
};

class LogicLayer {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	1d1a      	adds	r2, r3, #4
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7ff fedf 	bl	8001900 <_ZN9VgascreenaSERKS_>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f102 0018 	add.w	r0, r2, #24
 8001b5a:	3318      	adds	r3, #24
 8001b5c:	2264      	movs	r2, #100	; 0x64
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f000 fa4a 	bl	8001ff8 <memcpy>
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f102 007c 	add.w	r0, r2, #124	; 0x7c
 8001b6c:	337c      	adds	r3, #124	; 0x7c
 8001b6e:	2264      	movs	r2, #100	; 0x64
 8001b70:	4619      	mov	r1, r3
 8001b72:	f000 fa41 	bl	8001ff8 <memcpy>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_ZN11InputOutputaSERKS_>:
#ifndef INPUTOUTPUT_H_
#define INPUTOUTPUT_H_

#include <UART.h>

class InputOutput {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	1d1a      	adds	r2, r3, #4
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3304      	adds	r3, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7ff fe80 	bl	800189a <_ZN4UARTaSERKS_>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZN13UserinterfaceC1Ev>:
 *      Author: M
 */

#include <Userinterface.h>

Userinterface::Userinterface() {
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b0dd      	sub	sp, #372	; 0x174
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	6018      	str	r0, [r3, #0]
 8001bba:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <_ZN13UserinterfaceC1Ev+0x94>)
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	336c      	adds	r3, #108	; 0x6c
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fead 	bl	8001928 <_ZN10LogicLayerC1Ev>
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fe1e 	bl	8001818 <_ZN11InputOutputC1Ev>
	// TODO Auto-generated constructor stub
	LL = LogicLayer();
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fe9d 	bl	8001928 <_ZN10LogicLayerC1Ev>
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff ff97 	bl	8001b28 <_ZN10LogicLayeraSERKS_>
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff febe 	bl	8001980 <_ZN10LogicLayerD1Ev>
	IO = InputOutput();
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8001c0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe01 	bl	8001818 <_ZN11InputOutputC1Ev>
 8001c16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f7ff ffaf 	bl	8001b80 <_ZN11InputOutputaSERKS_>
 8001c22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fe14 	bl	8001854 <_ZN11InputOutputD1Ev>
	err = 0;
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2200      	movs	r2, #0
 8001c32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd90      	pop	{r4, r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08002178 	.word	0x08002178

08001c48 <_ZN13UserinterfaceD1Ev>:

Userinterface::~Userinterface() {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <_ZN13UserinterfaceD1Ev+0x30>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fdf9 	bl	8001854 <_ZN11InputOutputD1Ev>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	336c      	adds	r3, #108	; 0x6c
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe8a 	bl	8001980 <_ZN10LogicLayerD1Ev>
	// TODO Auto-generated destructor stub
}
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	08002178 	.word	0x08002178

08001c7c <_ZN13UserinterfaceD0Ev>:
Userinterface::~Userinterface() {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
}
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffdf 	bl	8001c48 <_ZN13UserinterfaceD1Ev>
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f986 	bl	8001f9c <_ZdlPv>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <_ZN13Userinterface8mainLoopEv>:

void Userinterface::mainLoop(){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

	char test[] = "hallo";
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <_ZN13Userinterface8mainLoopEv+0x40>)
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cae:	6018      	str	r0, [r3, #0]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	8019      	strh	r1, [r3, #0]
	while(err==0){
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10b      	bne.n	8001cd4 <_ZN13Userinterface8mainLoopEv+0x38>

		//IO.write(test);

		//IO.read(buf);

		LL.setCommand("hallo test dit eens");
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	336c      	adds	r3, #108	; 0x6c
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <_ZN13Userinterface8mainLoopEv+0x44>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe8a 	bl	80019dc <_ZN10LogicLayer10setCommandEPc>

		LL.exec();
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	336c      	adds	r3, #108	; 0x6c
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fe7a 	bl	80019c6 <_ZN10LogicLayer4execEv>
	while(err==0){
 8001cd2:	e7ef      	b.n	8001cb4 <_ZN13Userinterface8mainLoopEv+0x18>

	}
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	08002138 	.word	0x08002138
 8001ce0:	08002124 	.word	0x08002124

08001ce4 <_ZN9VgascreenC1Ev>:
#include <stm32_ub_vga_screen.h>
#include <stdlib.h>
#include <Vgascreen.h>
#include <algorithm>

Vgascreen::Vgascreen() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_ZN9VgascreenC1Ev+0x20>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	init_VGA();
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f827 	bl	8001d46 <_ZN9Vgascreen8init_VGAEv>
}
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	08002188 	.word	0x08002188

08001d08 <_ZN9VgascreenD1Ev>:

Vgascreen::~Vgascreen() {
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <_ZN9VgascreenD1Ev+0x1c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	08002188 	.word	0x08002188

08001d28 <_ZN9VgascreenD0Ev>:
Vgascreen::~Vgascreen() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
}
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffe9 	bl	8001d08 <_ZN9VgascreenD1Ev>
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f930 	bl	8001f9c <_ZdlPv>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN9Vgascreen8init_VGAEv>:


int Vgascreen::init_VGA(){
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	UB_VGA_Screen_Init(); // Init VGA-Screen
 8001d4e:	f7ff fa7b 	bl	8001248 <UB_VGA_Screen_Init>
	UB_VGA_FillScreen(VGA_COL_GREEN);// Set screen green.
 8001d52:	201c      	movs	r0, #28
 8001d54:	f7ff fab8 	bl	80012c8 <UB_VGA_FillScreen>
	return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b0f4      	sub	sp, #464	; 0x1d0
 8001d66:	af00      	add	r7, sp, #0
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */
  /** @code */
  /* TODO - Add your application code here */
  SystemInit(); // System speed to 168MHz
 8001d68:	f000 f870 	bl	8001e4c <SystemInit>
  Userinterface UI = Userinterface();
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff1e 	bl	8001bb0 <_ZN13UserinterfaceC1Ev>


  /* Infinite loop */
  while (1)
  {
	UI.mainLoop();
 8001d74:	463b      	mov	r3, r7
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff90 	bl	8001c9c <_ZN13Userinterface8mainLoopEv>
 8001d7c:	e7fa      	b.n	8001d74 <main+0x12>

08001d7e <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8001d88:	bf00      	nop
}
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
	...

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001da8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001daa:	e003      	b.n	8001db4 <LoopCopyDataInit>

08001dac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001db0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001db2:	3104      	adds	r1, #4

08001db4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001db8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dbc:	d3f6      	bcc.n	8001dac <CopyDataInit>
  ldr  r2, =_sbss
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dc0:	e002      	b.n	8001dc8 <LoopFillZerobss>

08001dc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dc4:	f842 3b04 	str.w	r3, [r2], #4

08001dc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dcc:	d3f9      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dce:	f000 f83d 	bl	8001e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f000 f8e5 	bl	8001fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7ff ffc4 	bl	8001d62 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ddc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001de0:	08002198 	.word	0x08002198
  ldr  r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001de8:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001dec:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8001df0:	20012e1c 	.word	0x20012e1c

08001df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC_IRQHandler>

08001df6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
	...

08001e4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <SystemInit+0x50>)
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <SystemInit+0x50>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <SystemInit+0x50>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <SystemInit+0x50>)
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <SystemInit+0x50>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <SystemInit+0x50>)
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SystemInit+0x54>)
 8001e76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e78:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <SystemInit+0x50>)
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <SystemInit+0x50>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SystemInit+0x50>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001e8a:	f000 f80d 	bl	8001ea8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SystemInit+0x58>)
 8001e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e94:	609a      	str	r2, [r3, #8]
#endif
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	24003010 	.word	0x24003010
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001eb6:	4a35      	ldr	r2, [pc, #212]	; (8001f8c <SetSysClock+0xe4>)
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <SetSysClock+0xe4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001ec2:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <SetSysClock+0xe4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d103      	bne.n	8001ee0 <SetSysClock+0x38>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001ede:	d1f0      	bne.n	8001ec2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <SetSysClock+0xe4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001eec:	2301      	movs	r3, #1
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	e001      	b.n	8001ef6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d142      	bne.n	8001f82 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001efc:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <SetSysClock+0xe4>)
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <SetSysClock+0xe4>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001f08:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <SetSysClock+0xe8>)
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <SetSysClock+0xe8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f12:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <SetSysClock+0xe4>)
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <SetSysClock+0xe4>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <SetSysClock+0xe4>)
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <SetSysClock+0xe4>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001f28:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <SetSysClock+0xe4>)
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <SetSysClock+0xe4>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001f32:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <SetSysClock+0xe4>)
 8001f36:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <SetSysClock+0xec>)
 8001f38:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <SetSysClock+0xe4>)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <SetSysClock+0xe4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f44:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f46:	bf00      	nop
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <SetSysClock+0xe4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f9      	beq.n	8001f48 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <SetSysClock+0xf0>)
 8001f56:	f240 6205 	movw	r2, #1541	; 0x605
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <SetSysClock+0xe4>)
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <SetSysClock+0xe4>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0303 	bic.w	r3, r3, #3
 8001f66:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001f68:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <SetSysClock+0xe4>)
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <SetSysClock+0xe4>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001f74:	bf00      	nop
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SetSysClock+0xe4>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d1f9      	bne.n	8001f76 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000
 8001f94:	07405408 	.word	0x07405408
 8001f98:	40023c00 	.word	0x40023c00

08001f9c <_ZdlPv>:
 8001f9c:	f000 b824 	b.w	8001fe8 <free>

08001fa0 <__libc_init_array>:
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	4e0d      	ldr	r6, [pc, #52]	; (8001fd8 <__libc_init_array+0x38>)
 8001fa4:	4c0d      	ldr	r4, [pc, #52]	; (8001fdc <__libc_init_array+0x3c>)
 8001fa6:	1ba4      	subs	r4, r4, r6
 8001fa8:	10a4      	asrs	r4, r4, #2
 8001faa:	2500      	movs	r5, #0
 8001fac:	42a5      	cmp	r5, r4
 8001fae:	d109      	bne.n	8001fc4 <__libc_init_array+0x24>
 8001fb0:	4e0b      	ldr	r6, [pc, #44]	; (8001fe0 <__libc_init_array+0x40>)
 8001fb2:	4c0c      	ldr	r4, [pc, #48]	; (8001fe4 <__libc_init_array+0x44>)
 8001fb4:	f000 f8a8 	bl	8002108 <_init>
 8001fb8:	1ba4      	subs	r4, r4, r6
 8001fba:	10a4      	asrs	r4, r4, #2
 8001fbc:	2500      	movs	r5, #0
 8001fbe:	42a5      	cmp	r5, r4
 8001fc0:	d105      	bne.n	8001fce <__libc_init_array+0x2e>
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fc8:	4798      	blx	r3
 8001fca:	3501      	adds	r5, #1
 8001fcc:	e7ee      	b.n	8001fac <__libc_init_array+0xc>
 8001fce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fd2:	4798      	blx	r3
 8001fd4:	3501      	adds	r5, #1
 8001fd6:	e7f2      	b.n	8001fbe <__libc_init_array+0x1e>
 8001fd8:	08002190 	.word	0x08002190
 8001fdc:	08002190 	.word	0x08002190
 8001fe0:	08002190 	.word	0x08002190
 8001fe4:	08002194 	.word	0x08002194

08001fe8 <free>:
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <free+0xc>)
 8001fea:	4601      	mov	r1, r0
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	f000 b80f 	b.w	8002010 <_free_r>
 8001ff2:	bf00      	nop
 8001ff4:	20000020 	.word	0x20000020

08001ff8 <memcpy>:
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	1e43      	subs	r3, r0, #1
 8001ffc:	440a      	add	r2, r1
 8001ffe:	4291      	cmp	r1, r2
 8002000:	d100      	bne.n	8002004 <memcpy+0xc>
 8002002:	bd10      	pop	{r4, pc}
 8002004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800200c:	e7f7      	b.n	8001ffe <memcpy+0x6>
	...

08002010 <_free_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	4605      	mov	r5, r0
 8002014:	2900      	cmp	r1, #0
 8002016:	d045      	beq.n	80020a4 <_free_r+0x94>
 8002018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800201c:	1f0c      	subs	r4, r1, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	bfb8      	it	lt
 8002022:	18e4      	addlt	r4, r4, r3
 8002024:	f000 f86e 	bl	8002104 <__malloc_lock>
 8002028:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <_free_r+0x98>)
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	4610      	mov	r0, r2
 800202e:	b933      	cbnz	r3, 800203e <_free_r+0x2e>
 8002030:	6063      	str	r3, [r4, #4]
 8002032:	6014      	str	r4, [r2, #0]
 8002034:	4628      	mov	r0, r5
 8002036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800203a:	f000 b864 	b.w	8002106 <__malloc_unlock>
 800203e:	42a3      	cmp	r3, r4
 8002040:	d90c      	bls.n	800205c <_free_r+0x4c>
 8002042:	6821      	ldr	r1, [r4, #0]
 8002044:	1862      	adds	r2, r4, r1
 8002046:	4293      	cmp	r3, r2
 8002048:	bf04      	itt	eq
 800204a:	681a      	ldreq	r2, [r3, #0]
 800204c:	685b      	ldreq	r3, [r3, #4]
 800204e:	6063      	str	r3, [r4, #4]
 8002050:	bf04      	itt	eq
 8002052:	1852      	addeq	r2, r2, r1
 8002054:	6022      	streq	r2, [r4, #0]
 8002056:	6004      	str	r4, [r0, #0]
 8002058:	e7ec      	b.n	8002034 <_free_r+0x24>
 800205a:	4613      	mov	r3, r2
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	b10a      	cbz	r2, 8002064 <_free_r+0x54>
 8002060:	42a2      	cmp	r2, r4
 8002062:	d9fa      	bls.n	800205a <_free_r+0x4a>
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	1858      	adds	r0, r3, r1
 8002068:	42a0      	cmp	r0, r4
 800206a:	d10b      	bne.n	8002084 <_free_r+0x74>
 800206c:	6820      	ldr	r0, [r4, #0]
 800206e:	4401      	add	r1, r0
 8002070:	1858      	adds	r0, r3, r1
 8002072:	4282      	cmp	r2, r0
 8002074:	6019      	str	r1, [r3, #0]
 8002076:	d1dd      	bne.n	8002034 <_free_r+0x24>
 8002078:	6810      	ldr	r0, [r2, #0]
 800207a:	6852      	ldr	r2, [r2, #4]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	4401      	add	r1, r0
 8002080:	6019      	str	r1, [r3, #0]
 8002082:	e7d7      	b.n	8002034 <_free_r+0x24>
 8002084:	d902      	bls.n	800208c <_free_r+0x7c>
 8002086:	230c      	movs	r3, #12
 8002088:	602b      	str	r3, [r5, #0]
 800208a:	e7d3      	b.n	8002034 <_free_r+0x24>
 800208c:	6820      	ldr	r0, [r4, #0]
 800208e:	1821      	adds	r1, r4, r0
 8002090:	428a      	cmp	r2, r1
 8002092:	bf04      	itt	eq
 8002094:	6811      	ldreq	r1, [r2, #0]
 8002096:	6852      	ldreq	r2, [r2, #4]
 8002098:	6062      	str	r2, [r4, #4]
 800209a:	bf04      	itt	eq
 800209c:	1809      	addeq	r1, r1, r0
 800209e:	6021      	streq	r1, [r4, #0]
 80020a0:	605c      	str	r4, [r3, #4]
 80020a2:	e7c7      	b.n	8002034 <_free_r+0x24>
 80020a4:	bd38      	pop	{r3, r4, r5, pc}
 80020a6:	bf00      	nop
 80020a8:	20012d9c 	.word	0x20012d9c

080020ac <__strtok_r>:
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ae:	b918      	cbnz	r0, 80020b8 <__strtok_r+0xc>
 80020b0:	6810      	ldr	r0, [r2, #0]
 80020b2:	b908      	cbnz	r0, 80020b8 <__strtok_r+0xc>
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b6:	4620      	mov	r0, r4
 80020b8:	4604      	mov	r4, r0
 80020ba:	460f      	mov	r7, r1
 80020bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80020c0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80020c4:	b91e      	cbnz	r6, 80020ce <__strtok_r+0x22>
 80020c6:	b965      	cbnz	r5, 80020e2 <__strtok_r+0x36>
 80020c8:	6015      	str	r5, [r2, #0]
 80020ca:	4628      	mov	r0, r5
 80020cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ce:	42b5      	cmp	r5, r6
 80020d0:	d1f6      	bne.n	80020c0 <__strtok_r+0x14>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ef      	bne.n	80020b6 <__strtok_r+0xa>
 80020d6:	6014      	str	r4, [r2, #0]
 80020d8:	7003      	strb	r3, [r0, #0]
 80020da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020dc:	461c      	mov	r4, r3
 80020de:	e00c      	b.n	80020fa <__strtok_r+0x4e>
 80020e0:	b915      	cbnz	r5, 80020e8 <__strtok_r+0x3c>
 80020e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80020e6:	460e      	mov	r6, r1
 80020e8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80020ec:	42ab      	cmp	r3, r5
 80020ee:	d1f7      	bne.n	80020e0 <__strtok_r+0x34>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f3      	beq.n	80020dc <__strtok_r+0x30>
 80020f4:	2300      	movs	r3, #0
 80020f6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80020fa:	6014      	str	r4, [r2, #0]
 80020fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020fe <strtok_r>:
 80020fe:	2301      	movs	r3, #1
 8002100:	f7ff bfd4 	b.w	80020ac <__strtok_r>

08002104 <__malloc_lock>:
 8002104:	4770      	bx	lr

08002106 <__malloc_unlock>:
 8002106:	4770      	bx	lr

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
