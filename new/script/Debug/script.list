
script.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000067b0  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800a538  0800a538  0001a538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000234  20000000  0800a544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020234  2**0
                  CONTENTS
  7 .bss          00017b08  20000234  20000234  00020234  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20017d3c  20017d3c  00020234  2**0
                  ALLOC
  9 .ARM.attributes 0000002a  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000533d  00000000  00000000  0002025e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000ddbf  00000000  00000000  0002559b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000258e  00000000  00000000  0003335a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000cf8  00000000  00000000  000358e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bd0  00000000  00000000  000365e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000042cd  00000000  00000000  000371b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003b47d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000039cc  00000000  00000000  0003b4fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d70 	.word	0x08003d70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	08003d70 	.word	0x08003d70

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_frsub>:
 80001dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__addsf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_fsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e8 <__addsf3>:
 80001e8:	0042      	lsls	r2, r0, #1
 80001ea:	bf1f      	itttt	ne
 80001ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001f0:	ea92 0f03 	teqne	r2, r3
 80001f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001fc:	d06a      	beq.n	80002d4 <__addsf3+0xec>
 80001fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000202:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000206:	bfc1      	itttt	gt
 8000208:	18d2      	addgt	r2, r2, r3
 800020a:	4041      	eorgt	r1, r0
 800020c:	4048      	eorgt	r0, r1
 800020e:	4041      	eorgt	r1, r0
 8000210:	bfb8      	it	lt
 8000212:	425b      	neglt	r3, r3
 8000214:	2b19      	cmp	r3, #25
 8000216:	bf88      	it	hi
 8000218:	4770      	bxhi	lr
 800021a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000222:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000226:	bf18      	it	ne
 8000228:	4240      	negne	r0, r0
 800022a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000232:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000236:	bf18      	it	ne
 8000238:	4249      	negne	r1, r1
 800023a:	ea92 0f03 	teq	r2, r3
 800023e:	d03f      	beq.n	80002c0 <__addsf3+0xd8>
 8000240:	f1a2 0201 	sub.w	r2, r2, #1
 8000244:	fa41 fc03 	asr.w	ip, r1, r3
 8000248:	eb10 000c 	adds.w	r0, r0, ip
 800024c:	f1c3 0320 	rsb	r3, r3, #32
 8000250:	fa01 f103 	lsl.w	r1, r1, r3
 8000254:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000258:	d502      	bpl.n	8000260 <__addsf3+0x78>
 800025a:	4249      	negs	r1, r1
 800025c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000260:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000264:	d313      	bcc.n	800028e <__addsf3+0xa6>
 8000266:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026a:	d306      	bcc.n	800027a <__addsf3+0x92>
 800026c:	0840      	lsrs	r0, r0, #1
 800026e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000272:	f102 0201 	add.w	r2, r2, #1
 8000276:	2afe      	cmp	r2, #254	; 0xfe
 8000278:	d251      	bcs.n	800031e <__addsf3+0x136>
 800027a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	ea40 0003 	orr.w	r0, r0, r3
 800028c:	4770      	bx	lr
 800028e:	0049      	lsls	r1, r1, #1
 8000290:	eb40 0000 	adc.w	r0, r0, r0
 8000294:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	d1ed      	bne.n	800027a <__addsf3+0x92>
 800029e:	fab0 fc80 	clz	ip, r0
 80002a2:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a6:	ebb2 020c 	subs.w	r2, r2, ip
 80002aa:	fa00 f00c 	lsl.w	r0, r0, ip
 80002ae:	bfaa      	itet	ge
 80002b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b4:	4252      	neglt	r2, r2
 80002b6:	4318      	orrge	r0, r3
 80002b8:	bfbc      	itt	lt
 80002ba:	40d0      	lsrlt	r0, r2
 80002bc:	4318      	orrlt	r0, r3
 80002be:	4770      	bx	lr
 80002c0:	f092 0f00 	teq	r2, #0
 80002c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c8:	bf06      	itte	eq
 80002ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ce:	3201      	addeq	r2, #1
 80002d0:	3b01      	subne	r3, #1
 80002d2:	e7b5      	b.n	8000240 <__addsf3+0x58>
 80002d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002dc:	bf18      	it	ne
 80002de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e2:	d021      	beq.n	8000328 <__addsf3+0x140>
 80002e4:	ea92 0f03 	teq	r2, r3
 80002e8:	d004      	beq.n	80002f4 <__addsf3+0x10c>
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	bf08      	it	eq
 80002f0:	4608      	moveq	r0, r1
 80002f2:	4770      	bx	lr
 80002f4:	ea90 0f01 	teq	r0, r1
 80002f8:	bf1c      	itt	ne
 80002fa:	2000      	movne	r0, #0
 80002fc:	4770      	bxne	lr
 80002fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000302:	d104      	bne.n	800030e <__addsf3+0x126>
 8000304:	0040      	lsls	r0, r0, #1
 8000306:	bf28      	it	cs
 8000308:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800030c:	4770      	bx	lr
 800030e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000312:	bf3c      	itt	cc
 8000314:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000318:	4770      	bxcc	lr
 800031a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000326:	4770      	bx	lr
 8000328:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800032c:	bf16      	itet	ne
 800032e:	4608      	movne	r0, r1
 8000330:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000334:	4601      	movne	r1, r0
 8000336:	0242      	lsls	r2, r0, #9
 8000338:	bf06      	itte	eq
 800033a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033e:	ea90 0f01 	teqeq	r0, r1
 8000342:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000346:	4770      	bx	lr

08000348 <__aeabi_ui2f>:
 8000348:	f04f 0300 	mov.w	r3, #0
 800034c:	e004      	b.n	8000358 <__aeabi_i2f+0x8>
 800034e:	bf00      	nop

08000350 <__aeabi_i2f>:
 8000350:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000354:	bf48      	it	mi
 8000356:	4240      	negmi	r0, r0
 8000358:	ea5f 0c00 	movs.w	ip, r0
 800035c:	bf08      	it	eq
 800035e:	4770      	bxeq	lr
 8000360:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000364:	4601      	mov	r1, r0
 8000366:	f04f 0000 	mov.w	r0, #0
 800036a:	e01c      	b.n	80003a6 <__aeabi_l2f+0x2a>

0800036c <__aeabi_ul2f>:
 800036c:	ea50 0201 	orrs.w	r2, r0, r1
 8000370:	bf08      	it	eq
 8000372:	4770      	bxeq	lr
 8000374:	f04f 0300 	mov.w	r3, #0
 8000378:	e00a      	b.n	8000390 <__aeabi_l2f+0x14>
 800037a:	bf00      	nop

0800037c <__aeabi_l2f>:
 800037c:	ea50 0201 	orrs.w	r2, r0, r1
 8000380:	bf08      	it	eq
 8000382:	4770      	bxeq	lr
 8000384:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000388:	d502      	bpl.n	8000390 <__aeabi_l2f+0x14>
 800038a:	4240      	negs	r0, r0
 800038c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000390:	ea5f 0c01 	movs.w	ip, r1
 8000394:	bf02      	ittt	eq
 8000396:	4684      	moveq	ip, r0
 8000398:	4601      	moveq	r1, r0
 800039a:	2000      	moveq	r0, #0
 800039c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003a0:	bf08      	it	eq
 80003a2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003aa:	fabc f28c 	clz	r2, ip
 80003ae:	3a08      	subs	r2, #8
 80003b0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b4:	db10      	blt.n	80003d8 <__aeabi_l2f+0x5c>
 80003b6:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ba:	4463      	add	r3, ip
 80003bc:	fa00 fc02 	lsl.w	ip, r0, r2
 80003c0:	f1c2 0220 	rsb	r2, r2, #32
 80003c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c8:	fa20 f202 	lsr.w	r2, r0, r2
 80003cc:	eb43 0002 	adc.w	r0, r3, r2
 80003d0:	bf08      	it	eq
 80003d2:	f020 0001 	biceq.w	r0, r0, #1
 80003d6:	4770      	bx	lr
 80003d8:	f102 0220 	add.w	r2, r2, #32
 80003dc:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e0:	f1c2 0220 	rsb	r2, r2, #32
 80003e4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e8:	fa21 f202 	lsr.w	r2, r1, r2
 80003ec:	eb43 0002 	adc.w	r0, r3, r2
 80003f0:	bf08      	it	eq
 80003f2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_fmul>:
 80003f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000400:	bf1e      	ittt	ne
 8000402:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000406:	ea92 0f0c 	teqne	r2, ip
 800040a:	ea93 0f0c 	teqne	r3, ip
 800040e:	d06f      	beq.n	80004f0 <__aeabi_fmul+0xf8>
 8000410:	441a      	add	r2, r3
 8000412:	ea80 0c01 	eor.w	ip, r0, r1
 8000416:	0240      	lsls	r0, r0, #9
 8000418:	bf18      	it	ne
 800041a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800041e:	d01e      	beq.n	800045e <__aeabi_fmul+0x66>
 8000420:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000424:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000428:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800042c:	fba0 3101 	umull	r3, r1, r0, r1
 8000430:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000434:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000438:	bf3e      	ittt	cc
 800043a:	0049      	lslcc	r1, r1, #1
 800043c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000440:	005b      	lslcc	r3, r3, #1
 8000442:	ea40 0001 	orr.w	r0, r0, r1
 8000446:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800044a:	2afd      	cmp	r2, #253	; 0xfd
 800044c:	d81d      	bhi.n	800048a <__aeabi_fmul+0x92>
 800044e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000452:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000456:	bf08      	it	eq
 8000458:	f020 0001 	biceq.w	r0, r0, #1
 800045c:	4770      	bx	lr
 800045e:	f090 0f00 	teq	r0, #0
 8000462:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000466:	bf08      	it	eq
 8000468:	0249      	lsleq	r1, r1, #9
 800046a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800046e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000472:	3a7f      	subs	r2, #127	; 0x7f
 8000474:	bfc2      	ittt	gt
 8000476:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800047a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800047e:	4770      	bxgt	lr
 8000480:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000484:	f04f 0300 	mov.w	r3, #0
 8000488:	3a01      	subs	r2, #1
 800048a:	dc5d      	bgt.n	8000548 <__aeabi_fmul+0x150>
 800048c:	f112 0f19 	cmn.w	r2, #25
 8000490:	bfdc      	itt	le
 8000492:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000496:	4770      	bxle	lr
 8000498:	f1c2 0200 	rsb	r2, r2, #0
 800049c:	0041      	lsls	r1, r0, #1
 800049e:	fa21 f102 	lsr.w	r1, r1, r2
 80004a2:	f1c2 0220 	rsb	r2, r2, #32
 80004a6:	fa00 fc02 	lsl.w	ip, r0, r2
 80004aa:	ea5f 0031 	movs.w	r0, r1, rrx
 80004ae:	f140 0000 	adc.w	r0, r0, #0
 80004b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004b6:	bf08      	it	eq
 80004b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004bc:	4770      	bx	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004c6:	bf02      	ittt	eq
 80004c8:	0040      	lsleq	r0, r0, #1
 80004ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004ce:	3a01      	subeq	r2, #1
 80004d0:	d0f9      	beq.n	80004c6 <__aeabi_fmul+0xce>
 80004d2:	ea40 000c 	orr.w	r0, r0, ip
 80004d6:	f093 0f00 	teq	r3, #0
 80004da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004de:	bf02      	ittt	eq
 80004e0:	0049      	lsleq	r1, r1, #1
 80004e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004e6:	3b01      	subeq	r3, #1
 80004e8:	d0f9      	beq.n	80004de <__aeabi_fmul+0xe6>
 80004ea:	ea41 010c 	orr.w	r1, r1, ip
 80004ee:	e78f      	b.n	8000410 <__aeabi_fmul+0x18>
 80004f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004f4:	ea92 0f0c 	teq	r2, ip
 80004f8:	bf18      	it	ne
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d00a      	beq.n	8000516 <__aeabi_fmul+0x11e>
 8000500:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000504:	bf18      	it	ne
 8000506:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800050a:	d1d8      	bne.n	80004be <__aeabi_fmul+0xc6>
 800050c:	ea80 0001 	eor.w	r0, r0, r1
 8000510:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f090 0f00 	teq	r0, #0
 800051a:	bf17      	itett	ne
 800051c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000520:	4608      	moveq	r0, r1
 8000522:	f091 0f00 	teqne	r1, #0
 8000526:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800052a:	d014      	beq.n	8000556 <__aeabi_fmul+0x15e>
 800052c:	ea92 0f0c 	teq	r2, ip
 8000530:	d101      	bne.n	8000536 <__aeabi_fmul+0x13e>
 8000532:	0242      	lsls	r2, r0, #9
 8000534:	d10f      	bne.n	8000556 <__aeabi_fmul+0x15e>
 8000536:	ea93 0f0c 	teq	r3, ip
 800053a:	d103      	bne.n	8000544 <__aeabi_fmul+0x14c>
 800053c:	024b      	lsls	r3, r1, #9
 800053e:	bf18      	it	ne
 8000540:	4608      	movne	r0, r1
 8000542:	d108      	bne.n	8000556 <__aeabi_fmul+0x15e>
 8000544:	ea80 0001 	eor.w	r0, r0, r1
 8000548:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800054c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000550:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000554:	4770      	bx	lr
 8000556:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800055a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800055e:	4770      	bx	lr

08000560 <__aeabi_fdiv>:
 8000560:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000564:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000568:	bf1e      	ittt	ne
 800056a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800056e:	ea92 0f0c 	teqne	r2, ip
 8000572:	ea93 0f0c 	teqne	r3, ip
 8000576:	d069      	beq.n	800064c <__aeabi_fdiv+0xec>
 8000578:	eba2 0203 	sub.w	r2, r2, r3
 800057c:	ea80 0c01 	eor.w	ip, r0, r1
 8000580:	0249      	lsls	r1, r1, #9
 8000582:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000586:	d037      	beq.n	80005f8 <__aeabi_fdiv+0x98>
 8000588:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800058c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000590:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000594:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000598:	428b      	cmp	r3, r1
 800059a:	bf38      	it	cc
 800059c:	005b      	lslcc	r3, r3, #1
 800059e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005a2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005a6:	428b      	cmp	r3, r1
 80005a8:	bf24      	itt	cs
 80005aa:	1a5b      	subcs	r3, r3, r1
 80005ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80005b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005b4:	bf24      	itt	cs
 80005b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005c2:	bf24      	itt	cs
 80005c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005d0:	bf24      	itt	cs
 80005d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	bf18      	it	ne
 80005de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005e2:	d1e0      	bne.n	80005a6 <__aeabi_fdiv+0x46>
 80005e4:	2afd      	cmp	r2, #253	; 0xfd
 80005e6:	f63f af50 	bhi.w	800048a <__aeabi_fmul+0x92>
 80005ea:	428b      	cmp	r3, r1
 80005ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005f0:	bf08      	it	eq
 80005f2:	f020 0001 	biceq.w	r0, r0, #1
 80005f6:	4770      	bx	lr
 80005f8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000600:	327f      	adds	r2, #127	; 0x7f
 8000602:	bfc2      	ittt	gt
 8000604:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000608:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800060c:	4770      	bxgt	lr
 800060e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	3a01      	subs	r2, #1
 8000618:	e737      	b.n	800048a <__aeabi_fmul+0x92>
 800061a:	f092 0f00 	teq	r2, #0
 800061e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000622:	bf02      	ittt	eq
 8000624:	0040      	lsleq	r0, r0, #1
 8000626:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800062a:	3a01      	subeq	r2, #1
 800062c:	d0f9      	beq.n	8000622 <__aeabi_fdiv+0xc2>
 800062e:	ea40 000c 	orr.w	r0, r0, ip
 8000632:	f093 0f00 	teq	r3, #0
 8000636:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800063a:	bf02      	ittt	eq
 800063c:	0049      	lsleq	r1, r1, #1
 800063e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000642:	3b01      	subeq	r3, #1
 8000644:	d0f9      	beq.n	800063a <__aeabi_fdiv+0xda>
 8000646:	ea41 010c 	orr.w	r1, r1, ip
 800064a:	e795      	b.n	8000578 <__aeabi_fdiv+0x18>
 800064c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000650:	ea92 0f0c 	teq	r2, ip
 8000654:	d108      	bne.n	8000668 <__aeabi_fdiv+0x108>
 8000656:	0242      	lsls	r2, r0, #9
 8000658:	f47f af7d 	bne.w	8000556 <__aeabi_fmul+0x15e>
 800065c:	ea93 0f0c 	teq	r3, ip
 8000660:	f47f af70 	bne.w	8000544 <__aeabi_fmul+0x14c>
 8000664:	4608      	mov	r0, r1
 8000666:	e776      	b.n	8000556 <__aeabi_fmul+0x15e>
 8000668:	ea93 0f0c 	teq	r3, ip
 800066c:	d104      	bne.n	8000678 <__aeabi_fdiv+0x118>
 800066e:	024b      	lsls	r3, r1, #9
 8000670:	f43f af4c 	beq.w	800050c <__aeabi_fmul+0x114>
 8000674:	4608      	mov	r0, r1
 8000676:	e76e      	b.n	8000556 <__aeabi_fmul+0x15e>
 8000678:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800067c:	bf18      	it	ne
 800067e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000682:	d1ca      	bne.n	800061a <__aeabi_fdiv+0xba>
 8000684:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000688:	f47f af5c 	bne.w	8000544 <__aeabi_fmul+0x14c>
 800068c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000690:	f47f af3c 	bne.w	800050c <__aeabi_fmul+0x114>
 8000694:	e75f      	b.n	8000556 <__aeabi_fmul+0x15e>
 8000696:	bf00      	nop

08000698 <__aeabi_f2iz>:
 8000698:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800069c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006a0:	d30f      	bcc.n	80006c2 <__aeabi_f2iz+0x2a>
 80006a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006aa:	d90d      	bls.n	80006c8 <__aeabi_f2iz+0x30>
 80006ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006b4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006b8:	fa23 f002 	lsr.w	r0, r3, r2
 80006bc:	bf18      	it	ne
 80006be:	4240      	negne	r0, r0
 80006c0:	4770      	bx	lr
 80006c2:	f04f 0000 	mov.w	r0, #0
 80006c6:	4770      	bx	lr
 80006c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006cc:	d101      	bne.n	80006d2 <__aeabi_f2iz+0x3a>
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	d105      	bne.n	80006de <__aeabi_f2iz+0x46>
 80006d2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80006d6:	bf08      	it	eq
 80006d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006dc:	4770      	bx	lr
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	4770      	bx	lr

080006e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800071c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006ea:	e003      	b.n	80006f4 <LoopCopyDataInit>

080006ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006f2:	3104      	adds	r1, #4

080006f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006fc:	d3f6      	bcc.n	80006ec <CopyDataInit>
  ldr  r2, =_sbss
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000700:	e002      	b.n	8000708 <LoopFillZerobss>

08000702 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000702:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000704:	f842 3b04 	str.w	r3, [r2], #4

08000708 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800070a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800070c:	d3f9      	bcc.n	8000702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800070e:	f000 f83d 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000712:	f003 f9c5 	bl	8003aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000716:	f003 f993 	bl	8003a40 <main>
  bx  lr    
 800071a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800071c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000720:	0800a544 	.word	0x0800a544
  ldr  r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000728:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 800072c:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 8000730:	20017d3c 	.word	0x20017d3c

08000734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC_IRQHandler>

08000736 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
	...

0800078c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <SystemInit+0x50>)
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <SystemInit+0x50>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <SystemInit+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <SystemInit+0x50>)
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <SystemInit+0x50>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <SystemInit+0x50>)
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SystemInit+0x54>)
 80007b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007b8:	4a08      	ldr	r2, [pc, #32]	; (80007dc <SystemInit+0x50>)
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <SystemInit+0x50>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SystemInit+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80007ca:	f000 f80d 	bl	80007e8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SystemInit+0x58>)
 80007d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007d4:	609a      	str	r2, [r3, #8]
#endif
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	24003010 	.word	0x24003010
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007f6:	4a35      	ldr	r2, [pc, #212]	; (80008cc <SetSysClock+0xe4>)
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <SetSysClock+0xe4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000800:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <SetSysClock+0xe4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3301      	adds	r3, #1
 8000810:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d103      	bne.n	8000820 <SetSysClock+0x38>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800081e:	d1f0      	bne.n	8000802 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <SetSysClock+0xe4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800082c:	2301      	movs	r3, #1
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	e001      	b.n	8000836 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d142      	bne.n	80008c2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800083c:	4a23      	ldr	r2, [pc, #140]	; (80008cc <SetSysClock+0xe4>)
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <SetSysClock+0xe4>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SetSysClock+0xe8>)
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <SetSysClock+0xe8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000852:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000854:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <SetSysClock+0xe4>)
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <SetSysClock+0xe4>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <SetSysClock+0xe4>)
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <SetSysClock+0xe4>)
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000866:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000868:	4a18      	ldr	r2, [pc, #96]	; (80008cc <SetSysClock+0xe4>)
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <SetSysClock+0xe4>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000872:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <SetSysClock+0xe4>)
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <SetSysClock+0xec>)
 8000878:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <SetSysClock+0xe4>)
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <SetSysClock+0xe4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000884:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000886:	bf00      	nop
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <SetSysClock+0xe4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0f9      	beq.n	8000888 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <SetSysClock+0xf0>)
 8000896:	f240 6205 	movw	r2, #1541	; 0x605
 800089a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <SetSysClock+0xe4>)
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <SetSysClock+0xe4>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	f023 0303 	bic.w	r3, r3, #3
 80008a6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <SetSysClock+0xe4>)
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <SetSysClock+0xe4>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80008b4:	bf00      	nop
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <SetSysClock+0xe4>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f003 030c 	and.w	r3, r3, #12
 80008be:	2b08      	cmp	r3, #8
 80008c0:	d1f9      	bne.n	80008b6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000
 80008d4:	07405408 	.word	0x07405408
 80008d8:	40023c00 	.word	0x40023c00

080008dc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	2300      	movs	r3, #0
 80008ea:	73bb      	strb	r3, [r7, #14]
 80008ec:	230f      	movs	r3, #15
 80008ee:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	78db      	ldrb	r3, [r3, #3]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d039      	beq.n	800096c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <NVIC_Init+0xbc>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	43db      	mvns	r3, r3
 80008fe:	0a1b      	lsrs	r3, r3, #8
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	f1c3 0304 	rsb	r3, r3, #4
 800090e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000910:	7b7a      	ldrb	r2, [r7, #13]
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	fa42 f303 	asr.w	r3, r2, r3
 8000918:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	461a      	mov	r2, r3
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	789a      	ldrb	r2, [r3, #2]
 800092c:	7b7b      	ldrb	r3, [r7, #13]
 800092e:	4013      	ands	r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	4313      	orrs	r3, r2
 8000936:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <NVIC_Init+0xc0>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4413      	add	r3, r2
 8000946:	7bfa      	ldrb	r2, [r7, #15]
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <NVIC_Init+0xc0>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f003 031f 	and.w	r3, r3, #31
 8000960:	2101      	movs	r1, #1
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000966:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800096a:	e00f      	b.n	800098c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800096c:	490b      	ldr	r1, [pc, #44]	; (800099c <NVIC_Init+0xc0>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	095b      	lsrs	r3, r3, #5
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 031f 	and.w	r3, r3, #31
 8000980:	2201      	movs	r2, #1
 8000982:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000984:	f100 0320 	add.w	r3, r0, #32
 8000988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00
 800099c:	e000e100 	.word	0xe000e100

080009a0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <DAC_SetChannel1Data+0x30>)
 80009b2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	3308      	adds	r3, #8
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	461a      	mov	r2, r3
 80009c2:	887b      	ldrh	r3, [r7, #2]
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40007400 	.word	0x40007400

080009d4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f023 0201 	bic.w	r2, r3, #1
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2221      	movs	r2, #33	; 0x21
 8000a0a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <DMA_DeInit+0x150>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d103      	bne.n	8000a1c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <DMA_DeInit+0x154>)
 8000a16:	223d      	movs	r2, #61	; 0x3d
 8000a18:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000a1a:	e07e      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a43      	ldr	r2, [pc, #268]	; (8000b2c <DMA_DeInit+0x158>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d104      	bne.n	8000a2e <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000a24:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <DMA_DeInit+0x154>)
 8000a26:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000a2a:	609a      	str	r2, [r3, #8]
}
 8000a2c:	e075      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a3f      	ldr	r2, [pc, #252]	; (8000b30 <DMA_DeInit+0x15c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d104      	bne.n	8000a40 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <DMA_DeInit+0x154>)
 8000a38:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000a3c:	609a      	str	r2, [r3, #8]
}
 8000a3e:	e06c      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a3c      	ldr	r2, [pc, #240]	; (8000b34 <DMA_DeInit+0x160>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d104      	bne.n	8000a52 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <DMA_DeInit+0x154>)
 8000a4a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000a4e:	609a      	str	r2, [r3, #8]
}
 8000a50:	e063      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a38      	ldr	r2, [pc, #224]	; (8000b38 <DMA_DeInit+0x164>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d103      	bne.n	8000a62 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000a5a:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <DMA_DeInit+0x154>)
 8000a5c:	4a37      	ldr	r2, [pc, #220]	; (8000b3c <DMA_DeInit+0x168>)
 8000a5e:	60da      	str	r2, [r3, #12]
}
 8000a60:	e05b      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <DMA_DeInit+0x16c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d103      	bne.n	8000a72 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <DMA_DeInit+0x154>)
 8000a6c:	4a35      	ldr	r2, [pc, #212]	; (8000b44 <DMA_DeInit+0x170>)
 8000a6e:	60da      	str	r2, [r3, #12]
}
 8000a70:	e053      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a34      	ldr	r2, [pc, #208]	; (8000b48 <DMA_DeInit+0x174>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d103      	bne.n	8000a82 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <DMA_DeInit+0x154>)
 8000a7c:	4a33      	ldr	r2, [pc, #204]	; (8000b4c <DMA_DeInit+0x178>)
 8000a7e:	60da      	str	r2, [r3, #12]
}
 8000a80:	e04b      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <DMA_DeInit+0x17c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d104      	bne.n	8000a94 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <DMA_DeInit+0x154>)
 8000a8c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000a90:	60da      	str	r2, [r3, #12]
}
 8000a92:	e042      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <DMA_DeInit+0x180>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d103      	bne.n	8000aa4 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <DMA_DeInit+0x184>)
 8000a9e:	223d      	movs	r2, #61	; 0x3d
 8000aa0:	609a      	str	r2, [r3, #8]
}
 8000aa2:	e03a      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a2d      	ldr	r2, [pc, #180]	; (8000b5c <DMA_DeInit+0x188>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d104      	bne.n	8000ab6 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000aac:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <DMA_DeInit+0x184>)
 8000aae:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000ab2:	609a      	str	r2, [r3, #8]
}
 8000ab4:	e031      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a29      	ldr	r2, [pc, #164]	; (8000b60 <DMA_DeInit+0x18c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d104      	bne.n	8000ac8 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <DMA_DeInit+0x184>)
 8000ac0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000ac4:	609a      	str	r2, [r3, #8]
}
 8000ac6:	e028      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <DMA_DeInit+0x190>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d104      	bne.n	8000ada <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <DMA_DeInit+0x184>)
 8000ad2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000ad6:	609a      	str	r2, [r3, #8]
}
 8000ad8:	e01f      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <DMA_DeInit+0x194>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d103      	bne.n	8000aea <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <DMA_DeInit+0x184>)
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <DMA_DeInit+0x168>)
 8000ae6:	60da      	str	r2, [r3, #12]
}
 8000ae8:	e017      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a1f      	ldr	r2, [pc, #124]	; (8000b6c <DMA_DeInit+0x198>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d103      	bne.n	8000afa <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <DMA_DeInit+0x184>)
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <DMA_DeInit+0x170>)
 8000af6:	60da      	str	r2, [r3, #12]
}
 8000af8:	e00f      	b.n	8000b1a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <DMA_DeInit+0x19c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d103      	bne.n	8000b0a <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <DMA_DeInit+0x184>)
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <DMA_DeInit+0x178>)
 8000b06:	60da      	str	r2, [r3, #12]
}
 8000b08:	e007      	b.n	8000b1a <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <DMA_DeInit+0x1a0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d103      	bne.n	8000b1a <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <DMA_DeInit+0x184>)
 8000b14:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000b18:	60da      	str	r2, [r3, #12]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40026010 	.word	0x40026010
 8000b28:	40026000 	.word	0x40026000
 8000b2c:	40026028 	.word	0x40026028
 8000b30:	40026040 	.word	0x40026040
 8000b34:	40026058 	.word	0x40026058
 8000b38:	40026070 	.word	0x40026070
 8000b3c:	2000003d 	.word	0x2000003d
 8000b40:	40026088 	.word	0x40026088
 8000b44:	20000f40 	.word	0x20000f40
 8000b48:	400260a0 	.word	0x400260a0
 8000b4c:	203d0000 	.word	0x203d0000
 8000b50:	400260b8 	.word	0x400260b8
 8000b54:	40026410 	.word	0x40026410
 8000b58:	40026400 	.word	0x40026400
 8000b5c:	40026428 	.word	0x40026428
 8000b60:	40026440 	.word	0x40026440
 8000b64:	40026458 	.word	0x40026458
 8000b68:	40026470 	.word	0x40026470
 8000b6c:	40026488 	.word	0x40026488
 8000b70:	400264a0 	.word	0x400264a0
 8000b74:	400264b8 	.word	0x400264b8

08000b78 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <DMA_Init+0xa8>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ba2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000bae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000bba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000bc6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bcc:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f023 0307 	bic.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60da      	str	r2, [r3, #12]
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	f01c803f 	.word	0xf01c803f

08000c24 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000c42:	e005      	b.n	8000c50 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f023 0201 	bic.w	r2, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000c72:	2301      	movs	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e001      	b.n	8000c7c <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <DMA_GetFlagStatus+0x68>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d802      	bhi.n	8000ca8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <DMA_GetFlagStatus+0x6c>)
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	e001      	b.n	8000cac <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <DMA_GetFlagStatus+0x70>)
 8000caa:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	e002      	b.n	8000cc4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000cca:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000cce:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	75fb      	strb	r3, [r7, #23]
 8000cde:	e001      	b.n	8000ce4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	4002640f 	.word	0x4002640f
 8000cf4:	40026000 	.word	0x40026000
 8000cf8:	40026400 	.word	0x40026400

08000cfc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <DMA_ClearFlag+0x50>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d802      	bhi.n	8000d14 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <DMA_ClearFlag+0x54>)
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e001      	b.n	8000d18 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <DMA_ClearFlag+0x58>)
 8000d16:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d007      	beq.n	8000d32 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d28:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000d30:	e006      	b.n	8000d40 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000d38:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	6093      	str	r3, [r2, #8]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	4002640f 	.word	0x4002640f
 8000d50:	40026000 	.word	0x40026000
 8000d54:	40026400 	.word	0x40026400

08000d58 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	4613      	mov	r3, r2
 8000d64:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00f      	beq.n	8000d90 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d006      	beq.n	8000d84 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	e005      	b.n	8000d90 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b80      	cmp	r3, #128	; 0x80
 8000d94:	d014      	beq.n	8000dc0 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f003 031e 	and.w	r3, r3, #30
 8000da6:	431a      	orrs	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000dac:	e008      	b.n	8000dc0 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	f003 031e 	and.w	r3, r3, #30
 8000db8:	43db      	mvns	r3, r3
 8000dba:	401a      	ands	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
	...

08000dcc <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <DMA_GetITStatus+0xa0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d802      	bhi.n	8000df0 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <DMA_GetITStatus+0xa4>)
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	e001      	b.n	8000df4 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <DMA_GetITStatus+0xa8>)
 8000df2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000dfa:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00a      	beq.n	8000e18 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	0adb      	lsrs	r3, r3, #11
 8000e06:	f003 031e 	and.w	r3, r3, #30
 8000e0a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	e004      	b.n	8000e22 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e20:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	e002      	b.n	8000e3a <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000e40:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d005      	beq.n	8000e5c <DMA_GetITStatus+0x90>
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
 8000e5a:	e001      	b.n	8000e60 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	371c      	adds	r7, #28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	4002640f 	.word	0x4002640f
 8000e70:	40026000 	.word	0x40026000
 8000e74:	40026400 	.word	0x40026400

08000e78 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <DMA_ClearITPendingBit+0x50>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d802      	bhi.n	8000e90 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <DMA_ClearITPendingBit+0x54>)
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	e001      	b.n	8000e94 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <DMA_ClearITPendingBit+0x58>)
 8000e92:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d007      	beq.n	8000eae <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000ea4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000eac:	e006      	b.n	8000ebc <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000eb4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	6093      	str	r3, [r2, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	4002640f 	.word	0x4002640f
 8000ecc:	40026000 	.word	0x40026000
 8000ed0:	40026400 	.word	0x40026400

08000ed4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e076      	b.n	8000fde <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d165      	bne.n	8000fd8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2103      	movs	r1, #3
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	791b      	ldrb	r3, [r3, #4]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d003      	beq.n	8000f4a <GPIO_Init+0x76>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	791b      	ldrb	r3, [r3, #4]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d12e      	bne.n	8000fa8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2103      	movs	r1, #3
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	795b      	ldrb	r3, [r3, #5]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	431a      	orrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4619      	mov	r1, r3
 8000f82:	2301      	movs	r3, #1
 8000f84:	408b      	lsls	r3, r1
 8000f86:	43db      	mvns	r3, r3
 8000f88:	401a      	ands	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	7992      	ldrb	r2, [r2, #6]
 8000f96:	4611      	mov	r1, r2
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	b292      	uxth	r2, r2
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	401a      	ands	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	79db      	ldrb	r3, [r3, #7]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d985      	bls.n	8000ef0 <GPIO_Init+0x1c>
    }
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	807b      	strh	r3, [r7, #2]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001006:	787a      	ldrb	r2, [r7, #1]
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	b29b      	uxth	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	b29b      	uxth	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	210f      	movs	r1, #15
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	ea02 0103 	and.w	r1, r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f100 0208 	add.w	r2, r0, #8
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	b29b      	uxth	r3, r3
 8001052:	461a      	mov	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
	...

08001080 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	2302      	movs	r3, #2
 800109e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80010a0:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d007      	beq.n	80010c0 <RCC_GetClocksFreq+0x40>
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d009      	beq.n	80010c8 <RCC_GetClocksFreq+0x48>
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d13d      	bne.n	8001134 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a42      	ldr	r2, [pc, #264]	; (80011c4 <RCC_GetClocksFreq+0x144>)
 80010bc:	601a      	str	r2, [r3, #0]
      break;
 80010be:	e03d      	b.n	800113c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a41      	ldr	r2, [pc, #260]	; (80011c8 <RCC_GetClocksFreq+0x148>)
 80010c4:	601a      	str	r2, [r3, #0]
      break;
 80010c6:	e039      	b.n	800113c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80010c8:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	0d9b      	lsrs	r3, r3, #22
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010d4:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010dc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00c      	beq.n	80010fe <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010e4:	4a38      	ldr	r2, [pc, #224]	; (80011c8 <RCC_GetClocksFreq+0x148>)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ec:	4a34      	ldr	r2, [pc, #208]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 80010ee:	6852      	ldr	r2, [r2, #4]
 80010f0:	0992      	lsrs	r2, r2, #6
 80010f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	e00b      	b.n	8001116 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80010fe:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <RCC_GetClocksFreq+0x144>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4a2e      	ldr	r2, [pc, #184]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 8001108:	6852      	ldr	r2, [r2, #4]
 800110a:	0992      	lsrs	r2, r2, #6
 800110c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001110:	fb02 f303 	mul.w	r3, r2, r3
 8001114:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	0c1b      	lsrs	r3, r3, #16
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	3301      	adds	r3, #1
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	fbb2 f2f3 	udiv	r2, r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	601a      	str	r2, [r3, #0]
      break;
 8001132:	e003      	b.n	800113c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <RCC_GetClocksFreq+0x144>)
 8001138:	601a      	str	r2, [r3, #0]
      break;
 800113a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001144:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800114c:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <RCC_GetClocksFreq+0x14c>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	40da      	lsrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800116c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	0a9b      	lsrs	r3, r3, #10
 8001172:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001174:	4a15      	ldr	r2, [pc, #84]	; (80011cc <RCC_GetClocksFreq+0x14c>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	40da      	lsrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <RCC_GetClocksFreq+0x140>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001194:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	0b5b      	lsrs	r3, r3, #13
 800119a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800119c:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <RCC_GetClocksFreq+0x14c>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	40da      	lsrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	60da      	str	r2, [r3, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3724      	adds	r7, #36	; 0x24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	00f42400 	.word	0x00f42400
 80011c8:	007a1200 	.word	0x007a1200
 80011cc:	20000004 	.word	0x20000004

080011d0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80011e2:	4909      	ldr	r1, [pc, #36]	; (8001208 <RCC_AHB1PeriphClockCmd+0x38>)
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <RCC_AHB1PeriphClockCmd+0x38>)
 80011e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80011ee:	e006      	b.n	80011fe <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011f0:	4905      	ldr	r1, [pc, #20]	; (8001208 <RCC_AHB1PeriphClockCmd+0x38>)
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <RCC_AHB1PeriphClockCmd+0x38>)
 80011f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4013      	ands	r3, r2
 80011fc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40023800 	.word	0x40023800

0800120c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800121e:	4909      	ldr	r1, [pc, #36]	; (8001244 <RCC_APB1PeriphClockCmd+0x38>)
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <RCC_APB1PeriphClockCmd+0x38>)
 8001222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800122a:	e006      	b.n	800123a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800122c:	4905      	ldr	r1, [pc, #20]	; (8001244 <RCC_APB1PeriphClockCmd+0x38>)
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <RCC_APB1PeriphClockCmd+0x38>)
 8001230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	43db      	mvns	r3, r3
 8001236:	4013      	ands	r3, r2
 8001238:	640b      	str	r3, [r1, #64]	; 0x40
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	40023800 	.word	0x40023800

08001248 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800125a:	4909      	ldr	r1, [pc, #36]	; (8001280 <RCC_APB2PeriphClockCmd+0x38>)
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <RCC_APB2PeriphClockCmd+0x38>)
 800125e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4313      	orrs	r3, r2
 8001264:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001266:	e006      	b.n	8001276 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001268:	4905      	ldr	r1, [pc, #20]	; (8001280 <RCC_APB2PeriphClockCmd+0x38>)
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <RCC_APB2PeriphClockCmd+0x38>)
 800126c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	43db      	mvns	r3, r3
 8001272:	4013      	ands	r3, r2
 8001274:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40023800 	.word	0x40023800

08001284 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	819a      	strh	r2, [r3, #12]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	891b      	ldrh	r3, [r3, #8]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	4013      	ands	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
	...

080012d8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <TIM_TimeBaseInit+0xb8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d013      	beq.n	800131c <TIM_TimeBaseInit+0x44>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a27      	ldr	r2, [pc, #156]	; (8001394 <TIM_TimeBaseInit+0xbc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d00f      	beq.n	800131c <TIM_TimeBaseInit+0x44>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001302:	d00b      	beq.n	800131c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a24      	ldr	r2, [pc, #144]	; (8001398 <TIM_TimeBaseInit+0xc0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d007      	beq.n	800131c <TIM_TimeBaseInit+0x44>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a23      	ldr	r2, [pc, #140]	; (800139c <TIM_TimeBaseInit+0xc4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d003      	beq.n	800131c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <TIM_TimeBaseInit+0xc8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d108      	bne.n	800132e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800131c:	89fb      	ldrh	r3, [r7, #14]
 800131e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001322:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	885a      	ldrh	r2, [r3, #2]
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	4313      	orrs	r3, r2
 800132c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <TIM_TimeBaseInit+0xcc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00c      	beq.n	8001350 <TIM_TimeBaseInit+0x78>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <TIM_TimeBaseInit+0xd0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d008      	beq.n	8001350 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001344:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	891a      	ldrh	r2, [r3, #8]
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	4313      	orrs	r3, r2
 800134e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	89fa      	ldrh	r2, [r7, #14]
 8001354:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	881a      	ldrh	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <TIM_TimeBaseInit+0xb8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d003      	beq.n	8001376 <TIM_TimeBaseInit+0x9e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <TIM_TimeBaseInit+0xbc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d104      	bne.n	8001380 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	7a9b      	ldrb	r3, [r3, #10]
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	829a      	strh	r2, [r3, #20]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40010000 	.word	0x40010000
 8001394:	40010400 	.word	0x40010400
 8001398:	40000400 	.word	0x40000400
 800139c:	40000800 	.word	0x40000800
 80013a0:	40000c00 	.word	0x40000c00
 80013a4:	40001000 	.word	0x40001000
 80013a8:	40001400 	.word	0x40001400

080013ac <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d008      	beq.n	80013d0 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 80013ce:	e007      	b.n	80013e0 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013da:	b29a      	uxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	801a      	strh	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800140c:	e007      	b.n	800141e <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	801a      	strh	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	817b      	strh	r3, [r7, #10]
 8001436:	2300      	movs	r3, #0
 8001438:	81fb      	strh	r3, [r7, #14]
 800143a:	2300      	movs	r3, #0
 800143c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	8c1b      	ldrh	r3, [r3, #32]
 8001442:	b29b      	uxth	r3, r3
 8001444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	8c1b      	ldrh	r3, [r3, #32]
 8001452:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	889b      	ldrh	r3, [r3, #4]
 8001458:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	8b9b      	ldrh	r3, [r3, #28]
 800145e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001466:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001468:	897b      	ldrh	r3, [r7, #10]
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	881a      	ldrh	r2, [r3, #0]
 8001474:	897b      	ldrh	r3, [r7, #10]
 8001476:	4313      	orrs	r3, r2
 8001478:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001480:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	899b      	ldrh	r3, [r3, #12]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b29a      	uxth	r2, r3
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	4313      	orrs	r3, r2
 800148e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	885b      	ldrh	r3, [r3, #2]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b29a      	uxth	r2, r3
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	4313      	orrs	r3, r2
 800149c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <TIM_OC3Init+0x104>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d003      	beq.n	80014ae <TIM_OC3Init+0x86>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a21      	ldr	r2, [pc, #132]	; (8001530 <TIM_OC3Init+0x108>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12b      	bne.n	8001506 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014b4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	89db      	ldrh	r3, [r3, #14]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b29a      	uxth	r2, r3
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ca:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	889b      	ldrh	r3, [r3, #4]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80014da:	89bb      	ldrh	r3, [r7, #12]
 80014dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014e0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80014e2:	89bb      	ldrh	r3, [r7, #12]
 80014e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014e8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	8a1b      	ldrh	r3, [r3, #16]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	89bb      	ldrh	r3, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	8a5b      	ldrh	r3, [r3, #18]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	b29a      	uxth	r2, r3
 8001500:	89bb      	ldrh	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	89ba      	ldrh	r2, [r7, #12]
 800150a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	897a      	ldrh	r2, [r7, #10]
 8001510:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	89fa      	ldrh	r2, [r7, #14]
 800151e:	841a      	strh	r2, [r3, #32]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40010000 	.word	0x40010000
 8001530:	40010400 	.word	0x40010400

08001534 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	81bb      	strh	r3, [r7, #12]
 8001542:	2300      	movs	r3, #0
 8001544:	817b      	strh	r3, [r7, #10]
 8001546:	2300      	movs	r3, #0
 8001548:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	8c1b      	ldrh	r3, [r3, #32]
 800154e:	b29b      	uxth	r3, r3
 8001550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	8c1b      	ldrh	r3, [r3, #32]
 800155e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	889b      	ldrh	r3, [r3, #4]
 8001564:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	8b9b      	ldrh	r3, [r3, #28]
 800156a:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001572:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001574:	89bb      	ldrh	r3, [r7, #12]
 8001576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800157a:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29a      	uxth	r2, r3
 8001584:	89bb      	ldrh	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800158a:	897b      	ldrh	r3, [r7, #10]
 800158c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001590:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	899b      	ldrh	r3, [r3, #12]
 8001596:	031b      	lsls	r3, r3, #12
 8001598:	b29a      	uxth	r2, r3
 800159a:	897b      	ldrh	r3, [r7, #10]
 800159c:	4313      	orrs	r3, r2
 800159e:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	885b      	ldrh	r3, [r3, #2]
 80015a4:	031b      	lsls	r3, r3, #12
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <TIM_OC4Init+0xc4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d003      	beq.n	80015be <TIM_OC4Init+0x8a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a10      	ldr	r2, [pc, #64]	; (80015fc <TIM_OC4Init+0xc8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d10a      	bne.n	80015d4 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015c4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	8a1b      	ldrh	r3, [r3, #16]
 80015ca:	019b      	lsls	r3, r3, #6
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	89fa      	ldrh	r2, [r7, #14]
 80015d8:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	89ba      	ldrh	r2, [r7, #12]
 80015de:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	897a      	ldrh	r2, [r7, #10]
 80015ec:	841a      	strh	r2, [r3, #32]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40010000 	.word	0x40010000
 80015fc:	40010400 	.word	0x40010400

08001600 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	8b9b      	ldrh	r3, [r3, #28]
 8001614:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	f023 0308 	bic.w	r3, r3, #8
 800161c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800161e:	89fa      	ldrh	r2, [r7, #14]
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	4313      	orrs	r3, r2
 8001624:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	89fa      	ldrh	r2, [r7, #14]
 800162a:	839a      	strh	r2, [r3, #28]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	8b9b      	ldrh	r3, [r3, #28]
 800164a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001652:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b29a      	uxth	r2, r3
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	4313      	orrs	r3, r2
 800165e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	89fa      	ldrh	r2, [r7, #14]
 8001664:	839a      	strh	r2, [r3, #28]
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	899b      	ldrh	r3, [r3, #12]
 800168a:	b29a      	uxth	r2, r3
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	4313      	orrs	r3, r2
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001696:	e009      	b.n	80016ac <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	899b      	ldrh	r3, [r3, #12]
 800169c:	b29a      	uxth	r2, r3
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4013      	ands	r3, r2
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	819a      	strh	r2, [r3, #12]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	81bb      	strh	r3, [r7, #12]
 80016ca:	2300      	movs	r3, #0
 80016cc:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8a1b      	ldrh	r3, [r3, #16]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	4013      	ands	r3, r2
 80016d8:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	899b      	ldrh	r3, [r3, #12]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	4013      	ands	r3, r2
 80016e4:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80016e6:	89bb      	ldrh	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <TIM_GetITStatus+0x42>
 80016ec:	897b      	ldrh	r3, [r7, #10]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e001      	b.n	80016fc <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	43db      	mvns	r3, r3
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	821a      	strh	r2, [r3, #16]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	899b      	ldrh	r3, [r3, #12]
 8001742:	b29a      	uxth	r2, r3
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	4313      	orrs	r3, r2
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 800174e:	e009      	b.n	8001764 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	899b      	ldrh	r3, [r3, #12]
 8001754:	b29a      	uxth	r2, r3
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	43db      	mvns	r3, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	4013      	ands	r3, r2
 800175e:	b29a      	uxth	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	819a      	strh	r2, [r3, #12]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
	...

08001770 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	8a1b      	ldrh	r3, [r3, #16]
 800178e:	b29b      	uxth	r3, r3
 8001790:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001798:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	88db      	ldrh	r3, [r3, #6]
 800179e:	461a      	mov	r2, r3
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	4313      	orrs	r3, r2
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	899b      	ldrh	r3, [r3, #12]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017bc:	f023 030c 	bic.w	r3, r3, #12
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	889a      	ldrh	r2, [r3, #4]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	891b      	ldrh	r3, [r3, #8]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	4313      	orrs	r3, r2
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	8a9b      	ldrh	r3, [r3, #20]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	899b      	ldrh	r3, [r3, #12]
 80017fa:	461a      	mov	r2, r3
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	4313      	orrs	r3, r2
 8001800:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	b29a      	uxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fc36 	bl	8001080 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a30      	ldr	r2, [pc, #192]	; (80018d8 <USART_Init+0x168>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d003      	beq.n	8001824 <USART_Init+0xb4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a2f      	ldr	r2, [pc, #188]	; (80018dc <USART_Init+0x16c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d102      	bne.n	800182a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	623b      	str	r3, [r7, #32]
 8001828:	e001      	b.n	800182e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	899b      	ldrh	r3, [r3, #12]
 8001832:	b29b      	uxth	r3, r3
 8001834:	b21b      	sxth	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	da0c      	bge.n	8001854 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	009a      	lsls	r2, r3, #2
 8001844:	441a      	add	r2, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	e00b      	b.n	800186c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001854:	6a3a      	ldr	r2, [r7, #32]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	009a      	lsls	r2, r3, #2
 800185e:	441a      	add	r2, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <USART_Init+0x170>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	2264      	movs	r2, #100	; 0x64
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	899b      	ldrh	r3, [r3, #12]
 800188e:	b29b      	uxth	r3, r3
 8001890:	b21b      	sxth	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	da0c      	bge.n	80018b0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	3332      	adds	r3, #50	; 0x32
 800189c:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <USART_Init+0x170>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018aa:	4313      	orrs	r3, r2
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	e00b      	b.n	80018c8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	3332      	adds	r3, #50	; 0x32
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <USART_Init+0x170>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	095b      	lsrs	r3, r3, #5
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	4313      	orrs	r3, r2
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	811a      	strh	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40011400 	.word	0x40011400
 80018e0:	51eb851f 	.word	0x51eb851f

080018e4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	899b      	ldrh	r3, [r3, #12]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001906:	e007      	b.n	8001918 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	899b      	ldrh	r3, [r3, #12]
 800190c:	b29b      	uxth	r3, r3
 800190e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	819a      	strh	r2, [r3, #12]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	809a      	strh	r2, [r3, #4]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	889b      	ldrh	r3, [r3, #4]
 8001950:	b29b      	uxth	r3, r3
 8001952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001956:	b29b      	uxth	r3, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001962:	b480      	push	{r7}
 8001964:	b087      	sub	sp, #28
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001986:	887b      	ldrh	r3, [r7, #2]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	b2db      	uxtb	r3, r3
 800198e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001998:	2201      	movs	r2, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d103      	bne.n	80019b0 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	330c      	adds	r3, #12
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e009      	b.n	80019c4 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d103      	bne.n	80019be <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3310      	adds	r3, #16
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e002      	b.n	80019c4 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3314      	adds	r3, #20
 80019c2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	6811      	ldr	r1, [r2, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80019d6:	e006      	b.n	80019e6 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	6811      	ldr	r1, [r2, #0]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	43d2      	mvns	r2, r2
 80019e2:	400a      	ands	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e001      	b.n	8001a1a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b087      	sub	sp, #28
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001a54:	2201      	movs	r2, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	899b      	ldrh	r3, [r3, #12]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e011      	b.n	8001a98 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d107      	bne.n	8001a8a <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	8a1b      	ldrh	r3, [r3, #16]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e006      	b.n	8001a98 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8a9b      	ldrh	r3, [r3, #20]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <USART_GetITStatus+0xa4>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	74fb      	strb	r3, [r7, #19]
 8001ac8:	e001      	b.n	8001ace <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	81fb      	strh	r3, [r7, #14]
 8001aea:	2300      	movs	r3, #0
 8001aec:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001af4:	89fb      	ldrh	r3, [r7, #14]
 8001af6:	2201      	movs	r2, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001afe:	89bb      	ldrh	r3, [r7, #12]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	801a      	strh	r2, [r3, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
	...

08001b14 <init_UART2>:

//--------------------------------------------------------------
// initialize UART2
//--------------------------------------------------------------
void init_UART2()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	/*local variables*/
	uart.iIndex = RESET;					//Input index. Keeps track of which is the next buffer input.
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <init_UART2+0x38>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
	uart.bReady = RESET;					//Bool, to signal inputBuffer is ready for transfer.
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <init_UART2+0x38>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
	uart.iLine = RESET;						//Reset the IDLE line FLAG.
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <init_UART2+0x38>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
	uart.uBusy = RESET;						//Reset the USART busy FLAG.
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <init_UART2+0x38>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
	uart.rCancel = RESET;					//Reset the read cancel FLAG.
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <init_UART2+0x38>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]

	init_RCC();		//Initiate system clocks
 8001b36:	f000 f885 	bl	8001c44 <_ZN4UART8init_RCCEv>
	init_GPIO();	//Initiate GPIO
 8001b3a:	f000 f891 	bl	8001c60 <_ZN4UART9init_GPIOEv>
	init_USART();	//Initiate USART
 8001b3e:	f000 f8b1 	bl	8001ca4 <_ZN4UART10init_USARTEv>
	init_NVIC();	//Initiate USART interrupts
 8001b42:	f000 f8cb 	bl	8001cdc <_ZN4UART9init_NVICEv>

	return;
 8001b46:	bf00      	nop
}
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000250 	.word	0x20000250

08001b50 <write>:

//--------------------------------------------------------------
// UART::write()
//--------------------------------------------------------------
void write(char *text_out)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	for (int i=0; text_out[i]; i++)	//Loop through the output text.
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00a      	beq.n	8001b7e <write+0x2e>
	{
		UART::put_Char(text_out[i]);	//Print single char
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 f8d3 	bl	8001d1c <_ZN4UART8put_CharEc>
	for (int i=0; text_out[i]; i++)	//Loop through the output text.
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e7ee      	b.n	8001b5c <write+0xc>
	}
	return;
 8001b7e:	bf00      	nop
}	//write()
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <read>:

//--------------------------------------------------------------
// UART::read()
//--------------------------------------------------------------
int read(char *buf)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

	//Wait until stop_read() is called or the input buffer is ready.
	while(!uart.bReady && !uart.rCancel)
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <read+0xa0>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <read+0x1c>
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <read+0xa0>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <read+0x1c>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <read+0x1e>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d000      	beq.n	8001bac <read+0x24>
 8001baa:	e7f1      	b.n	8001b90 <read+0x8>
	{

	}

	//Check if input buffer is ready.
	if(uart.bReady){
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <read+0xa0>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <read+0x78>
		//Loop through the input sentence
		for (int i = 0; i<= uart.iIndex; i++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <read+0xa0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	bfac      	ite	ge
 8001bcc:	2301      	movge	r3, #1
 8001bce:	2300      	movlt	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00c      	beq.n	8001bf0 <read+0x68>
		{
			buf[i] = uart.inputBuffer[i];		//Set the buffer values.
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4912      	ldr	r1, [pc, #72]	; (8001c28 <read+0xa0>)
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	440a      	add	r2, r1
 8001be2:	3214      	adds	r2, #20
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<= uart.iIndex; i++)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e7e8      	b.n	8001bc2 <read+0x3a>
		}

		uart.iIndex = RESET;		//Reset the input index to restart at the beginning of the input buffer.
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <read+0xa0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
		uart.bReady = RESET;		//Reset the buffer ready FLAG.
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <read+0xa0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]

		return SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e00e      	b.n	8001c1e <read+0x96>
	}else if(uart.rCancel)	//Check if the read cancel FLAG is set.
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <read+0xa0>)
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <read+0x94>
	{
		uart.rCancel = RESET;	//Reset the read cancel FLAG.
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <read+0xa0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
		return RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <read+0x96>
	}
	return RESET;
 8001c1c:	2300      	movs	r3, #0
}		//read()
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000250 	.word	0x20000250

08001c2c <stop_Read>:

//--------------------------------------------------------------
// Stop the red function
//--------------------------------------------------------------
void stop_Read()
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
	uart.rCancel = SET;		//Set the read cancel FLAG
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <stop_Read+0x14>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	611a      	str	r2, [r3, #16]
	return;
 8001c36:	bf00      	nop
}	//stop_Read()
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000250 	.word	0x20000250

08001c44 <_ZN4UART8init_RCCEv>:

//--------------------------------------------------------------
// Turn on the needed system clocks
//--------------------------------------------------------------
void init_RCC(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	  /* --------------------------- System Clocks Configuration -----------------*/
	  /* USART2 clock enable */
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001c48:	2101      	movs	r1, #1
 8001c4a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c4e:	f7ff fadd 	bl	800120c <RCC_APB1PeriphClockCmd>

	  /* GPIOA clock enable */
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001c52:	2101      	movs	r1, #1
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff fabb 	bl	80011d0 <RCC_AHB1PeriphClockCmd>

	  return;
 8001c5a:	bf00      	nop
}	//init_RCC()
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <_ZN4UART9init_GPIOEv>:

//--------------------------------------------------------------
// Initiate the GPIO
//--------------------------------------------------------------
void init_GPIO(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStructure;

	  /*-------------------------- GPIO Configuration ----------------------------*/
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001c66:	230c      	movs	r3, #12
 8001c68:	603b      	str	r3, [r7, #0]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	713b      	strb	r3, [r7, #4]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	71bb      	strb	r3, [r7, #6]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	71fb      	strb	r3, [r7, #7]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c76:	2302      	movs	r3, #2
 8001c78:	717b      	strb	r3, [r7, #5]
	  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <_ZN4UART9init_GPIOEv+0x40>)
 8001c80:	f7ff f928 	bl	8000ed4 <GPIO_Init>

	  /* Connect USART pins to AF */
	  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 8001c84:	2207      	movs	r2, #7
 8001c86:	2102      	movs	r1, #2
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <_ZN4UART9init_GPIOEv+0x40>)
 8001c8a:	f7ff f9b0 	bl	8000fee <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 8001c8e:	2207      	movs	r2, #7
 8001c90:	2103      	movs	r1, #3
 8001c92:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <_ZN4UART9init_GPIOEv+0x40>)
 8001c94:	f7ff f9ab 	bl	8000fee <GPIO_PinAFConfig>
}	//INIT_GPIO
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <_ZN4UART10init_USARTEv>:

//--------------------------------------------------------------
// Initiate the USART
//--------------------------------------------------------------
void init_USART(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
	      - One Stop Bit
	      - No parity
	      - Hardware flow control disabled (RTS and CTS signals)
	      - Receive and transmit enabled
	*/
	USART_InitStructure.USART_BaudRate = USART2_BAUT;
 8001caa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cae:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	81bb      	strh	r3, [r7, #12]

	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	817b      	strh	r3, [r7, #10]

	USART_Init(USART2, &USART_InitStructure);
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <_ZN4UART10init_USARTEv+0x34>)
 8001cca:	f7ff fd51 	bl	8001770 <USART_Init>
}	//init_USART()
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40004400 	.word	0x40004400

08001cdc <_ZN4UART9init_NVICEv>:

//--------------------------------------------------------------
// Initiate NVIC for USART IT RXNE interrupt
//--------------------------------------------------------------
void init_NVIC(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQn;
 8001ce2:	2326      	movs	r3, #38	; 0x26
 8001ce4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStruct);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fdf1 	bl	80008dc <NVIC_Init>

	USART_Cmd(USART2, ENABLE);			//Enable USART2
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4806      	ldr	r0, [pc, #24]	; (8001d18 <_ZN4UART9init_NVICEv+0x3c>)
 8001cfe:	f7ff fdf1 	bl	80018e4 <USART_Cmd>
	USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);	//Enable UART2 IT RXNE interrupt
 8001d02:	2201      	movs	r2, #1
 8001d04:	f240 5125 	movw	r1, #1317	; 0x525
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <_ZN4UART9init_NVICEv+0x3c>)
 8001d0a:	f7ff fe2a 	bl	8001962 <USART_ITConfig>
}	//init_NVIC
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40004400 	.word	0x40004400

08001d1c <_ZN4UART8put_CharEc>:

//--------------------------------------------------------------
// Transmit 1 single char.
//--------------------------------------------------------------
void put_Char(char c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
	while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <_ZN4UART8put_CharEc+0x38>)
 8001d2a:	f7ff fe61 	bl	80019f0 <USART_GetFlagStatus>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d000      	beq.n	8001d40 <_ZN4UART8put_CharEc+0x24>
 8001d3e:	e7f2      	b.n	8001d26 <_ZN4UART8put_CharEc+0xa>
	USART_SendData(USART2, c);		//Send the char
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <_ZN4UART8put_CharEc+0x38>)
 8001d48:	f7ff fdeb 	bl	8001922 <USART_SendData>

	return;
 8001d4c:	bf00      	nop
} // put_Char()
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40004400 	.word	0x40004400

08001d58 <TIM3_IRQHandler>:

//--------------------------------------------------------------
// TIM3-interrupt (idle line detection)
//--------------------------------------------------------------
void TIM3_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	// Checks whether the TIM2 interrupt has occurred or not
	if (TIM_GetITStatus(TIM3, TIM_IT_Update)!=RESET)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	481d      	ldr	r0, [pc, #116]	; (8001dd4 <TIM3_IRQHandler+0x7c>)
 8001d60:	f7ff fca9 	bl	80016b6 <TIM_GetITStatus>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d02e      	beq.n	8001dd2 <TIM3_IRQHandler+0x7a>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);					//Clear interrupt flag
 8001d74:	2101      	movs	r1, #1
 8001d76:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <TIM3_IRQHandler+0x7c>)
 8001d78:	f7ff fcc6 	bl	8001708 <TIM_ClearITPendingBit>

		if(uart.uBusy == SET)		//Check if UART is busy FLAG is set.
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <TIM3_IRQHandler+0x80>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d020      	beq.n	8001dd0 <TIM3_IRQHandler+0x78>
				{
					uart.inputBuffer[uart.iIndex - i] = '\0';
				}
			}*/

			uart.inputBuffer[uart.iIndex] = '\0';		//Close the sentence
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <TIM3_IRQHandler+0x80>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <TIM3_IRQHandler+0x80>)
 8001d94:	4413      	add	r3, r2
 8001d96:	2200      	movs	r2, #0
 8001d98:	751a      	strb	r2, [r3, #20]

			uart.bReady = SET;				//Set the buffer ready FLAG
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <TIM3_IRQHandler+0x80>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	605a      	str	r2, [r3, #4]
			uart.uBusy = RESET;				//RESET the USART busy FLAG
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <TIM3_IRQHandler+0x80>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]

			TIM3->CR1&=~TIM_CR1_CEN; // stop TIM3 UART is idle
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <TIM3_IRQHandler+0x7c>)
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <TIM3_IRQHandler+0x7c>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	8013      	strh	r3, [r2, #0]
			TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE);	//Disalbe TIM3 interrupts
 8001db6:	2200      	movs	r2, #0
 8001db8:	2101      	movs	r1, #1
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <TIM3_IRQHandler+0x7c>)
 8001dbc:	f7ff fc58 	bl	8001670 <TIM_ITConfig>
			TIM3->CNT = RESET;			//Reset TIM3 count
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <TIM3_IRQHandler+0x7c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
			TIM3->SR = ~(TIM_FLAG_Update);		//Update the TIM3 FLAG.
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <TIM3_IRQHandler+0x7c>)
 8001dc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001dcc:	821a      	strh	r2, [r3, #16]

		}
	return;
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
	}
}	//TIM3_IRQh
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	20000250 	.word	0x20000250

08001ddc <USART2_IRQHandler>:

//--------------------------------------------------------------
// USART2_IRQh
//--------------------------------------------------------------
void USART2_IRQHandler(void)
{
 8001ddc:	b598      	push	{r3, r4, r7, lr}
 8001dde:	af00      	add	r7, sp, #0

	//Check if the USART has a new input and check if the buffer isn't being read.
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET && uart.bReady != SET)
 8001de0:	f240 5125 	movw	r1, #1317	; 0x525
 8001de4:	4841      	ldr	r0, [pc, #260]	; (8001eec <USART2_IRQHandler+0x110>)
 8001de6:	f7ff fe1e 	bl	8001a26 <USART_GetITStatus>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <USART2_IRQHandler+0x20>
 8001df0:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d001      	beq.n	8001dfc <USART2_IRQHandler+0x20>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <USART2_IRQHandler+0x22>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d071      	beq.n	8001ee6 <USART2_IRQHandler+0x10a>
    {
    	//Receive char
    	uart.inputBuffer[uart.iIndex] = (char)USART_ReceiveData(USART2);
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e04:	681c      	ldr	r4, [r3, #0]
 8001e06:	4839      	ldr	r0, [pc, #228]	; (8001eec <USART2_IRQHandler+0x110>)
 8001e08:	f7ff fd9c 	bl	8001944 <USART_ReceiveData>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e12:	4423      	add	r3, r4
 8001e14:	751a      	strb	r2, [r3, #20]
    	uart.iIndex++;								//Add 1 to the buffer index.
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a34      	ldr	r2, [pc, #208]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e1e:	6013      	str	r3, [r2, #0]

    		USART_ClearITPendingBit(USART2, USART_IT_RXNE);	//Clear the USART FLAG
 8001e20:	f240 5125 	movw	r1, #1317	; 0x525
 8001e24:	4831      	ldr	r0, [pc, #196]	; (8001eec <USART2_IRQHandler+0x110>)
 8001e26:	f7ff fe58 	bl	8001ada <USART_ClearITPendingBit>

    		//Check if idle line is active.
    		if(uart.iLine == SET)
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d028      	beq.n	8001e8e <USART2_IRQHandler+0xb2>
    		{
    			// Check if its the first input.
				if (uart.uBusy == RESET){
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d017      	beq.n	8001e7e <USART2_IRQHandler+0xa2>
					uart.uBusy = SET;		//Set the usart busy FLAG
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	60da      	str	r2, [r3, #12]
					TIM3->CNT = RESET;		//Reset the timer.
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <USART2_IRQHandler+0x118>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
					TIM3->SR = ~(TIM_FLAG_Update);	//Update the TIM3 FLAG
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <USART2_IRQHandler+0x118>)
 8001e5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e60:	821a      	strh	r2, [r3, #16]
					TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);	//Enable interrupts
 8001e62:	2201      	movs	r2, #1
 8001e64:	2101      	movs	r1, #1
 8001e66:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <USART2_IRQHandler+0x118>)
 8001e68:	f7ff fc02 	bl	8001670 <TIM_ITConfig>
					TIM3->CR1 |= TIM_CR1_CEN; // Start the timer
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <USART2_IRQHandler+0x118>)
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <USART2_IRQHandler+0x118>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	8013      	strh	r3, [r2, #0]
					uart.inputBuffer[uart.iIndex] = '\0';
					uart.bReady = SET;							//CR => input complete, buffer is ready.
				}
    		}
    }
    return; //Return void from interrupt.
 8001e7c:	e033      	b.n	8001ee6 <USART2_IRQHandler+0x10a>
					TIM3->CNT = RESET;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <USART2_IRQHandler+0x118>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
					TIM3->SR = ~(TIM_FLAG_Update);	//Update the flag.
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <USART2_IRQHandler+0x118>)
 8001e86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e8a:	821a      	strh	r2, [r3, #16]
    return; //Return void from interrupt.
 8001e8c:	e02b      	b.n	8001ee6 <USART2_IRQHandler+0x10a>
				if(uart.inputBuffer[uart.iIndex - 1] == '\n')	//Check for end of line char.
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001e96:	4413      	add	r3, r2
 8001e98:	7d1b      	ldrb	r3, [r3, #20]
 8001e9a:	2b0a      	cmp	r3, #10
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <USART2_IRQHandler+0xdc>
					uart.inputBuffer[uart.iIndex - 1] = '\0';
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	751a      	strb	r2, [r3, #20]
    return; //Return void from interrupt.
 8001eb6:	e016      	b.n	8001ee6 <USART2_IRQHandler+0x10a>
				}else if(uart.inputBuffer[uart.iIndex -1] == CR)	//Check for char return
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	7d1b      	ldrb	r3, [r3, #20]
 8001ec4:	2b0d      	cmp	r3, #13
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <USART2_IRQHandler+0x10a>
					uart.inputBuffer[uart.iIndex] = '\0';
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	2200      	movs	r2, #0
 8001edc:	751a      	strb	r2, [r3, #20]
					uart.bReady = SET;							//CR => input complete, buffer is ready.
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <USART2_IRQHandler+0x114>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	605a      	str	r2, [r3, #4]
    return; //Return void from interrupt.
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
}	//USART2_IRQh
 8001ee8:	bd98      	pop	{r3, r4, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40004400 	.word	0x40004400
 8001ef0:	20000250 	.word	0x20000250
 8001ef4:	40000400 	.word	0x40000400

08001ef8 <_ZN9VgascreenC1Ev>:
#include <stdlib.h>
#include <Vgascreen.h>
#include <algorithm>
#include <string.h>

Vgascreen::Vgascreen()
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <_ZN9VgascreenC1Ev+0x20>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	init_VGA();
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f827 	bl	8001f5a <_ZN9Vgascreen8init_VGAEv>
}
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	0800a3e4 	.word	0x0800a3e4

08001f1c <_ZN9VgascreenD1Ev>:

Vgascreen::~Vgascreen()
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <_ZN9VgascreenD1Ev+0x1c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	0800a3e4 	.word	0x0800a3e4

08001f3c <_ZN9VgascreenD0Ev>:
Vgascreen::~Vgascreen()
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
}
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ffe9 	bl	8001f1c <_ZN9VgascreenD1Ev>
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f001 fd93 	bl	8003a76 <_ZdlPv>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_ZN9Vgascreen8init_VGAEv>:

int Vgascreen::init_VGA()
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	UB_VGA_Screen_Init(); // Init VGA-Screen
 8001f62:	f000 fdeb 	bl	8002b3c <UB_VGA_Screen_Init>
	UB_VGA_FillScreen(VGA_COL_GREEN); // Set screen green.
 8001f66:	201c      	movs	r0, #28
 8001f68:	f000 fe28 	bl	8002bbc <UB_VGA_FillScreen>
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZN9Vgascreen9draw_lineEiiiiii>:
	y_pos = y; // Set y position.
	return 0;
}

int Vgascreen::draw_line(int x1, int y1, int x2, int y2, int width, int color)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b08c      	sub	sp, #48	; 0x30
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]

	const int dx = abs(x1 - x2);
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bfb8      	it	lt
 8001f8e:	425b      	neglt	r3, r3
 8001f90:	61fb      	str	r3, [r7, #28]
	const int dy = abs(y1 - y2);
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bfb8      	it	lt
 8001f9c:	425b      	neglt	r3, r3
 8001f9e:	61bb      	str	r3, [r7, #24]
	bool a = true;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (dx == 0 && dy == 0){
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <_ZN9Vgascreen9draw_lineEiiiiii+0x4e>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <_ZN9Vgascreen9draw_lineEiiiiii+0x4e>
		UB_VGA_SetPixel(x1, y1, color);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	b291      	uxth	r1, r2
 8001fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fe1e 	bl	8002c00 <UB_VGA_SetPixel>
	}

	if (dy > dx)
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dd0c      	ble.n	8001fe6 <_ZN9Vgascreen9draw_lineEiiiiii+0x70>
	{
		std::swap(x1, y1);
 8001fcc:	1d3a      	adds	r2, r7, #4
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fd80 	bl	8002ada <_ZSt4swapIiEvRT_S1_>
		std::swap(x2, y2);
 8001fda:	463b      	mov	r3, r7
 8001fdc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fd7a 	bl	8002ada <_ZSt4swapIiEvRT_S1_>
	}

	if (x1 > x2)
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dd0c      	ble.n	8002008 <_ZN9Vgascreen9draw_lineEiiiiii+0x92>
	{
		std::swap(x1, x2);
 8001fee:	463a      	mov	r2, r7
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fd6f 	bl	8002ada <_ZSt4swapIiEvRT_S1_>
		std::swap(y1, y2);
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fd69 	bl	8002ada <_ZSt4swapIiEvRT_S1_>
	}

	if (y1 > y2)
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200c:	429a      	cmp	r2, r3
 800200e:	dd02      	ble.n	8002016 <_ZN9Vgascreen9draw_lineEiiiiii+0xa0>
	{
		a = false;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	int y;
	int c;
	for (int j = 0; j < width; j++)
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201e:	429a      	cmp	r2, r3
 8002020:	da67      	bge.n	80020f2 <_ZN9Vgascreen9draw_lineEiiiiii+0x17c>
	{
		for (int i = x1; i < x2; i++)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	429a      	cmp	r2, r3
 800202c:	da57      	bge.n	80020de <_ZN9Vgascreen9draw_lineEiiiiii+0x168>
		{
			c = i - x1;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
			if (a)
 8002036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800203a:	2b00      	cmp	r3, #0
 800203c:	d019      	beq.n	8002072 <_ZN9Vgascreen9draw_lineEiiiiii+0xfc>
			{
				if (dx > dy)
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	429a      	cmp	r2, r3
 8002044:	dd0a      	ble.n	800205c <_ZN9Vgascreen9draw_lineEiiiiii+0xe6>
				{
					y = y1 + dy * (c) / dx;
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	fb02 f203 	mul.w	r2, r2, r3
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fb92 f2f3 	sdiv	r2, r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
 800205a:	e023      	b.n	80020a4 <_ZN9Vgascreen9draw_lineEiiiiii+0x12e>
				}
				else
				{
					y = y1 + dx * (c) / dy;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	fb02 f203 	mul.w	r2, r2, r3
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fb92 f2f3 	sdiv	r2, r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002070:	e018      	b.n	80020a4 <_ZN9Vgascreen9draw_lineEiiiiii+0x12e>
				}
			}
			else
			{
				if (dx > dy)
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	429a      	cmp	r2, r3
 8002078:	dd0a      	ble.n	8002090 <_ZN9Vgascreen9draw_lineEiiiiii+0x11a>
				{
					y = y1 - dy * (c) / dx;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6979      	ldr	r1, [r7, #20]
 8002080:	fb01 f103 	mul.w	r1, r1, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	fb91 f3f3 	sdiv	r3, r1, r3
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
 800208e:	e009      	b.n	80020a4 <_ZN9Vgascreen9draw_lineEiiiiii+0x12e>
				}
				else
				{
					y = y1 - dx * (c) / dy;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	6979      	ldr	r1, [r7, #20]
 8002096:	fb01 f103 	mul.w	r1, r1, r3
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	fb91 f3f3 	sdiv	r3, r1, r3
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			int xset = i;
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	613b      	str	r3, [r7, #16]
			if (dx > dy)
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dd09      	ble.n	80020c4 <_ZN9Vgascreen9draw_lineEiiiiii+0x14e>
			{
				UB_VGA_SetPixel((xset), (y), color);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020b6:	b291      	uxth	r1, r2
 80020b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fd9f 	bl	8002c00 <UB_VGA_SetPixel>
 80020c2:	e008      	b.n	80020d6 <_ZN9Vgascreen9draw_lineEiiiiii+0x160>
			}
			else
			{
				UB_VGA_SetPixel((y), (xset), color);
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	b291      	uxth	r1, r2
 80020cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fd95 	bl	8002c00 <UB_VGA_SetPixel>
		for (int i = x1; i < x2; i++)
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	3301      	adds	r3, #1
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	e7a3      	b.n	8002026 <_ZN9Vgascreen9draw_lineEiiiiii+0xb0>
			}
		}
		y1 += 1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3301      	adds	r3, #1
 80020e2:	607b      	str	r3, [r7, #4]
		y2 += 1;
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	3301      	adds	r3, #1
 80020e8:	63bb      	str	r3, [r7, #56]	; 0x38
	for (int j = 0; j < width; j++)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
 80020f0:	e793      	b.n	800201a <_ZN9Vgascreen9draw_lineEiiiiii+0xa4>
	}
	return 0;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3730      	adds	r7, #48	; 0x30
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN9Vgascreen12draw_ellipseEiiiiii>:

int Vgascreen::draw_ellipse(int x_mp, int y_mp, int x_rad, int y_rad, int color, int fill)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b092      	sub	sp, #72	; 0x48
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]

	int hh = y_rad * y_rad;
 800210a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800210c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	61fb      	str	r3, [r7, #28]
	int ww = x_rad * x_rad;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	61bb      	str	r3, [r7, #24]
	int hhww = hh * ww;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
	int x0 = x_rad;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	647b      	str	r3, [r7, #68]	; 0x44
	int dx = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	643b      	str	r3, [r7, #64]	; 0x40

	// do the horizontal diameter
	for (int x = -x_rad; x <= x_rad; x++)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	425b      	negs	r3, r3
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	dc2a      	bgt.n	8002194 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x98>
	{
		if (fill != true)
 800213e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002140:	2b01      	cmp	r3, #1
 8002142:	d016      	beq.n	8002172 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x76>
		{
			if (x == -x_rad || x == x_rad)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	425a      	negs	r2, r3
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	429a      	cmp	r2, r3
 800214c:	d003      	beq.n	8002156 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x5a>
 800214e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d11a      	bne.n	800218c <_ZN9Vgascreen12draw_ellipseEiiiiii+0x90>
				UB_VGA_SetPixel(x_mp + x, y_mp, color);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	b29a      	uxth	r2, r3
 800215a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215c:	b29b      	uxth	r3, r3
 800215e:	4413      	add	r3, r2
 8002160:	b29b      	uxth	r3, r3
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	b291      	uxth	r1, r2
 8002166:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fd48 	bl	8002c00 <UB_VGA_SetPixel>
 8002170:	e00c      	b.n	800218c <_ZN9Vgascreen12draw_ellipseEiiiiii+0x90>
		}
		else
			UB_VGA_SetPixel(x_mp + x, y_mp, color);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	b29a      	uxth	r2, r3
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	b29b      	uxth	r3, r3
 800217a:	4413      	add	r3, r2
 800217c:	b29b      	uxth	r3, r3
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	b291      	uxth	r1, r2
 8002182:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fd3a 	bl	8002c00 <UB_VGA_SetPixel>
	for (int x = -x_rad; x <= x_rad; x++)
 800218c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800218e:	3301      	adds	r3, #1
 8002190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002192:	e7d0      	b.n	8002136 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x3a>
	}

	// now do both halves at the same time, away from the diameter
	for (int y = 1; y <= y_rad; y++)
 8002194:	2301      	movs	r3, #1
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
 8002198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800219a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800219c:	429a      	cmp	r2, r3
 800219e:	f300 8085 	bgt.w	80022ac <_ZN9Vgascreen12draw_ellipseEiiiiii+0x1b0>
	{
		int x1 = x0 - (dx - 1);  // try slopes of dx - 1 or more
 80021a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a4:	3b01      	subs	r3, #1
 80021a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
		for (; x1 > 0; x1--)
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	dd16      	ble.n	80021e0 <_ZN9Vgascreen12draw_ellipseEiiiiii+0xe4>
			if (x1 * x1 * hh + y * y * ww <= hhww)
 80021b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	fb02 f203 	mul.w	r2, r2, r3
 80021c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	441a      	add	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dd03      	ble.n	80021de <_ZN9Vgascreen12draw_ellipseEiiiiii+0xe2>
		for (; x1 > 0; x1--)
 80021d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d8:	3b01      	subs	r3, #1
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
 80021dc:	e7e6      	b.n	80021ac <_ZN9Vgascreen12draw_ellipseEiiiiii+0xb0>
				break;
 80021de:	bf00      	nop
		dx = x0 - x1;  // current approximation of the slope
 80021e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
		x0 = x1;
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44

		for (int x = -x0; x <= x0; x++)
 80021ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ee:	425b      	negs	r3, r3
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
 80021f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dc54      	bgt.n	80022a4 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x1a8>
		{
			if (fill != true)
 80021fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d02b      	beq.n	8002258 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x15c>
			{
				if (x == -x0 || x == x0)
 8002200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002202:	425a      	negs	r2, r3
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	429a      	cmp	r2, r3
 8002208:	d003      	beq.n	8002212 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x116>
 800220a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220e:	429a      	cmp	r2, r3
 8002210:	d144      	bne.n	800229c <_ZN9Vgascreen12draw_ellipseEiiiiii+0x1a0>
				{
					UB_VGA_SetPixel(x_mp + x, y_mp - y, color);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	b29a      	uxth	r2, r3
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	b29b      	uxth	r3, r3
 800221a:	4413      	add	r3, r2
 800221c:	b298      	uxth	r0, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	b29a      	uxth	r2, r3
 8002222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002224:	b29b      	uxth	r3, r3
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	b29b      	uxth	r3, r3
 800222a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f000 fce6 	bl	8002c00 <UB_VGA_SetPixel>
					UB_VGA_SetPixel(x_mp + x, y_mp + y, color);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	b29a      	uxth	r2, r3
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	b29b      	uxth	r3, r3
 800223c:	4413      	add	r3, r2
 800223e:	b298      	uxth	r0, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	b29a      	uxth	r2, r3
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	b29b      	uxth	r3, r3
 8002248:	4413      	add	r3, r2
 800224a:	b29b      	uxth	r3, r3
 800224c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	4619      	mov	r1, r3
 8002252:	f000 fcd5 	bl	8002c00 <UB_VGA_SetPixel>
 8002256:	e021      	b.n	800229c <_ZN9Vgascreen12draw_ellipseEiiiiii+0x1a0>
				}
			}
			else
			{
				UB_VGA_SetPixel(x_mp + x, y_mp - y, color);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	b29a      	uxth	r2, r3
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	b29b      	uxth	r3, r3
 8002260:	4413      	add	r3, r2
 8002262:	b298      	uxth	r0, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	b29a      	uxth	r2, r3
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	b29b      	uxth	r3, r3
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b29b      	uxth	r3, r3
 8002270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f000 fcc3 	bl	8002c00 <UB_VGA_SetPixel>
				UB_VGA_SetPixel(x_mp + x, y_mp + y, color);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	b29a      	uxth	r2, r3
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	b29b      	uxth	r3, r3
 8002282:	4413      	add	r3, r2
 8002284:	b298      	uxth	r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	b29a      	uxth	r2, r3
 800228a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228c:	b29b      	uxth	r3, r3
 800228e:	4413      	add	r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f000 fcb2 	bl	8002c00 <UB_VGA_SetPixel>
		for (int x = -x0; x <= x0; x++)
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	3301      	adds	r3, #1
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
 80022a2:	e7a6      	b.n	80021f2 <_ZN9Vgascreen12draw_ellipseEiiiiii+0xf6>
	for (int y = 1; y <= y_rad; y++)
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	3301      	adds	r3, #1
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022aa:	e775      	b.n	8002198 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x9c>
			}
		}
	}

	hh = x_rad * x_rad;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	61fb      	str	r3, [r7, #28]
	ww = y_rad * y_rad;
 80022b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	61bb      	str	r3, [r7, #24]
	hhww = hh * ww;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
	x0 = y_rad;
 80022ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
	dx = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	643b      	str	r3, [r7, #64]	; 0x40

	// do the vertical diameter
	for (int x = -y_rad; x <= y_rad; x++)
 80022d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d4:	425b      	negs	r3, r3
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022dc:	429a      	cmp	r2, r3
 80022de:	dc2a      	bgt.n	8002336 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x23a>
	{
		if (fill != true)
 80022e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d016      	beq.n	8002314 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x218>
		{
			if (x == -y_rad || x == y_rad)
 80022e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e8:	425a      	negs	r2, r3
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d003      	beq.n	80022f8 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x1fc>
 80022f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d11a      	bne.n	800232e <_ZN9Vgascreen12draw_ellipseEiiiiii+0x232>
				UB_VGA_SetPixel(x_mp, y_mp + x, color);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	b298      	uxth	r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	b29b      	uxth	r3, r3
 8002304:	4413      	add	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f000 fc77 	bl	8002c00 <UB_VGA_SetPixel>
 8002312:	e00c      	b.n	800232e <_ZN9Vgascreen12draw_ellipseEiiiiii+0x232>
		}
		else
			UB_VGA_SetPixel(x_mp, y_mp + x, color);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	b298      	uxth	r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	b29a      	uxth	r2, r3
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	b29b      	uxth	r3, r3
 8002320:	4413      	add	r3, r2
 8002322:	b29b      	uxth	r3, r3
 8002324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f000 fc69 	bl	8002c00 <UB_VGA_SetPixel>
	for (int x = -y_rad; x <= y_rad; x++)
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	3301      	adds	r3, #1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002334:	e7d0      	b.n	80022d8 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x1dc>
	}

	// now do both halves at the same time, away from the diameter
	for (int y = 1; y <= x_rad; y++)
 8002336:	2301      	movs	r3, #1
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
 800233a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	dc5e      	bgt.n	8002400 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x304>
	{
		int x1 = x0 - (dx - 1);  // try slopes of dx - 1 or more
 8002342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002344:	3b01      	subs	r3, #1
 8002346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
		for (; x1 > 0; x1--)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	2b00      	cmp	r3, #0
 8002350:	dd16      	ble.n	8002380 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x284>
			if (x1 * x1 * hh + y * y * ww <= hhww)
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	fb02 f203 	mul.w	r2, r2, r3
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	441a      	add	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	429a      	cmp	r2, r3
 8002374:	dd03      	ble.n	800237e <_ZN9Vgascreen12draw_ellipseEiiiiii+0x282>
		for (; x1 > 0; x1--)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	3b01      	subs	r3, #1
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	e7e6      	b.n	800234c <_ZN9Vgascreen12draw_ellipseEiiiiii+0x250>
				break;
 800237e:	bf00      	nop
		dx = x0 - x1;  // current approximation of the slope
 8002380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	643b      	str	r3, [r7, #64]	; 0x40
		x0 = x1;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	647b      	str	r3, [r7, #68]	; 0x44

		for (int x = -x0; x <= x0; x++)
 800238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238e:	425b      	negs	r3, r3
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	6a3a      	ldr	r2, [r7, #32]
 8002394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002396:	429a      	cmp	r2, r3
 8002398:	dc2e      	bgt.n	80023f8 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x2fc>
		{
			if (x == -x0 || x == x0)
 800239a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239c:	425a      	negs	r2, r3
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d003      	beq.n	80023ac <_ZN9Vgascreen12draw_ellipseEiiiiii+0x2b0>
 80023a4:	6a3a      	ldr	r2, [r7, #32]
 80023a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d121      	bne.n	80023f0 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x2f4>
			{
				UB_VGA_SetPixel(x_mp - y, y_mp + x, color);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	b298      	uxth	r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f000 fc19 	bl	8002c00 <UB_VGA_SetPixel>
				UB_VGA_SetPixel(x_mp + y, y_mp + x, color);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	b298      	uxth	r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	b29a      	uxth	r2, r3
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f000 fc08 	bl	8002c00 <UB_VGA_SetPixel>
		for (int x = -x0; x <= x0; x++)
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	3301      	adds	r3, #1
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	e7cc      	b.n	8002392 <_ZN9Vgascreen12draw_ellipseEiiiiii+0x296>
	for (int y = 1; y <= x_rad; y++)
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	3301      	adds	r3, #1
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fe:	e79c      	b.n	800233a <_ZN9Vgascreen12draw_ellipseEiiiiii+0x23e>
			}

		}
	}
	return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3748      	adds	r7, #72	; 0x48
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZN9Vgascreen14draw_rectangleEiiiiii>:

int Vgascreen::draw_rectangle(int x_lo, int y_lo, int x_rb, int y_rb, int color, int fill)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b08a      	sub	sp, #40	; 0x28
 800240e:	af04      	add	r7, sp, #16
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
	const int breedte = abs(y_lo - y_rb);
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	bfb8      	it	lt
 8002422:	425b      	neglt	r3, r3
 8002424:	617b      	str	r3, [r7, #20]

	if (fill != true)
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	2b01      	cmp	r3, #1
 800242a:	d031      	beq.n	8002490 <_ZN9Vgascreen14draw_rectangleEiiiiii+0x86>
	{
		draw_line(x_lo, y_rb, x_rb, y_rb, 1, color);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	2301      	movs	r3, #1
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6a3a      	ldr	r2, [r7, #32]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff fd99 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>
		draw_line(x_rb, y_rb + 1, x_rb, y_lo, 1, color);
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	9302      	str	r3, [sp, #8]
 800244c:	2301      	movs	r3, #1
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fd8c 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>
		draw_line(x_rb, y_lo, x_lo, y_lo, 1, color);
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	9302      	str	r3, [sp, #8]
 8002462:	2301      	movs	r3, #1
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff fd80 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>
		draw_line(x_lo, y_lo, x_lo, y_rb, 1, color);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	2301      	movs	r3, #1
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fd74 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>
 800248e:	e00b      	b.n	80024a8 <_ZN9Vgascreen14draw_rectangleEiiiiii+0x9e>
	}
	else
		draw_line(x_lo, y_lo, x_rb, y_lo, breedte, color);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff fd67 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>

	return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_ZN9Vgascreen13draw_triangleEiiiiiiii>:


int Vgascreen::draw_triangle(int x1, int y1, int x2, int y2, int x3, int y3,
		int color, int fill)
{
 80024b2:	b590      	push	{r4, r7, lr}
 80024b4:	b0a1      	sub	sp, #132	; 0x84
 80024b6:	af04      	add	r7, sp, #16
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]

	if (fill != true)
 80024c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d02d      	beq.n	8002524 <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x72>
	{
		draw_line(x1, y1, x2, y2, 1, color);
 80024c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	2301      	movs	r3, #1
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f7ff fd49 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>
		draw_line(x1, y1, x3, y3, 1, color);
 80024e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	2301      	movs	r3, #1
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff fd3a 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>
		draw_line(x2, y2, x3, y3, 1, color);
 8002502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	2301      	movs	r3, #1
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800251a:	6839      	ldr	r1, [r7, #0]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff fd2a 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>
 8002522:	e158      	b.n	80027d6 <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x324>
	}
	else
	{
		int pt0[3] = {x1, y1};
 8002524:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
		int pt1[3] = {x2, y2};
 8002538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
		int pt2[3] = {x3, y3};
 800254e:	f107 0320 	add.w	r3, r7, #32
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002564:	627b      	str	r3, [r7, #36]	; 0x24

		if (pt0[1] > pt1[1]) //sort points based on height. pt0 is highest, pt2 lowest
 8002566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	429a      	cmp	r2, r3
 800256c:	dd07      	ble.n	800257e <_ZN9Vgascreen13draw_triangleEiiiiiiii+0xcc>
			std::swap(pt0, pt1);
 800256e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002572:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fac2 	bl	8002b02 <_ZSt4swapIiLj3EEvRAT0__T_S2_>
		if (pt0[1] > pt2[1])
 800257e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	429a      	cmp	r2, r3
 8002584:	dd07      	ble.n	8002596 <_ZN9Vgascreen13draw_triangleEiiiiiiii+0xe4>
			std::swap(pt0, pt2);
 8002586:	f107 0220 	add.w	r2, r7, #32
 800258a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fab6 	bl	8002b02 <_ZSt4swapIiLj3EEvRAT0__T_S2_>
		if (pt1[1] > pt2[1])
 8002596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	429a      	cmp	r2, r3
 800259c:	dd07      	ble.n	80025ae <_ZN9Vgascreen13draw_triangleEiiiiiiii+0xfc>
			std::swap(pt1, pt2);
 800259e:	f107 0220 	add.w	r2, r7, #32
 80025a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 faaa 	bl	8002b02 <_ZSt4swapIiLj3EEvRAT0__T_S2_>

		int total_height = pt2[1] - pt0[1];
 80025ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (int y = pt0[1]; y <= pt1[1]; y++)
 80025b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025be:	429a      	cmp	r2, r3
 80025c0:	f2c0 8081 	blt.w	80026c6 <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x214>
		{
			int segment_height = pt1[1] - pt0[1] + 1;
 80025c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	65bb      	str	r3, [r7, #88]	; 0x58
			float alpha = (float) (y - pt0[1]) / total_height;
 80025ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd febb 	bl	8000350 <__aeabi_i2f>
 80025da:	4604      	mov	r4, r0
 80025dc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80025de:	f7fd feb7 	bl	8000350 <__aeabi_i2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4619      	mov	r1, r3
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7fd ffba 	bl	8000560 <__aeabi_fdiv>
 80025ec:	4603      	mov	r3, r0
 80025ee:	657b      	str	r3, [r7, #84]	; 0x54
			float beta = (float) (y - pt0[1]) / segment_height; // be careful with divisions by zero
 80025f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd feaa 	bl	8000350 <__aeabi_i2f>
 80025fc:	4604      	mov	r4, r0
 80025fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002600:	f7fd fea6 	bl	8000350 <__aeabi_i2f>
 8002604:	4603      	mov	r3, r0
 8002606:	4619      	mov	r1, r3
 8002608:	4620      	mov	r0, r4
 800260a:	f7fd ffa9 	bl	8000560 <__aeabi_fdiv>
 800260e:	4603      	mov	r3, r0
 8002610:	653b      	str	r3, [r7, #80]	; 0x50
//			int A[3];
			int A = int(pt0[0] + (pt2[0] - pt0[0]) * alpha);
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd fe9b 	bl	8000350 <__aeabi_i2f>
 800261a:	4604      	mov	r4, r0
 800261c:	6a3a      	ldr	r2, [r7, #32]
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fe94 	bl	8000350 <__aeabi_i2f>
 8002628:	4603      	mov	r3, r0
 800262a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd fee3 	bl	80003f8 <__aeabi_fmul>
 8002632:	4603      	mov	r3, r0
 8002634:	4619      	mov	r1, r3
 8002636:	4620      	mov	r0, r4
 8002638:	f7fd fdd6 	bl	80001e8 <__addsf3>
 800263c:	4603      	mov	r3, r0
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe f82a 	bl	8000698 <__aeabi_f2iz>
 8002644:	4603      	mov	r3, r0
 8002646:	61fb      	str	r3, [r7, #28]
//			A[1] = int(pt0[1] + (pt2[1] - pt0[1]) * alpha);
//			int B[3];
			int B = int(pt0[0] + (pt1[0] - pt0[0]) * beta);
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd fe80 	bl	8000350 <__aeabi_i2f>
 8002650:	4604      	mov	r4, r0
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fe79 	bl	8000350 <__aeabi_i2f>
 800265e:	4603      	mov	r3, r0
 8002660:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fec8 	bl	80003f8 <__aeabi_fmul>
 8002668:	4603      	mov	r3, r0
 800266a:	4619      	mov	r1, r3
 800266c:	4620      	mov	r0, r4
 800266e:	f7fd fdbb 	bl	80001e8 <__addsf3>
 8002672:	4603      	mov	r3, r0
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe f80f 	bl	8000698 <__aeabi_f2iz>
 800267a:	4603      	mov	r3, r0
 800267c:	61bb      	str	r3, [r7, #24]
//			B[1] = int(pt0[1] + (pt1[1] - pt0[1]) * beta);
			if (A > B)
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	429a      	cmp	r2, r3
 8002684:	dd07      	ble.n	8002696 <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x1e4>
				std::swap(A, B);
 8002686:	f107 0218 	add.w	r2, r7, #24
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa22 	bl	8002ada <_ZSt4swapIiEvRT_S1_>
			for (int j = A; j <= B; j++)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	66bb      	str	r3, [r7, #104]	; 0x68
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800269e:	429a      	cmp	r2, r3
 80026a0:	dc0d      	bgt.n	80026be <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x20c>
			{
				UB_VGA_SetPixel(j, y, color);
 80026a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026a8:	b291      	uxth	r1, r2
 80026aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 faa5 	bl	8002c00 <UB_VGA_SetPixel>
			for (int j = A; j <= B; j++)
 80026b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b8:	3301      	adds	r3, #1
 80026ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80026bc:	e7ed      	b.n	800269a <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x1e8>
		for (int y = pt0[1]; y <= pt1[1]; y++)
 80026be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c0:	3301      	adds	r3, #1
 80026c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026c4:	e779      	b.n	80025ba <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x108>
			}
		}

		for (int y = pt1[1]; y <= pt2[1]; y++)
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	667b      	str	r3, [r7, #100]	; 0x64
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ce:	429a      	cmp	r2, r3
 80026d0:	f2c0 8081 	blt.w	80027d6 <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x324>
		{
			int segment_height = pt2[1] - pt1[1] + 1;
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	64fb      	str	r3, [r7, #76]	; 0x4c
			float alpha = (float) (y - pt0[1]) / total_height;
 80026de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd fe33 	bl	8000350 <__aeabi_i2f>
 80026ea:	4604      	mov	r4, r0
 80026ec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026ee:	f7fd fe2f 	bl	8000350 <__aeabi_i2f>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4619      	mov	r1, r3
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7fd ff32 	bl	8000560 <__aeabi_fdiv>
 80026fc:	4603      	mov	r3, r0
 80026fe:	64bb      	str	r3, [r7, #72]	; 0x48
			float beta = (float) (y - pt1[1]) / segment_height; // be careful with divisions by zero
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fe22 	bl	8000350 <__aeabi_i2f>
 800270c:	4604      	mov	r4, r0
 800270e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002710:	f7fd fe1e 	bl	8000350 <__aeabi_i2f>
 8002714:	4603      	mov	r3, r0
 8002716:	4619      	mov	r1, r3
 8002718:	4620      	mov	r0, r4
 800271a:	f7fd ff21 	bl	8000560 <__aeabi_fdiv>
 800271e:	4603      	mov	r3, r0
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
//			int A[3];
			int A = int(pt0[0] + (pt2[0] - pt0[0]) * alpha);
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fe13 	bl	8000350 <__aeabi_i2f>
 800272a:	4604      	mov	r4, r0
 800272c:	6a3a      	ldr	r2, [r7, #32]
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd fe0c 	bl	8000350 <__aeabi_i2f>
 8002738:	4603      	mov	r3, r0
 800273a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fe5b 	bl	80003f8 <__aeabi_fmul>
 8002742:	4603      	mov	r3, r0
 8002744:	4619      	mov	r1, r3
 8002746:	4620      	mov	r0, r4
 8002748:	f7fd fd4e 	bl	80001e8 <__addsf3>
 800274c:	4603      	mov	r3, r0
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ffa2 	bl	8000698 <__aeabi_f2iz>
 8002754:	4603      	mov	r3, r0
 8002756:	617b      	str	r3, [r7, #20]
//			A[1] = int(pt0[0] + (pt2[0] - pt0[0]) * alpha);
//			int B[3];
			int B = int(pt1[0] + (pt2[0] - pt1[0]) * beta);
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd fdf8 	bl	8000350 <__aeabi_i2f>
 8002760:	4604      	mov	r4, r0
 8002762:	6a3a      	ldr	r2, [r7, #32]
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fdf1 	bl	8000350 <__aeabi_i2f>
 800276e:	4603      	mov	r3, r0
 8002770:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fe40 	bl	80003f8 <__aeabi_fmul>
 8002778:	4603      	mov	r3, r0
 800277a:	4619      	mov	r1, r3
 800277c:	4620      	mov	r0, r4
 800277e:	f7fd fd33 	bl	80001e8 <__addsf3>
 8002782:	4603      	mov	r3, r0
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd ff87 	bl	8000698 <__aeabi_f2iz>
 800278a:	4603      	mov	r3, r0
 800278c:	613b      	str	r3, [r7, #16]
//			B[1] = int(pt1[1] + (pt2[1] - pt1[1]) * beta);

			if (A > B)
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	429a      	cmp	r2, r3
 8002794:	dd07      	ble.n	80027a6 <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x2f4>
				std::swap(A, B);
 8002796:	f107 0210 	add.w	r2, r7, #16
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f99a 	bl	8002ada <_ZSt4swapIiEvRT_S1_>
			for (int j = A; j <= B; j++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	663b      	str	r3, [r7, #96]	; 0x60
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027ae:	429a      	cmp	r2, r3
 80027b0:	dc0d      	bgt.n	80027ce <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x31c>
			{
				UB_VGA_SetPixel(j, y, color); // attention, due to int casts t0.y+i != A.y
 80027b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027b8:	b291      	uxth	r1, r2
 80027ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fa1d 	bl	8002c00 <UB_VGA_SetPixel>
			for (int j = A; j <= B; j++)
 80027c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c8:	3301      	adds	r3, #1
 80027ca:	663b      	str	r3, [r7, #96]	; 0x60
 80027cc:	e7ed      	b.n	80027aa <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x2f8>
		for (int y = pt1[1]; y <= pt2[1]; y++)
 80027ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d0:	3301      	adds	r3, #1
 80027d2:	667b      	str	r3, [r7, #100]	; 0x64
 80027d4:	e779      	b.n	80026ca <_ZN9Vgascreen13draw_triangleEiiiiiiii+0x218>
			}
		}

	}
	return 0;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3774      	adds	r7, #116	; 0x74
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}

080027e0 <_ZN9Vgascreen11draw_bitmapEiii>:


int Vgascreen::draw_bitmap(int nr, int x_lo, int y_lo)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
	int color;
	int count = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
	const int *bitmap;

	switch (nr)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d821      	bhi.n	800283c <_ZN9Vgascreen11draw_bitmapEiii+0x5c>
 80027f8:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <_ZN9Vgascreen11draw_bitmapEiii+0x20>)
 80027fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fe:	bf00      	nop
 8002800:	08002819 	.word	0x08002819
 8002804:	0800281f 	.word	0x0800281f
 8002808:	08002825 	.word	0x08002825
 800280c:	0800282b 	.word	0x0800282b
 8002810:	08002831 	.word	0x08002831
 8002814:	08002837 	.word	0x08002837
	{
		case 0:
			bitmap = smileyBmp;
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <_ZN9Vgascreen11draw_bitmapEiii+0xc8>)
 800281a:	623b      	str	r3, [r7, #32]
			break;
 800281c:	e010      	b.n	8002840 <_ZN9Vgascreen11draw_bitmapEiii+0x60>
		case 1:
			bitmap = angryBmp;
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <_ZN9Vgascreen11draw_bitmapEiii+0xcc>)
 8002820:	623b      	str	r3, [r7, #32]
			break;
 8002822:	e00d      	b.n	8002840 <_ZN9Vgascreen11draw_bitmapEiii+0x60>
		case 2:
			bitmap = arrowUp;
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <_ZN9Vgascreen11draw_bitmapEiii+0xd0>)
 8002826:	623b      	str	r3, [r7, #32]
			break;
 8002828:	e00a      	b.n	8002840 <_ZN9Vgascreen11draw_bitmapEiii+0x60>
		case 3:
			bitmap = arrowDown;
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <_ZN9Vgascreen11draw_bitmapEiii+0xd4>)
 800282c:	623b      	str	r3, [r7, #32]
			break;
 800282e:	e007      	b.n	8002840 <_ZN9Vgascreen11draw_bitmapEiii+0x60>
		case 4:
			bitmap = arrowRight;
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <_ZN9Vgascreen11draw_bitmapEiii+0xd8>)
 8002832:	623b      	str	r3, [r7, #32]
			break;
 8002834:	e004      	b.n	8002840 <_ZN9Vgascreen11draw_bitmapEiii+0x60>
		case 5:
			bitmap = arrowLeft;
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <_ZN9Vgascreen11draw_bitmapEiii+0xdc>)
 8002838:	623b      	str	r3, [r7, #32]
			break;
 800283a:	e001      	b.n	8002840 <_ZN9Vgascreen11draw_bitmapEiii+0x60>
		default:
			return 1; // Geen geldig bitmap nummer
 800283c:	2301      	movs	r3, #1
 800283e:	e02f      	b.n	80028a0 <_ZN9Vgascreen11draw_bitmapEiii+0xc0>
	}

	for (int i = 0; i < 32; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b1f      	cmp	r3, #31
 8002848:	dc29      	bgt.n	800289e <_ZN9Vgascreen11draw_bitmapEiii+0xbe>
	{
		for (int j = 0; j < 32; j++)
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b1f      	cmp	r3, #31
 8002852:	dc20      	bgt.n	8002896 <_ZN9Vgascreen11draw_bitmapEiii+0xb6>
		{
			color = bitmap[count];
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	4413      	add	r3, r2
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	617b      	str	r3, [r7, #20]
			if (color < 100)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b63      	cmp	r3, #99	; 0x63
 8002864:	dc10      	bgt.n	8002888 <_ZN9Vgascreen11draw_bitmapEiii+0xa8>
			{
				UB_VGA_SetPixel(x_lo + j, y_lo + i, color);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	b29a      	uxth	r2, r3
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	b29b      	uxth	r3, r3
 800286e:	4413      	add	r3, r2
 8002870:	b298      	uxth	r0, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b29a      	uxth	r2, r3
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	b29b      	uxth	r3, r3
 800287a:	4413      	add	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f000 f9bc 	bl	8002c00 <UB_VGA_SetPixel>
			}
			count++;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	3301      	adds	r3, #1
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
		for (int j = 0; j < 32; j++)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3301      	adds	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e7db      	b.n	800284e <_ZN9Vgascreen11draw_bitmapEiii+0x6e>
	for (int i = 0; i < 32; i++)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e7d2      	b.n	8002844 <_ZN9Vgascreen11draw_bitmapEiii+0x64>
		}
	}
	return 0;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	08003ee4 	.word	0x08003ee4
 80028ac:	08004ee8 	.word	0x08004ee8
 80028b0:	08005eec 	.word	0x08005eec
 80028b4:	08006ef0 	.word	0x08006ef0
 80028b8:	08007ef4 	.word	0x08007ef4
 80028bc:	08008ef8 	.word	0x08008ef8

080028c0 <_Z8DrawCharciiiii>:

int DrawChar(char c, int x, int y, int color, int stijl, int fontNr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	; 0x30
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4603      	mov	r3, r0
 80028ce:	73fb      	strb	r3, [r7, #15]
	int i, j, cursief, charWidth;
	int charHeight = 8;
 80028d0:	2308      	movs	r3, #8
 80028d2:	61bb      	str	r3, [r7, #24]
	int index = c - 32;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	3b20      	subs	r3, #32
 80028d8:	617b      	str	r3, [r7, #20]

	if (index < 0 || index > 95)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db02      	blt.n	80028e6 <_Z8DrawCharciiiii+0x26>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b5f      	cmp	r3, #95	; 0x5f
 80028e4:	dd01      	ble.n	80028ea <_Z8DrawCharciiiii+0x2a>
		return 1; //ongeldige karakters ingevoerd
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0a4      	b.n	8002a34 <_Z8DrawCharciiiii+0x174>

	const unsigned char* chr;
	chr = font2[index];
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4a51      	ldr	r2, [pc, #324]	; (8002a3c <_Z8DrawCharciiiii+0x17c>)
 80028f6:	4413      	add	r3, r2
 80028f8:	61fb      	str	r3, [r7, #28]

	switch (fontNr)
 80028fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d002      	beq.n	8002906 <_Z8DrawCharciiiii+0x46>
 8002900:	2b02      	cmp	r3, #2
 8002902:	d00a      	beq.n	800291a <_Z8DrawCharciiiii+0x5a>
 8002904:	e014      	b.n	8002930 <_Z8DrawCharciiiii+0x70>
	{
		case 1:
			chr = font1[index];
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	4a4c      	ldr	r2, [pc, #304]	; (8002a40 <_Z8DrawCharciiiii+0x180>)
 8002910:	4413      	add	r3, r2
 8002912:	61fb      	str	r3, [r7, #28]
			charWidth = 7;
 8002914:	2307      	movs	r3, #7
 8002916:	623b      	str	r3, [r7, #32]
			break;
 8002918:	e014      	b.n	8002944 <_Z8DrawCharciiiii+0x84>
		case 2:
			chr = font2[index];
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <_Z8DrawCharciiiii+0x17c>)
 8002926:	4413      	add	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]
			charWidth = 6;
 800292a:	2306      	movs	r3, #6
 800292c:	623b      	str	r3, [r7, #32]
			break;
 800292e:	e009      	b.n	8002944 <_Z8DrawCharciiiii+0x84>
		default:
			chr = font1[index];
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	4a41      	ldr	r2, [pc, #260]	; (8002a40 <_Z8DrawCharciiiii+0x180>)
 800293a:	4413      	add	r3, r2
 800293c:	61fb      	str	r3, [r7, #28]
			charWidth = 7;
 800293e:	2307      	movs	r3, #7
 8002940:	623b      	str	r3, [r7, #32]
			break;
 8002942:	bf00      	nop
	}

	// Draw pixels
	for (j = 0; j < charWidth; j++)
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
 8002948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	429a      	cmp	r2, r3
 800294e:	da70      	bge.n	8002a32 <_Z8DrawCharciiiii+0x172>
	{
		cursief = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < charHeight; i++)
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	429a      	cmp	r2, r3
 800295e:	da64      	bge.n	8002a2a <_Z8DrawCharciiiii+0x16a>
		{
			if (chr[j] & (1 << i))
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	fa42 f303 	asr.w	r3, r2, r3
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d051      	beq.n	8002a1c <_Z8DrawCharciiiii+0x15c>
			{
				if (stijl == 0)
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	2b00      	cmp	r3, #0
 800297c:	d115      	bne.n	80029aa <_Z8DrawCharciiiii+0xea>
					UB_VGA_SetPixel(x + j - cursief, y + i, color);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	b29a      	uxth	r2, r3
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	b29b      	uxth	r3, r3
 8002986:	4413      	add	r3, r2
 8002988:	b29a      	uxth	r2, r3
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	b29b      	uxth	r3, r3
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	b298      	uxth	r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	b29a      	uxth	r2, r3
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	b29b      	uxth	r3, r3
 800299a:	4413      	add	r3, r2
 800299c:	b29b      	uxth	r3, r3
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f000 f92c 	bl	8002c00 <UB_VGA_SetPixel>
 80029a8:	e038      	b.n	8002a1c <_Z8DrawCharciiiii+0x15c>
				else if (stijl == 1)
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d124      	bne.n	80029fa <_Z8DrawCharciiiii+0x13a>
				{
					UB_VGA_SetPixel(x + j, y + i, color);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	b298      	uxth	r0, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f000 f917 	bl	8002c00 <UB_VGA_SetPixel>
					UB_VGA_SetPixel(x + j + 1, y + i, color);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4413      	add	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	b298      	uxth	r0, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f000 f904 	bl	8002c00 <UB_VGA_SetPixel>
 80029f8:	e010      	b.n	8002a1c <_Z8DrawCharciiiii+0x15c>
				}
				else
					UB_VGA_SetPixel(x + j, y + i, color);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	b298      	uxth	r0, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	f000 f8f2 	bl	8002c00 <UB_VGA_SetPixel>
			}
			cursief++;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	3301      	adds	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < charHeight; i++)
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	3301      	adds	r3, #1
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a28:	e796      	b.n	8002958 <_Z8DrawCharciiiii+0x98>
	for (j = 0; j < charWidth; j++)
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a30:	e78a      	b.n	8002948 <_Z8DrawCharciiiii+0x88>
		}
	}
	return 0;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3730      	adds	r7, #48	; 0x30
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	0800a19c 	.word	0x0800a19c
 8002a40:	08009efc 	.word	0x08009efc

08002a44 <_ZN9Vgascreen9draw_textEiiPKciS1_i>:

int Vgascreen::draw_text(int x, int y, const char *str, int color,
		const char* style, int fontNr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]

	int stijl;
	if (strcmp(style, "cursief") == 0)
 8002a52:	4918      	ldr	r1, [pc, #96]	; (8002ab4 <_ZN9Vgascreen9draw_textEiiPKciS1_i+0x70>)
 8002a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a56:	f7fd fbb7 	bl	80001c8 <strcmp>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <_ZN9Vgascreen9draw_textEiiPKciS1_i+0x22>
		stijl = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e00b      	b.n	8002a7e <_ZN9Vgascreen9draw_textEiiPKciS1_i+0x3a>
	else if (strcmp(style, "vet") == 0)
 8002a66:	4914      	ldr	r1, [pc, #80]	; (8002ab8 <_ZN9Vgascreen9draw_textEiiPKciS1_i+0x74>)
 8002a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a6a:	f7fd fbad 	bl	80001c8 <strcmp>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <_ZN9Vgascreen9draw_textEiiPKciS1_i+0x36>
		stijl = 1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e001      	b.n	8002a7e <_ZN9Vgascreen9draw_textEiiPKciS1_i+0x3a>
	else
		stijl = 3;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]

	while (*str)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <_ZN9Vgascreen9draw_textEiiPKciS1_i+0x64>
	{
		DrawChar(*str++, x, y, color, stijl, fontNr);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	603a      	str	r2, [r7, #0]
 8002a8c:	7818      	ldrb	r0, [r3, #0]
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	f7ff ff10 	bl	80028c0 <_Z8DrawCharciiiii>
		x += 6;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	3306      	adds	r3, #6
 8002aa4:	60bb      	str	r3, [r7, #8]
	while (*str)
 8002aa6:	e7ea      	b.n	8002a7e <_ZN9Vgascreen9draw_textEiiPKciS1_i+0x3a>
	}
	return 0;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08003d88 	.word	0x08003d88
 8002ab8:	08003d90 	.word	0x08003d90

08002abc <_ZN9Vgascreen12clear_screenEi>:

int Vgascreen::clear_screen(int color)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
	UB_VGA_FillScreen(color);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f876 	bl	8002bbc <UB_VGA_FillScreen>
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <_ZSt4swapIiEvRT_S1_>:
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
	            is_nothrow_move_assignable<_Tp>>::value)
#else
    void
    swap(_Tp& __a, _Tp& __b)
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]
    }
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <_ZSt4swapIiLj3EEvRAT0__T_S2_>:
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)
#else
    void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
#endif
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d80e      	bhi.n	8002b34 <_ZSt4swapIiLj3EEvRAT0__T_S2_+0x32>
	swap(__a[__n], __b[__n]);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	18d0      	adds	r0, r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7ff ffd7 	bl	8002ada <_ZSt4swapIiEvRT_S1_>
      for (size_t __n = 0; __n < _Nm; ++__n)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e7ed      	b.n	8002b10 <_ZSt4swapIiLj3EEvRAT0__T_S2_+0xe>
    }
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <UB_VGA_Screen_Init+0x74>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <UB_VGA_Screen_Init+0x74>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <UB_VGA_Screen_Init+0x74>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002b54:	2300      	movs	r3, #0
 8002b56:	80bb      	strh	r3, [r7, #4]
 8002b58:	e017      	b.n	8002b8a <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	80fb      	strh	r3, [r7, #6]
 8002b5e:	e00d      	b.n	8002b7c <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8002b60:	88ba      	ldrh	r2, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	441a      	add	r2, r3
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <UB_VGA_Screen_Init+0x78>)
 8002b72:	2100      	movs	r1, #0
 8002b74:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	80fb      	strh	r3, [r7, #6]
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b82:	d9ed      	bls.n	8002b60 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	3301      	adds	r3, #1
 8002b88:	80bb      	strh	r3, [r7, #4]
 8002b8a:	88bb      	ldrh	r3, [r7, #4]
 8002b8c:	2bef      	cmp	r3, #239	; 0xef
 8002b8e:	d9e4      	bls.n	8002b5a <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8002b90:	f000 f858 	bl	8002c44 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8002b94:	f000 f8aa 	bl	8002cec <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8002b98:	f000 f93a 	bl	8002e10 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8002b9c:	f000 f90c 	bl	8002db8 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <UB_VGA_Screen_Init+0x7c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a02      	ldr	r2, [pc, #8]	; (8002bb0 <UB_VGA_Screen_Init+0x74>)
 8002ba6:	6093      	str	r3, [r2, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200002c8 	.word	0x200002c8
 8002bb4:	200002d4 	.word	0x200002d4
 8002bb8:	40026488 	.word	0x40026488

08002bbc <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	81bb      	strh	r3, [r7, #12]
 8002bca:	e012      	b.n	8002bf2 <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002bcc:	2300      	movs	r3, #0
 8002bce:	81fb      	strh	r3, [r7, #14]
 8002bd0:	e008      	b.n	8002be4 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8002bd2:	79fa      	ldrb	r2, [r7, #7]
 8002bd4:	89b9      	ldrh	r1, [r7, #12]
 8002bd6:	89fb      	ldrh	r3, [r7, #14]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f811 	bl	8002c00 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002bde:	89fb      	ldrh	r3, [r7, #14]
 8002be0:	3301      	adds	r3, #1
 8002be2:	81fb      	strh	r3, [r7, #14]
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002bea:	d3f2      	bcc.n	8002bd2 <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002bec:	89bb      	ldrh	r3, [r7, #12]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	81bb      	strh	r3, [r7, #12]
 8002bf2:	89bb      	ldrh	r3, [r7, #12]
 8002bf4:	2bef      	cmp	r3, #239	; 0xef
 8002bf6:	d9e9      	bls.n	8002bcc <UB_VGA_FillScreen+0x10>
    }
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	80bb      	strh	r3, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	70fb      	strb	r3, [r7, #3]
  if(xp<VGA_DISPLAY_X && xp>= 0){
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c18:	d20d      	bcs.n	8002c36 <UB_VGA_SetPixel+0x36>
  	  if(yp<VGA_DISPLAY_Y && yp>=0){
 8002c1a:	88bb      	ldrh	r3, [r7, #4]
 8002c1c:	2bef      	cmp	r3, #239	; 0xef
 8002c1e:	d80a      	bhi.n	8002c36 <UB_VGA_SetPixel+0x36>
  	  	  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8002c20:	88ba      	ldrh	r2, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	441a      	add	r2, r3
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4903      	ldr	r1, [pc, #12]	; (8002c40 <UB_VGA_SetPixel+0x40>)
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	54ca      	strb	r2, [r1, r3]
  	  	  //return 0;
  	  }else{
  		  //return 1;
  	  }
  }
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	200002d4 	.word	0x200002d4

08002c44 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	2010      	movs	r0, #16
 8002c4e:	f7fe fabf 	bl	80011d0 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8002c52:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002c56:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002c60:	2301      	movs	r3, #1
 8002c62:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002c64:	2303      	movs	r3, #3
 8002c66:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002c68:	463b      	mov	r3, r7
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	481d      	ldr	r0, [pc, #116]	; (8002ce4 <P_VGA_InitIO+0xa0>)
 8002c6e:	f7fe f931 	bl	8000ed4 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8002c72:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <P_VGA_InitIO+0xa0>)
 8002c74:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002c78:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f7fe faa7 	bl	80011d0 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8002c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c86:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002c90:	2300      	movs	r3, #0
 8002c92:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8002c94:	2301      	movs	r3, #1
 8002c96:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002c98:	463b      	mov	r3, r7
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <P_VGA_InitIO+0xa4>)
 8002c9e:	f7fe f919 	bl	8000ed4 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	210b      	movs	r1, #11
 8002ca6:	4810      	ldr	r0, [pc, #64]	; (8002ce8 <P_VGA_InitIO+0xa4>)
 8002ca8:	f7fe f9a1 	bl	8000fee <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002cac:	2101      	movs	r1, #1
 8002cae:	2002      	movs	r0, #2
 8002cb0:	f7fe fa8e 	bl	80011d0 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8002cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002cca:	463b      	mov	r3, r7
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <P_VGA_InitIO+0xa4>)
 8002cd0:	f7fe f900 	bl	8000ed4 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <P_VGA_InitIO+0xa4>)
 8002cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cda:	831a      	strh	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40020400 	.word	0x40020400

08002cec <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7fe faa7 	bl	8001248 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8002cfa:	230b      	movs	r3, #11
 8002cfc:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002d02:	2300      	movs	r3, #0
 8002d04:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002d06:	2300      	movs	r3, #0
 8002d08:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4828      	ldr	r0, [pc, #160]	; (8002db4 <P_VGA_InitTIM+0xc8>)
 8002d12:	f7fe fae1 	bl	80012d8 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002d16:	2101      	movs	r1, #1
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7fe fa77 	bl	800120c <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8002d1e:	f640 236b 	movw	r3, #2667	; 0xa6b
 8002d22:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d3a:	f7fe facd 	bl	80012d8 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002d3e:	2360      	movs	r3, #96	; 0x60
 8002d40:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002d42:	2301      	movs	r3, #1
 8002d44:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8002d46:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002d4a:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8002d50:	463b      	mov	r3, r7
 8002d52:	4619      	mov	r1, r3
 8002d54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d58:	f7fe fb66 	bl	8001428 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002d5c:	2108      	movs	r1, #8
 8002d5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d62:	f7fe fc4d 	bl	8001600 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002d66:	2360      	movs	r3, #96	; 0x60
 8002d68:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8002d6e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002d72:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002d74:	2302      	movs	r3, #2
 8002d76:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8002d78:	463b      	mov	r3, r7
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d80:	f7fe fbd8 	bl	8001534 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002d84:	2108      	movs	r1, #8
 8002d86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d8a:	f7fe fc54 	bl	8001636 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4808      	ldr	r0, [pc, #32]	; (8002db4 <P_VGA_InitTIM+0xc8>)
 8002d92:	f7fe fb0b 	bl	80013ac <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8002d96:	2101      	movs	r1, #1
 8002d98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d9c:	f7fe fb06 	bl	80013ac <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8002da0:	2101      	movs	r1, #1
 8002da2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002da6:	f7fe fb20 	bl	80013ea <TIM_Cmd>

}
 8002daa:	bf00      	nop
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000

08002db8 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	4812      	ldr	r0, [pc, #72]	; (8002e0c <P_VGA_InitINT+0x54>)
 8002dc4:	f7fd ffc8 	bl	8000d58 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8002dc8:	2344      	movs	r3, #68	; 0x44
 8002dca:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fd7e 	bl	80008dc <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8002de0:	2201      	movs	r2, #1
 8002de2:	2108      	movs	r1, #8
 8002de4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002de8:	f7fe fc42 	bl	8001670 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002dec:	231c      	movs	r3, #28
 8002dee:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fd6c 	bl	80008dc <NVIC_Init>
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40026488 	.word	0x40026488

08002e10 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b090      	sub	sp, #64	; 0x40
 8002e14:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8002e16:	2101      	movs	r1, #1
 8002e18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002e1c:	f7fe f9d8 	bl	80011d0 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8002e20:	2100      	movs	r1, #0
 8002e22:	481b      	ldr	r0, [pc, #108]	; (8002e90 <P_VGA_InitDMA+0x80>)
 8002e24:	f7fd fefe 	bl	8000c24 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8002e28:	4819      	ldr	r0, [pc, #100]	; (8002e90 <P_VGA_InitDMA+0x80>)
 8002e2a:	f7fd fdd3 	bl	80009d4 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8002e2e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002e32:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <P_VGA_InitDMA+0x84>)
 8002e36:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8002e38:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <P_VGA_InitDMA+0x88>)
 8002e3a:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002e3c:	2340      	movs	r3, #64	; 0x40
 8002e3e:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8002e40:	f240 1341 	movw	r3, #321	; 0x141
 8002e44:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e4e:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002e5c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002e62:	2300      	movs	r3, #0
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8002e66:	2301      	movs	r3, #1
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4806      	ldr	r0, [pc, #24]	; (8002e90 <P_VGA_InitDMA+0x80>)
 8002e78:	f7fd fe7e 	bl	8000b78 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e82:	4806      	ldr	r0, [pc, #24]	; (8002e9c <P_VGA_InitDMA+0x8c>)
 8002e84:	f7fe fc50 	bl	8001728 <TIM_DMACmd>
}
 8002e88:	bf00      	nop
 8002e8a:	3740      	adds	r7, #64	; 0x40
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40026488 	.word	0x40026488
 8002e94:	40021015 	.word	0x40021015
 8002e98:	200002d4 	.word	0x200002d4
 8002e9c:	40010000 	.word	0x40010000

08002ea0 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8002ea4:	2108      	movs	r1, #8
 8002ea6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eaa:	f7fe fc2d 	bl	8001708 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002eb8:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002ec2:	d905      	bls.n	8002ed0 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8002eca:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <TIM2_IRQHandler+0xac>)
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002ece:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d804      	bhi.n	8002ee2 <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <TIM2_IRQHandler+0xb0>)
 8002eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ede:	835a      	strh	r2, [r3, #26]
 8002ee0:	e003      	b.n	8002eea <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <TIM2_IRQHandler+0xb0>)
 8002ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ee8:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	2b23      	cmp	r3, #35	; 0x23
 8002ef0:	d927      	bls.n	8002f42 <TIM2_IRQHandler+0xa2>
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	f240 2202 	movw	r2, #514	; 0x202
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d821      	bhi.n	8002f42 <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 8002efe:	4a15      	ldr	r2, [pc, #84]	; (8002f54 <TIM2_IRQHandler+0xb4>)
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <TIM2_IRQHandler+0xb4>)
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 8002f0e:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <TIM2_IRQHandler+0xb8>)
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <TIM2_IRQHandler+0xb8>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8002f1e:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <TIM2_IRQHandler+0xb4>)
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <TIM2_IRQHandler+0xb4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f203 1341 	addw	r3, r3, #321	; 0x141
 8002f3e:	4a02      	ldr	r2, [pc, #8]	; (8002f48 <TIM2_IRQHandler+0xa8>)
 8002f40:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200002c8 	.word	0x200002c8
 8002f4c:	200002d4 	.word	0x200002d4
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40026488 	.word	0x40026488
 8002f58:	40010000 	.word	0x40010000

08002f5c <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8002f60:	490d      	ldr	r1, [pc, #52]	; (8002f98 <DMA2_Stream5_IRQHandler+0x3c>)
 8002f62:	480e      	ldr	r0, [pc, #56]	; (8002f9c <DMA2_Stream5_IRQHandler+0x40>)
 8002f64:	f7fd ff32 	bl	8000dcc <DMA_GetITStatus>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d012      	beq.n	8002f94 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 8002f6e:	490a      	ldr	r1, [pc, #40]	; (8002f98 <DMA2_Stream5_IRQHandler+0x3c>)
 8002f70:	480a      	ldr	r0, [pc, #40]	; (8002f9c <DMA2_Stream5_IRQHandler+0x40>)
 8002f72:	f7fd ff81 	bl	8000e78 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <DMA2_Stream5_IRQHandler+0x44>)
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <DMA2_Stream5_IRQHandler+0x44>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <DMA2_Stream5_IRQHandler+0x40>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <DMA2_Stream5_IRQHandler+0x48>)
 8002f8e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002f92:	835a      	strh	r2, [r3, #26]
  }
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20008800 	.word	0x20008800
 8002f9c:	40026488 	.word	0x40026488
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <Audio_MAL_IRQHandler+0xe8>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b38      	ldr	r3, [pc, #224]	; (8003094 <Audio_MAL_IRQHandler+0xec>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f7fd fe66 	bl	8000c88 <DMA_GetFlagStatus>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d064      	beq.n	800308c <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002fc2:	4b35      	ldr	r3, [pc, #212]	; (8003098 <Audio_MAL_IRQHandler+0xf0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d04c      	beq.n	8003064 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002fca:	bf00      	nop
 8002fcc:	4b30      	ldr	r3, [pc, #192]	; (8003090 <Audio_MAL_IRQHandler+0xe8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fe42 	bl	8000c5a <DMA_GetCmdStatus>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f7      	bne.n	8002fcc <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002fdc:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <Audio_MAL_IRQHandler+0xe8>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <Audio_MAL_IRQHandler+0xec>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f7fd fe88 	bl	8000cfc <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <Audio_MAL_IRQHandler+0xf4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <Audio_MAL_IRQHandler+0xf8>)
 8002ff4:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <Audio_MAL_IRQHandler+0xf0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ffe:	4293      	cmp	r3, r2
 8003000:	bf28      	it	cs
 8003002:	4613      	movcs	r3, r2
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <Audio_MAL_IRQHandler+0xf8>)
 8003006:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <Audio_MAL_IRQHandler+0xe8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4924      	ldr	r1, [pc, #144]	; (80030a0 <Audio_MAL_IRQHandler+0xf8>)
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fdb2 	bl	8000b78 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003014:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <Audio_MAL_IRQHandler+0xe8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fe02 	bl	8000c24 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <Audio_MAL_IRQHandler+0xf4>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <Audio_MAL_IRQHandler+0xf0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d203      	bcs.n	8003036 <Audio_MAL_IRQHandler+0x8e>
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <Audio_MAL_IRQHandler+0xf0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	e000      	b.n	8003038 <Audio_MAL_IRQHandler+0x90>
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <Audio_MAL_IRQHandler+0xfc>)
 8003038:	4413      	add	r3, r2
 800303a:	4a18      	ldr	r2, [pc, #96]	; (800309c <Audio_MAL_IRQHandler+0xf4>)
 800303c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 800303e:	4b16      	ldr	r3, [pc, #88]	; (8003098 <Audio_MAL_IRQHandler+0xf0>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <Audio_MAL_IRQHandler+0xf0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800304a:	428b      	cmp	r3, r1
 800304c:	bf28      	it	cs
 800304e:	460b      	movcs	r3, r1
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	4a11      	ldr	r2, [pc, #68]	; (8003098 <Audio_MAL_IRQHandler+0xf0>)
 8003054:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <Audio_MAL_IRQHandler+0xe8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fde1 	bl	8000c24 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8003062:	e013      	b.n	800308c <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <Audio_MAL_IRQHandler+0xe8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fdda 	bl	8000c24 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <Audio_MAL_IRQHandler+0xe8>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <Audio_MAL_IRQHandler+0xec>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7fd fe3e 	bl	8000cfc <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <Audio_MAL_IRQHandler+0xf4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fce3 	bl	8003a52 <EVAL_AUDIO_TransferComplete_CallBack>
}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2000001c 	.word	0x2000001c
 8003094:	20000020 	.word	0x20000020
 8003098:	20000014 	.word	0x20000014
 800309c:	20017cc0 	.word	0x20017cc0
 80030a0:	20017d00 	.word	0x20017d00
 80030a4:	0001fffe 	.word	0x0001fffe

080030a8 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80030ac:	f7ff ff7c 	bl	8002fa8 <Audio_MAL_IRQHandler>
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80030b8:	f7ff ff76 	bl	8002fa8 <Audio_MAL_IRQHandler>
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80030c4:	2102      	movs	r1, #2
 80030c6:	480d      	ldr	r0, [pc, #52]	; (80030fc <SPI3_IRQHandler+0x3c>)
 80030c8:	f7fe f8ea 	bl	80012a0 <SPI_I2S_GetFlagStatus>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d011      	beq.n	80030f6 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <SPI3_IRQHandler+0x40>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d106      	bne.n	80030e8 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80030da:	f000 fcc4 	bl	8003a66 <EVAL_AUDIO_GetSampleCallBack>
 80030de:	4603      	mov	r3, r0
 80030e0:	4619      	mov	r1, r3
 80030e2:	2004      	movs	r0, #4
 80030e4:	f7fd fc5c 	bl	80009a0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80030e8:	f000 fcbd 	bl	8003a66 <EVAL_AUDIO_GetSampleCallBack>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4619      	mov	r1, r3
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <SPI3_IRQHandler+0x3c>)
 80030f2:	f7fe f8c7 	bl	8001284 <SPI_I2S_SendData>
  }
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40003c00 	.word	0x40003c00
 8003100:	20000018 	.word	0x20000018

08003104 <_ZN2IO5writeEPc>:

//--------------------------------------------------------------
// IO::write()
//--------------------------------------------------------------
void write(char *text_out)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	UART::write(text_out);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe fd1f 	bl	8001b50 <write>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_ZN2IO4readEPc>:

//--------------------------------------------------------------
// IO::read()
//--------------------------------------------------------------
int read(char *buf)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
	return UART::read(buf);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe fd30 	bl	8001b88 <read>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_ZN2IO9stop_ReadEv>:

//--------------------------------------------------------------
// IO::stop_Read()
//--------------------------------------------------------------
void stop_Read()
{
 8003132:	b580      	push	{r7, lr}
 8003134:	af00      	add	r7, sp, #0
	UART::stop_Read();
 8003136:	f7fe fd79 	bl	8001c2c <stop_Read>
	return;
 800313a:	bf00      	nop
}
 800313c:	bd80      	pop	{r7, pc}

0800313e <_ZN2IO7init_IOEv>:

//--------------------------------------------------------------
// Initiate the IO-layer
//--------------------------------------------------------------
void init_IO()
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
	UART::init_UART2();
 8003142:	f7fe fce7 	bl	8001b14 <init_UART2>
	//UART::init_IDLE_Line();
	return;
 8003146:	bf00      	nop
}
 8003148:	bd80      	pop	{r7, pc}

0800314a <_ZN2LL7logic_tC1Ev>:
	Vgascreen screen;					/**< The Vgascreen object. */
	volatile int waiting;				/**< The waiting FLAG. */
	volatile int bufferIndex;			/**< Integer for the current command. */
	volatile int bufferCnt;				/**< Amount of commands buffered. */
	command_t buffers[MAX_BUFFERS];		/**< Buffer for the commands. */
}logic_t;
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fecf 	bl	8001ef8 <_ZN9VgascreenC1Ev>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_ZN9VgascreenaSERKS_>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } };

/*!
 * \brief de VGA class
 */
class Vgascreen
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
	...

0800318c <_ZN2LL7init_LLEv>:

//--------------------------------------------------------------
// Initiate logicLevel
//--------------------------------------------------------------
void init_LL()
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
	// TODO Auto-generated constructor stub
	logic.screen = Vgascreen();
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe feaf 	bl	8001ef8 <_ZN9VgascreenC1Ev>
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	4619      	mov	r1, r3
 800319e:	480b      	ldr	r0, [pc, #44]	; (80031cc <_ZN2LL7init_LLEv+0x40>)
 80031a0:	f7ff ffe0 	bl	8003164 <_ZN9VgascreenaSERKS_>
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe feb8 	bl	8001f1c <_ZN9VgascreenD1Ev>
	logic.waiting = RESET;
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <_ZN2LL7init_LLEv+0x40>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
	logic.bufferIndex = RESET;
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <_ZN2LL7init_LLEv+0x40>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]
	logic.bufferCnt = RESET;
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <_ZN2LL7init_LLEv+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	615a      	str	r2, [r3, #20]
	init_TIM5();				//init TIM5 for the wait function.
 80031be:	f000 f807 	bl	80031d0 <init_TIM5>

	return;
 80031c2:	bf00      	nop
}
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20012fc4 	.word	0x20012fc4

080031d0 <init_TIM5>:

//--------------------------------------------------------------
// Initiate TIM5
//--------------------------------------------------------------
void init_TIM5()
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
	//Enable the TIM5 system clock.
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 80031d6:	2101      	movs	r1, #1
 80031d8:	2008      	movs	r0, #8
 80031da:	f7fe f817 	bl	800120c <RCC_APB1PeriphClockCmd>

	//Set the TIM5 settings
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = TIM5_PRESCALE;
 80031de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031e2:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80031e4:	2300      	movs	r3, #0
 80031e6:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = TIM5_PERIOD;
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <init_TIM5+0x68>)
 80031ea:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80031ec:	2300      	movs	r3, #0
 80031ee:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_RepetitionCounter = TIM5_REP;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73bb      	strb	r3, [r7, #14]
	TIM_TimeBaseInit(TIM5, &timerInitStructure);
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	4619      	mov	r1, r3
 80031f8:	4810      	ldr	r0, [pc, #64]	; (800323c <init_TIM5+0x6c>)
 80031fa:	f7fe f86d 	bl	80012d8 <TIM_TimeBaseInit>

	TIM5->CNT = RESET;		//Reset the counter.
 80031fe:	4b0f      	ldr	r3, [pc, #60]	; (800323c <init_TIM5+0x6c>)
 8003200:	2200      	movs	r2, #0
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->SR = ~(TIM_FLAG_Update);	//Update the flag.
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <init_TIM5+0x6c>)
 8003206:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800320a:	821a      	strh	r2, [r3, #16]

	//Enable interrupts
	TIM_ITConfig(TIM5, TIM_IT_Update, ENABLE);
 800320c:	2201      	movs	r2, #1
 800320e:	2101      	movs	r1, #1
 8003210:	480a      	ldr	r0, [pc, #40]	; (800323c <init_TIM5+0x6c>)
 8003212:	f7fe fa2d 	bl	8001670 <TIM_ITConfig>

	//Set interrupt handler for TIM5
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8003216:	2332      	movs	r3, #50	; 0x32
 8003218:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = LOW_PRIORITY;
 800321a:	2300      	movs	r3, #0
 800321c:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = LOW_PRIORITY;
 800321e:	2300      	movs	r3, #0
 8003220:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8003222:	2301      	movs	r3, #1
 8003224:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 8003226:	463b      	mov	r3, r7
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fb57 	bl	80008dc <NVIC_Init>


	return;	//Return
 800322e:	bf00      	nop
}
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	00014820 	.word	0x00014820
 800323c:	40000c00 	.word	0x40000c00

08003240 <_ZN2LL4execEv>:

//--------------------------------------------------------------
// Execute command or command buffer.
//--------------------------------------------------------------
int exec()
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b092      	sub	sp, #72	; 0x48
 8003244:	af06      	add	r7, sp, #24
	//Local variables
	char *str;		//Local string to check with.
	int a, b, c, d, e, f, g;		//Integers to save the strtol() values.
	int i = 0;						//while loop counter.
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
	int err = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
	int color;//Integer to save the color value.
	int fill;

	//Execute commands as long as the index+i is below the bufferCnt and if the waiting flag isnt set.
	while(i+logic.bufferIndex<logic.bufferCnt && logic.waiting == 0)
 800324e:	4ba1      	ldr	r3, [pc, #644]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	441a      	add	r2, r3
 8003256:	4b9f      	ldr	r3, [pc, #636]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	429a      	cmp	r2, r3
 800325c:	da05      	bge.n	800326a <_ZN2LL4execEv+0x2a>
 800325e:	4b9d      	ldr	r3, [pc, #628]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <_ZN2LL4execEv+0x2a>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <_ZN2LL4execEv+0x2c>
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 81e6 	beq.w	800363e <_ZN2LL4execEv+0x3fe>
	{
		str = logic.buffers[i+logic.bufferIndex].type;
 8003272:	4b98      	ldr	r3, [pc, #608]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	4413      	add	r3, r2
 800327a:	22a4      	movs	r2, #164	; 0xa4
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	3318      	adds	r3, #24
 8003282:	4a94      	ldr	r2, [pc, #592]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003284:	4413      	add	r3, r2
 8003286:	627b      	str	r3, [r7, #36]	; 0x24

		if (strcmp(str, "clearscherm") == 0)			//Command without int.
 8003288:	4993      	ldr	r1, [pc, #588]	; (80034d8 <_ZN2LL4execEv+0x298>)
 800328a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800328c:	f7fc ff9c 	bl	80001c8 <strcmp>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d113      	bne.n	80032be <_ZN2LL4execEv+0x7e>
		{
			color = color_To_Int(logic.buffers[i+logic.bufferIndex].input1);		//Get the color value.
 8003296:	4b8f      	ldr	r3, [pc, #572]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	4413      	add	r3, r2
 800329e:	22a4      	movs	r2, #164	; 0xa4
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	3320      	adds	r3, #32
 80032a6:	4a8b      	ldr	r2, [pc, #556]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80032a8:	4413      	add	r3, r2
 80032aa:	3307      	adds	r3, #7
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 faf1 	bl	8003894 <_ZN2LL12color_To_IntEPc>
 80032b2:	6238      	str	r0, [r7, #32]
			logic.screen.clear_screen(color);									//Clear the screen.
 80032b4:	6a39      	ldr	r1, [r7, #32]
 80032b6:	4887      	ldr	r0, [pc, #540]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80032b8:	f7ff fc00 	bl	8002abc <_ZN9Vgascreen12clear_screenEi>
 80032bc:	e1bb      	b.n	8003636 <_ZN2LL4execEv+0x3f6>
		}else if(strcmp(str, "repeat") == 0)
 80032be:	4987      	ldr	r1, [pc, #540]	; (80034dc <_ZN2LL4execEv+0x29c>)
 80032c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032c2:	f7fc ff81 	bl	80001c8 <strcmp>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d115      	bne.n	80032f8 <_ZN2LL4execEv+0xb8>
		{
			//Only repeat if repat is the last input given.
			//This way its possible to cancel the repeat loop by sending a new command.
			if (i+logic.bufferIndex == logic.bufferCnt-1)
 80032cc:	4b81      	ldr	r3, [pc, #516]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	441a      	add	r2, r3
 80032d4:	4b7f      	ldr	r3, [pc, #508]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	3b01      	subs	r3, #1
 80032da:	429a      	cmp	r2, r3
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 81a6 	beq.w	8003636 <_ZN2LL4execEv+0x3f6>
			{
				logic.bufferIndex = 0;		//Reset the bufferIndex
 80032ea:	4b7a      	ldr	r3, [pc, #488]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
				exec();					//Exec the first command. (Should be a wait ("wacht"))
 80032f0:	f7ff ffa6 	bl	8003240 <_ZN2LL4execEv>
				return 0;				//Done here, return to finish the wait.
 80032f4:	2300      	movs	r3, #0
 80032f6:	e1ba      	b.n	800366e <_ZN2LL4execEv+0x42e>
			}
		}
		else							//Command with 1x int.
		{
			a = (int) strtol(logic.buffers[i+logic.bufferIndex].input1, NULL, 10);		//set int a as (int)input1
 80032f8:	4b76      	ldr	r3, [pc, #472]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	4413      	add	r3, r2
 8003300:	22a4      	movs	r2, #164	; 0xa4
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	3320      	adds	r3, #32
 8003308:	4a72      	ldr	r2, [pc, #456]	; (80034d4 <_ZN2LL4execEv+0x294>)
 800330a:	4413      	add	r3, r2
 800330c:	3307      	adds	r3, #7
 800330e:	220a      	movs	r2, #10
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fcf2 	bl	8003cfc <strtol>
 8003318:	61f8      	str	r0, [r7, #28]
			if (strcmp(str, "wacht") == 0)
 800331a:	4971      	ldr	r1, [pc, #452]	; (80034e0 <_ZN2LL4execEv+0x2a0>)
 800331c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800331e:	f7fc ff53 	bl	80001c8 <strcmp>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d106      	bne.n	8003336 <_ZN2LL4execEv+0xf6>
			{
				wait_Ms(a);									// wait a ms.
 8003328:	69f8      	ldr	r0, [r7, #28]
 800332a:	f000 fa8f 	bl	800384c <wait_Ms>
				i++;										//Increase i to not get stuck in an endless loop of waiting.
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	3301      	adds	r3, #1
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003334:	e17f      	b.n	8003636 <_ZN2LL4execEv+0x3f6>
			}
			else										//Command with 2x int.
			{
				b = (int) strtol(logic.buffers[i+logic.bufferIndex].input2, NULL, 10);		//set int b as strtol(input2)
 8003336:	4b67      	ldr	r3, [pc, #412]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	4413      	add	r3, r2
 800333e:	22a4      	movs	r2, #164	; 0xa4
 8003340:	fb02 f303 	mul.w	r3, r2, r3
 8003344:	3330      	adds	r3, #48	; 0x30
 8003346:	4a63      	ldr	r2, [pc, #396]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003348:	4413      	add	r3, r2
 800334a:	3306      	adds	r3, #6
 800334c:	220a      	movs	r2, #10
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fcd3 	bl	8003cfc <strtol>
 8003356:	61b8      	str	r0, [r7, #24]
				if (strcmp(str, "tekst") == 0)
 8003358:	4962      	ldr	r1, [pc, #392]	; (80034e4 <_ZN2LL4execEv+0x2a4>)
 800335a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800335c:	f7fc ff34 	bl	80001c8 <strcmp>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d141      	bne.n	80033ea <_ZN2LL4execEv+0x1aa>
				{
					color = color_To_Int(logic.buffers[i+logic.bufferIndex].input4);
 8003366:	4b5b      	ldr	r3, [pc, #364]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	4413      	add	r3, r2
 800336e:	22a4      	movs	r2, #164	; 0xa4
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	3378      	adds	r3, #120	; 0x78
 8003376:	4a57      	ldr	r2, [pc, #348]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003378:	4413      	add	r3, r2
 800337a:	3304      	adds	r3, #4
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fa89 	bl	8003894 <_ZN2LL12color_To_IntEPc>
 8003382:	6238      	str	r0, [r7, #32]
					g = (int) strtol(logic.buffers[i+logic.bufferIndex].input6, NULL, 10);
 8003384:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	4413      	add	r3, r2
 800338c:	22a4      	movs	r2, #164	; 0xa4
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	3398      	adds	r3, #152	; 0x98
 8003394:	4a4f      	ldr	r2, [pc, #316]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003396:	4413      	add	r3, r2
 8003398:	3302      	adds	r3, #2
 800339a:	220a      	movs	r2, #10
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fcac 	bl	8003cfc <strtol>
 80033a4:	6178      	str	r0, [r7, #20]

					//Draw text on the screen.
					logic.screen.draw_text(a, b, logic.buffers[i+logic.bufferIndex].input3, color, logic.buffers[i+logic.bufferIndex].input5,
 80033a6:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	4413      	add	r3, r2
 80033ae:	22a4      	movs	r2, #164	; 0xa4
 80033b0:	fb02 f303 	mul.w	r3, r2, r3
 80033b4:	3338      	adds	r3, #56	; 0x38
 80033b6:	4a47      	ldr	r2, [pc, #284]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80033b8:	4413      	add	r3, r2
 80033ba:	1d19      	adds	r1, r3, #4
 80033bc:	4b45      	ldr	r3, [pc, #276]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	4413      	add	r3, r2
 80033c4:	22a4      	movs	r2, #164	; 0xa4
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	3388      	adds	r3, #136	; 0x88
 80033cc:	4a41      	ldr	r2, [pc, #260]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80033ce:	4413      	add	r3, r2
 80033d0:	3303      	adds	r3, #3
							g);
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	9202      	str	r2, [sp, #8]
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	460b      	mov	r3, r1
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	69f9      	ldr	r1, [r7, #28]
 80033e2:	483c      	ldr	r0, [pc, #240]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80033e4:	f7ff fb2e 	bl	8002a44 <_ZN9Vgascreen9draw_textEiiPKciS1_i>
 80033e8:	e125      	b.n	8003636 <_ZN2LL4execEv+0x3f6>
				}
				else									//Commands with 3x int.
				{
					c = (int) strtol(logic.buffers[i+logic.bufferIndex].input3, NULL, 10);
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	4413      	add	r3, r2
 80033f2:	22a4      	movs	r2, #164	; 0xa4
 80033f4:	fb02 f303 	mul.w	r3, r2, r3
 80033f8:	3338      	adds	r3, #56	; 0x38
 80033fa:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80033fc:	4413      	add	r3, r2
 80033fe:	3304      	adds	r3, #4
 8003400:	220a      	movs	r2, #10
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fc79 	bl	8003cfc <strtol>
 800340a:	6138      	str	r0, [r7, #16]
					if (strcmp(str, "bitmap") == 0)
 800340c:	4936      	ldr	r1, [pc, #216]	; (80034e8 <_ZN2LL4execEv+0x2a8>)
 800340e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003410:	f7fc feda 	bl	80001c8 <strcmp>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <_ZN2LL4execEv+0x1e8>
					{
						//Draw bitmap
						logic.screen.draw_bitmap(a, b, c);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	69f9      	ldr	r1, [r7, #28]
 8003420:	482c      	ldr	r0, [pc, #176]	; (80034d4 <_ZN2LL4execEv+0x294>)
 8003422:	f7ff f9dd 	bl	80027e0 <_ZN9Vgascreen11draw_bitmapEiii>
 8003426:	e106      	b.n	8003636 <_ZN2LL4execEv+0x3f6>
					}
					else								//Commands with 4x int.
					{
						d = (int) strtol(logic.buffers[i+logic.bufferIndex].input4, NULL, 10);
 8003428:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <_ZN2LL4execEv+0x294>)
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	4413      	add	r3, r2
 8003430:	22a4      	movs	r2, #164	; 0xa4
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	3378      	adds	r3, #120	; 0x78
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <_ZN2LL4execEv+0x294>)
 800343a:	4413      	add	r3, r2
 800343c:	3304      	adds	r3, #4
 800343e:	220a      	movs	r2, #10
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fc5a 	bl	8003cfc <strtol>
 8003448:	60f8      	str	r0, [r7, #12]
						e = (int) strtol(logic.buffers[i+logic.bufferIndex].input6, NULL, 10);
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <_ZN2LL4execEv+0x294>)
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	4413      	add	r3, r2
 8003452:	22a4      	movs	r2, #164	; 0xa4
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	3398      	adds	r3, #152	; 0x98
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <_ZN2LL4execEv+0x294>)
 800345c:	4413      	add	r3, r2
 800345e:	3302      	adds	r3, #2
 8003460:	220a      	movs	r2, #10
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fc49 	bl	8003cfc <strtol>
 800346a:	60b8      	str	r0, [r7, #8]
						color = color_To_Int(logic.buffers[i+logic.bufferIndex].input5);
 800346c:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <_ZN2LL4execEv+0x294>)
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	4413      	add	r3, r2
 8003474:	22a4      	movs	r2, #164	; 0xa4
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	3388      	adds	r3, #136	; 0x88
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <_ZN2LL4execEv+0x294>)
 800347e:	4413      	add	r3, r2
 8003480:	3303      	adds	r3, #3
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fa06 	bl	8003894 <_ZN2LL12color_To_IntEPc>
 8003488:	6238      	str	r0, [r7, #32]
						if (strcmp(str, "rechthoek") == 0)
 800348a:	4918      	ldr	r1, [pc, #96]	; (80034ec <_ZN2LL4execEv+0x2ac>)
 800348c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800348e:	f7fc fe9b 	bl	80001c8 <strcmp>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d12b      	bne.n	80034f0 <_ZN2LL4execEv+0x2b0>
						{
							fill = (int) strtol(logic.buffers[i+logic.bufferIndex].input6, NULL, 10);
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <_ZN2LL4execEv+0x294>)
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	4413      	add	r3, r2
 80034a0:	22a4      	movs	r2, #164	; 0xa4
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	3398      	adds	r3, #152	; 0x98
 80034a8:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80034aa:	4413      	add	r3, r2
 80034ac:	3302      	adds	r3, #2
 80034ae:	220a      	movs	r2, #10
 80034b0:	2100      	movs	r1, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fc22 	bl	8003cfc <strtol>
 80034b8:	6078      	str	r0, [r7, #4]

							//Draw rectangle
							logic.screen.draw_rectangle(a, b, c, d, color, fill);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	69f9      	ldr	r1, [r7, #28]
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <_ZN2LL4execEv+0x294>)
 80034ce:	f7fe ff9c 	bl	800240a <_ZN9Vgascreen14draw_rectangleEiiiiii>
 80034d2:	e0b0      	b.n	8003636 <_ZN2LL4execEv+0x3f6>
 80034d4:	20012fc4 	.word	0x20012fc4
 80034d8:	08003e20 	.word	0x08003e20
 80034dc:	08003e2c 	.word	0x08003e2c
 80034e0:	08003e34 	.word	0x08003e34
 80034e4:	08003e3c 	.word	0x08003e3c
 80034e8:	08003e44 	.word	0x08003e44
 80034ec:	08003e4c 	.word	0x08003e4c
						}
						else if (strcmp(str, "ellips") == 0)
 80034f0:	4961      	ldr	r1, [pc, #388]	; (8003678 <_ZN2LL4execEv+0x438>)
 80034f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034f4:	f7fc fe68 	bl	80001c8 <strcmp>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11d      	bne.n	800353a <_ZN2LL4execEv+0x2fa>
						{
							fill = (int) strtol(logic.buffers[i+logic.bufferIndex].input6, NULL, 10);
 80034fe:	4b5f      	ldr	r3, [pc, #380]	; (800367c <_ZN2LL4execEv+0x43c>)
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	4413      	add	r3, r2
 8003506:	22a4      	movs	r2, #164	; 0xa4
 8003508:	fb02 f303 	mul.w	r3, r2, r3
 800350c:	3398      	adds	r3, #152	; 0x98
 800350e:	4a5b      	ldr	r2, [pc, #364]	; (800367c <_ZN2LL4execEv+0x43c>)
 8003510:	4413      	add	r3, r2
 8003512:	3302      	adds	r3, #2
 8003514:	220a      	movs	r2, #10
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fbef 	bl	8003cfc <strtol>
 800351e:	6078      	str	r0, [r7, #4]
							//Draw ellipse
							logic.screen.draw_ellipse(a, b, c, d, color, fill);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	9302      	str	r3, [sp, #8]
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	69f9      	ldr	r1, [r7, #28]
 8003532:	4852      	ldr	r0, [pc, #328]	; (800367c <_ZN2LL4execEv+0x43c>)
 8003534:	f7fe fde2 	bl	80020fc <_ZN9Vgascreen12draw_ellipseEiiiiii>
 8003538:	e07d      	b.n	8003636 <_ZN2LL4execEv+0x3f6>
						}
						else							//Commands with 5x int.
						{
							e = (int) strtol(logic.buffers[i+logic.bufferIndex].input5, NULL, 10);
 800353a:	4b50      	ldr	r3, [pc, #320]	; (800367c <_ZN2LL4execEv+0x43c>)
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	4413      	add	r3, r2
 8003542:	22a4      	movs	r2, #164	; 0xa4
 8003544:	fb02 f303 	mul.w	r3, r2, r3
 8003548:	3388      	adds	r3, #136	; 0x88
 800354a:	4a4c      	ldr	r2, [pc, #304]	; (800367c <_ZN2LL4execEv+0x43c>)
 800354c:	4413      	add	r3, r2
 800354e:	3303      	adds	r3, #3
 8003550:	220a      	movs	r2, #10
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fbd1 	bl	8003cfc <strtol>
 800355a:	60b8      	str	r0, [r7, #8]
							if (strcmp(str, "lijn") == 0)
 800355c:	4948      	ldr	r1, [pc, #288]	; (8003680 <_ZN2LL4execEv+0x440>)
 800355e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003560:	f7fc fe32 	bl	80001c8 <strcmp>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11b      	bne.n	80035a2 <_ZN2LL4execEv+0x362>
							{
								color = color_To_Int(logic.buffers[i+logic.bufferIndex].input6);
 800356a:	4b44      	ldr	r3, [pc, #272]	; (800367c <_ZN2LL4execEv+0x43c>)
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	4413      	add	r3, r2
 8003572:	22a4      	movs	r2, #164	; 0xa4
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	3398      	adds	r3, #152	; 0x98
 800357a:	4a40      	ldr	r2, [pc, #256]	; (800367c <_ZN2LL4execEv+0x43c>)
 800357c:	4413      	add	r3, r2
 800357e:	3302      	adds	r3, #2
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f987 	bl	8003894 <_ZN2LL12color_To_IntEPc>
 8003586:	6238      	str	r0, [r7, #32]
								//Draw line
								logic.screen.draw_line(a, b, c, d, e, color);
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	9302      	str	r3, [sp, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	69f9      	ldr	r1, [r7, #28]
 800359a:	4838      	ldr	r0, [pc, #224]	; (800367c <_ZN2LL4execEv+0x43c>)
 800359c:	f7fe fceb 	bl	8001f76 <_ZN9Vgascreen9draw_lineEiiiiii>
 80035a0:	e049      	b.n	8003636 <_ZN2LL4execEv+0x3f6>
							}
							else						//Commands with 6x int.
							{
								if (strcmp(str, "driehoek") == 0)
 80035a2:	4938      	ldr	r1, [pc, #224]	; (8003684 <_ZN2LL4execEv+0x444>)
 80035a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035a6:	f7fc fe0f 	bl	80001c8 <strcmp>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d140      	bne.n	8003632 <_ZN2LL4execEv+0x3f2>
								{
									f = (int) strtol(logic.buffers[i+logic.bufferIndex].input6, NULL, 10);
 80035b0:	4b32      	ldr	r3, [pc, #200]	; (800367c <_ZN2LL4execEv+0x43c>)
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	4413      	add	r3, r2
 80035b8:	22a4      	movs	r2, #164	; 0xa4
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	3398      	adds	r3, #152	; 0x98
 80035c0:	4a2e      	ldr	r2, [pc, #184]	; (800367c <_ZN2LL4execEv+0x43c>)
 80035c2:	4413      	add	r3, r2
 80035c4:	3302      	adds	r3, #2
 80035c6:	220a      	movs	r2, #10
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fb96 	bl	8003cfc <strtol>
 80035d0:	6038      	str	r0, [r7, #0]
									fill = (int) strtol(logic.buffers[i+logic.bufferIndex].input8, NULL, 10);
 80035d2:	4b2a      	ldr	r3, [pc, #168]	; (800367c <_ZN2LL4execEv+0x43c>)
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	4413      	add	r3, r2
 80035da:	22a4      	movs	r2, #164	; 0xa4
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	33b8      	adds	r3, #184	; 0xb8
 80035e2:	4a26      	ldr	r2, [pc, #152]	; (800367c <_ZN2LL4execEv+0x43c>)
 80035e4:	4413      	add	r3, r2
 80035e6:	220a      	movs	r2, #10
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fb86 	bl	8003cfc <strtol>
 80035f0:	6078      	str	r0, [r7, #4]
									color = color_To_Int(logic.buffers[i+logic.bufferIndex].input7);
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <_ZN2LL4execEv+0x43c>)
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	4413      	add	r3, r2
 80035fa:	22a4      	movs	r2, #164	; 0xa4
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	33a8      	adds	r3, #168	; 0xa8
 8003602:	4a1e      	ldr	r2, [pc, #120]	; (800367c <_ZN2LL4execEv+0x43c>)
 8003604:	4413      	add	r3, r2
 8003606:	3301      	adds	r3, #1
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f943 	bl	8003894 <_ZN2LL12color_To_IntEPc>
 800360e:	6238      	str	r0, [r7, #32]

									//Draw traingle
									logic.screen.draw_triangle(a, b, c, d, e, f,
											color, fill);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	9303      	str	r3, [sp, #12]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	69f9      	ldr	r1, [r7, #28]
 800362a:	4814      	ldr	r0, [pc, #80]	; (800367c <_ZN2LL4execEv+0x43c>)
 800362c:	f7fe ff41 	bl	80024b2 <_ZN9Vgascreen13draw_triangleEiiiiiiii>
 8003630:	e001      	b.n	8003636 <_ZN2LL4execEv+0x3f6>
								}else
								{
									err = TYPE_NOT_FOUND;
 8003632:	230b      	movs	r3, #11
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
						}	//With 5x int.
					}	//With 4x int.
				}	//With 3x int.
			}	//With 2x int.
		}	//With 1x int.
		i++;		//Increase i
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	3301      	adds	r3, #1
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i+logic.bufferIndex<logic.bufferCnt && logic.waiting == 0)
 800363c:	e607      	b.n	800324e <_ZN2LL4execEv+0xe>
	}	//While loop.

	// If finished with executing commands.
	//if waiting = 0 all commands are executed and the buffer can be reseted.
	//Else save the bufferIndex + i - 1. To execute the next command if the wait is over.
	if(logic.waiting == 0)
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <_ZN2LL4execEv+0x43c>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d006      	beq.n	800365e <_ZN2LL4execEv+0x41e>
	{
		logic.bufferIndex = RESET;
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <_ZN2LL4execEv+0x43c>)
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
		logic.bufferCnt = RESET;
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <_ZN2LL4execEv+0x43c>)
 8003658:	2200      	movs	r2, #0
 800365a:	615a      	str	r2, [r3, #20]
 800365c:	e006      	b.n	800366c <_ZN2LL4execEv+0x42c>
	}else
	{
		logic.bufferIndex = logic.bufferIndex + i-1;
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <_ZN2LL4execEv+0x43c>)
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	4413      	add	r3, r2
 8003666:	3b01      	subs	r3, #1
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <_ZN2LL4execEv+0x43c>)
 800366a:	6113      	str	r3, [r2, #16]
	}
	return err;
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}	//exec
 800366e:	4618      	mov	r0, r3
 8003670:	3730      	adds	r7, #48	; 0x30
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08003e58 	.word	0x08003e58
 800367c:	20012fc4 	.word	0x20012fc4
 8003680:	08003e60 	.word	0x08003e60
 8003684:	08003e68 	.word	0x08003e68

08003688 <_ZN2LL11set_CommandEPc>:

//--------------------------------------------------------------
// Set the command
//--------------------------------------------------------------
int set_Command(char *buf)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b0a0      	sub	sp, #128	; 0x80
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	//Local variables
	int i = 1;
 8003690:	2301      	movs	r3, #1
 8003692:	67fb      	str	r3, [r7, #124]	; 0x7c
	char str[BUFFER_LENGTH];			//Make string
	strcpy(str, buf);		//Copy the input
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fa7a 	bl	8003b94 <strcpy>
	char *saveptr;			//Needed for the strtok_r
	char *out;				//Output string
	int err = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	677b      	str	r3, [r7, #116]	; 0x74

	//Check if maximum number of buffers are in use.
	if(logic.bufferCnt >= MAX_BUFFERS)
 80036a4:	4b67      	ldr	r3, [pc, #412]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	2b77      	cmp	r3, #119	; 0x77
 80036aa:	bfcc      	ite	gt
 80036ac:	2301      	movgt	r3, #1
 80036ae:	2300      	movle	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <_ZN2LL11set_CommandEPc+0x38>
	{
		logic.bufferCnt = RESET;
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	615a      	str	r2, [r3, #20]
		err = BUFFER_RESET;
 80036bc:	230c      	movs	r3, #12
 80036be:	677b      	str	r3, [r7, #116]	; 0x74
	}

	// Get first word of the sentence. splitted by ","
	out = strtok_r(str, ",", &saveptr);
 80036c0:	f107 020c 	add.w	r2, r7, #12
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	495f      	ldr	r1, [pc, #380]	; (8003848 <_ZN2LL11set_CommandEPc+0x1c0>)
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fa93 	bl	8003bf6 <strtok_r>
 80036d0:	67b8      	str	r0, [r7, #120]	; 0x78
	strcpy(logic.buffers[logic.bufferCnt].type, out);
 80036d2:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	22a4      	movs	r2, #164	; 0xa4
 80036d8:	fb02 f303 	mul.w	r3, r2, r3
 80036dc:	3318      	adds	r3, #24
 80036de:	4a59      	ldr	r2, [pc, #356]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80036e0:	4413      	add	r3, r2
 80036e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fa55 	bl	8003b94 <strcpy>

	//Loop through the rest of the sentence and save it inside a command.
	while (out != NULL)
 80036ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8092 	beq.w	8003816 <_ZN2LL11set_CommandEPc+0x18e>
	{
		out = strtok_r(NULL, ",", &saveptr);
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	461a      	mov	r2, r3
 80036f8:	4953      	ldr	r1, [pc, #332]	; (8003848 <_ZN2LL11set_CommandEPc+0x1c0>)
 80036fa:	2000      	movs	r0, #0
 80036fc:	f000 fa7b 	bl	8003bf6 <strtok_r>
 8003700:	67b8      	str	r0, [r7, #120]	; 0x78

		if(i==1){
 8003702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10d      	bne.n	8003724 <_ZN2LL11set_CommandEPc+0x9c>
			strcpy(logic.buffers[logic.bufferCnt].input1, out);
 8003708:	4b4e      	ldr	r3, [pc, #312]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	22a4      	movs	r2, #164	; 0xa4
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	3320      	adds	r3, #32
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 8003716:	4413      	add	r3, r2
 8003718:	3307      	adds	r3, #7
 800371a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fa39 	bl	8003b94 <strcpy>
 8003722:	e074      	b.n	800380e <_ZN2LL11set_CommandEPc+0x186>
		}else if(i==2)
 8003724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003726:	2b02      	cmp	r3, #2
 8003728:	d10d      	bne.n	8003746 <_ZN2LL11set_CommandEPc+0xbe>
		{
			strcpy(logic.buffers[logic.bufferCnt].input2, out);
 800372a:	4b46      	ldr	r3, [pc, #280]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	22a4      	movs	r2, #164	; 0xa4
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	3330      	adds	r3, #48	; 0x30
 8003736:	4a43      	ldr	r2, [pc, #268]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 8003738:	4413      	add	r3, r2
 800373a:	3306      	adds	r3, #6
 800373c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fa28 	bl	8003b94 <strcpy>
 8003744:	e063      	b.n	800380e <_ZN2LL11set_CommandEPc+0x186>
		}else if(i==3)
 8003746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003748:	2b03      	cmp	r3, #3
 800374a:	d10d      	bne.n	8003768 <_ZN2LL11set_CommandEPc+0xe0>
		{
			strcpy(logic.buffers[logic.bufferCnt].input3, out);
 800374c:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	22a4      	movs	r2, #164	; 0xa4
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	3338      	adds	r3, #56	; 0x38
 8003758:	4a3a      	ldr	r2, [pc, #232]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fa17 	bl	8003b94 <strcpy>
 8003766:	e052      	b.n	800380e <_ZN2LL11set_CommandEPc+0x186>
		}else if(i==4)
 8003768:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800376a:	2b04      	cmp	r3, #4
 800376c:	d10d      	bne.n	800378a <_ZN2LL11set_CommandEPc+0x102>
		{
			strcpy(logic.buffers[logic.bufferCnt].input4, out);
 800376e:	4b35      	ldr	r3, [pc, #212]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	22a4      	movs	r2, #164	; 0xa4
 8003774:	fb02 f303 	mul.w	r3, r2, r3
 8003778:	3378      	adds	r3, #120	; 0x78
 800377a:	4a32      	ldr	r2, [pc, #200]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fa06 	bl	8003b94 <strcpy>
 8003788:	e041      	b.n	800380e <_ZN2LL11set_CommandEPc+0x186>
		}else if(i==5)
 800378a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800378c:	2b05      	cmp	r3, #5
 800378e:	d10d      	bne.n	80037ac <_ZN2LL11set_CommandEPc+0x124>
		{
			strcpy(logic.buffers[logic.bufferCnt].input5, out);
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	22a4      	movs	r2, #164	; 0xa4
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	3388      	adds	r3, #136	; 0x88
 800379c:	4a29      	ldr	r2, [pc, #164]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 800379e:	4413      	add	r3, r2
 80037a0:	3303      	adds	r3, #3
 80037a2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f9f5 	bl	8003b94 <strcpy>
 80037aa:	e030      	b.n	800380e <_ZN2LL11set_CommandEPc+0x186>
		}else if(i==6)
 80037ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d10d      	bne.n	80037ce <_ZN2LL11set_CommandEPc+0x146>
		{
			strcpy(logic.buffers[logic.bufferCnt].input6, out);
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	22a4      	movs	r2, #164	; 0xa4
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	3398      	adds	r3, #152	; 0x98
 80037be:	4a21      	ldr	r2, [pc, #132]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80037c0:	4413      	add	r3, r2
 80037c2:	3302      	adds	r3, #2
 80037c4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f9e4 	bl	8003b94 <strcpy>
 80037cc:	e01f      	b.n	800380e <_ZN2LL11set_CommandEPc+0x186>
		}else if(i==7)
 80037ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037d0:	2b07      	cmp	r3, #7
 80037d2:	d10d      	bne.n	80037f0 <_ZN2LL11set_CommandEPc+0x168>
		{
			strcpy(logic.buffers[logic.bufferCnt].input7, out);
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	22a4      	movs	r2, #164	; 0xa4
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	33a8      	adds	r3, #168	; 0xa8
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80037e2:	4413      	add	r3, r2
 80037e4:	3301      	adds	r3, #1
 80037e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f9d3 	bl	8003b94 <strcpy>
 80037ee:	e00e      	b.n	800380e <_ZN2LL11set_CommandEPc+0x186>
		}else if(i==8)
 80037f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d10b      	bne.n	800380e <_ZN2LL11set_CommandEPc+0x186>
		{
			strcpy(logic.buffers[logic.bufferCnt].input8, out);
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	22a4      	movs	r2, #164	; 0xa4
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	33b8      	adds	r3, #184	; 0xb8
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 8003804:	4413      	add	r3, r2
 8003806:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003808:	4618      	mov	r0, r3
 800380a:	f000 f9c3 	bl	8003b94 <strcpy>
		}

		i++;		//Increase i.
 800380e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003810:	3301      	adds	r3, #1
 8003812:	67fb      	str	r3, [r7, #124]	; 0x7c
	while (out != NULL)
 8003814:	e769      	b.n	80036ea <_ZN2LL11set_CommandEPc+0x62>
	}

	logic.bufferCnt++;				//Increase bufferCnt since new input is filled.
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	3301      	adds	r3, #1
 800381c:	4a09      	ldr	r2, [pc, #36]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 800381e:	6153      	str	r3, [r2, #20]

	// Check the waiting flag. If waiting is SET return. Else exec the command.
	if(logic.waiting == SET){
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <_ZN2LL11set_CommandEPc+0x1bc>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <_ZN2LL11set_CommandEPc+0x1ae>
		return err;
 8003832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003834:	e002      	b.n	800383c <_ZN2LL11set_CommandEPc+0x1b4>
	}else
	{
		;
		return exec();
 8003836:	f7ff fd03 	bl	8003240 <_ZN2LL4execEv>
 800383a:	4603      	mov	r3, r0
	}
}	//set_Command
 800383c:	4618      	mov	r0, r3
 800383e:	3780      	adds	r7, #128	; 0x80
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20012fc4 	.word	0x20012fc4
 8003848:	08003e74 	.word	0x08003e74

0800384c <wait_Ms>:

//--------------------------------------------------------------
// Wait x ms.
//--------------------------------------------------------------
void wait_Ms(int ms)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	//Set waiting flag.
	logic.waiting = SET;
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <wait_Ms+0x40>)
 8003856:	2201      	movs	r2, #1
 8003858:	60da      	str	r2, [r3, #12]

	//Set up TIM5 to interrupt after the wait and start it.
	TIM5->PSC = ms;					//Set prescale to the amount of ms.
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <wait_Ms+0x44>)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	b292      	uxth	r2, r2
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM5->CNT = RESET;				//Reset the counter.
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <wait_Ms+0x44>)
 8003864:	2200      	movs	r2, #0
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5->SR = ~(TIM_FLAG_Update);	//Update flag.
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <wait_Ms+0x44>)
 800386a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800386e:	821a      	strh	r2, [r3, #16]
	TIM5->CR1 |= TIM_CR1_CEN; // start
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <wait_Ms+0x44>)
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <wait_Ms+0x44>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	b29b      	uxth	r3, r3
 800387e:	8013      	strh	r3, [r2, #0]

	//Return normal.
	return;
 8003880:	bf00      	nop
}	//wait_Ms
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20012fc4 	.word	0x20012fc4
 8003890:	40000c00 	.word	0x40000c00

08003894 <_ZN2LL12color_To_IntEPc>:

//--------------------------------------------------------------
// Color name to 8bit color.
//--------------------------------------------------------------
int color_To_Int(char *color)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < COLORS; i++)				//Loop through the color names.
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	dc18      	bgt.n	80038d8 <_ZN2LL12color_To_IntEPc+0x44>
	{
		if (strcmp(color, colors[i]) == 0)			//Check for the right color.
 80038a6:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <_ZN2LL12color_To_IntEPc+0x50>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fc fc89 	bl	80001c8 <strcmp>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <_ZN2LL12color_To_IntEPc+0x3c>
		{
			if(i == 0)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <_ZN2LL12color_To_IntEPc+0x32>
			{
				// Return 0 rgb[0] was giving back '/0'.
				return 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e009      	b.n	80038da <_ZN2LL12color_To_IntEPc+0x46>
			}else
			{
				return rgb[i];	//Return rgb value.
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <_ZN2LL12color_To_IntEPc+0x54>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ce:	e004      	b.n	80038da <_ZN2LL12color_To_IntEPc+0x46>
	for (int i = 0; i < COLORS; i++)				//Loop through the color names.
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3301      	adds	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e7e3      	b.n	80038a0 <_ZN2LL12color_To_IntEPc+0xc>
			}
		}

	}
	return 0;
 80038d8:	2300      	movs	r3, #0
}	// color_To_Int
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000024 	.word	0x20000024
 80038e8:	0800a3ec 	.word	0x0800a3ec

080038ec <TIM5_IRQHandler>:

//--------------------------------------------------------------
// TIM5_IRQhandler
//--------------------------------------------------------------
void TIM5_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM5, TIM_IT_Update)!=RESET)
 80038f0:	2101      	movs	r1, #1
 80038f2:	4813      	ldr	r0, [pc, #76]	; (8003940 <TIM5_IRQHandler+0x54>)
 80038f4:	f7fd fedf 	bl	80016b6 <TIM_GetITStatus>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d018      	beq.n	800393a <TIM5_IRQHandler+0x4e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);	//Clear interrupt flag.
 8003908:	2101      	movs	r1, #1
 800390a:	480d      	ldr	r0, [pc, #52]	; (8003940 <TIM5_IRQHandler+0x54>)
 800390c:	f7fd fefc 	bl	8001708 <TIM_ClearITPendingBit>

		logic.waiting = RESET;	// Clear the waiting flag.
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <TIM5_IRQHandler+0x58>)
 8003912:	2200      	movs	r2, #0
 8003914:	60da      	str	r2, [r3, #12]

		//Update the timer.
		TIM5->CNT = RESET;					//Reset the timer.
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <TIM5_IRQHandler+0x54>)
 8003918:	2200      	movs	r2, #0
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM5->SR = ~(TIM_FLAG_Update);		//Update TIM5 flag.
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <TIM5_IRQHandler+0x54>)
 800391e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003922:	821a      	strh	r2, [r3, #16]
		TIM5->CR1&=~(TIM_CR1_CEN); 			// Stop TIM5.
 8003924:	4a06      	ldr	r2, [pc, #24]	; (8003940 <TIM5_IRQHandler+0x54>)
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <TIM5_IRQHandler+0x54>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	8013      	strh	r3, [r2, #0]
		IO::stop_Read();					//Stop waiting for input and try running the buffered inputs.
 8003934:	f7ff fbfd 	bl	8003132 <_ZN2IO9stop_ReadEv>
		return;
 8003938:	e000      	b.n	800393c <TIM5_IRQHandler+0x50>
	}

	return;
 800393a:	bf00      	nop

} // TIM5_IRQh
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40000c00 	.word	0x40000c00
 8003944:	20012fc4 	.word	0x20012fc4

08003948 <_ZN2LL7logic_tD1Ev>:
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fae2 	bl	8001f1c <_ZN9VgascreenD1Ev>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <_Z41__static_initialization_and_destruction_0ii>:

} // namespace LL
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10c      	bne.n	800398e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800397a:	4293      	cmp	r3, r2
 800397c:	d107      	bne.n	800398e <_Z41__static_initialization_and_destruction_0ii+0x2a>
logic_t logic;
 800397e:	4806      	ldr	r0, [pc, #24]	; (8003998 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003980:	f7ff fbe3 	bl	800314a <_ZN2LL7logic_tC1Ev>
 8003984:	4a05      	ldr	r2, [pc, #20]	; (800399c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003986:	4906      	ldr	r1, [pc, #24]	; (80039a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003988:	4803      	ldr	r0, [pc, #12]	; (8003998 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800398a:	f000 f876 	bl	8003a7a <__aeabi_atexit>
} // namespace LL
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20012fc4 	.word	0x20012fc4
 800399c:	20000000 	.word	0x20000000
 80039a0:	08003949 	.word	0x08003949

080039a4 <_GLOBAL__sub_I__ZN2LL5logicE>:
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039ac:	2001      	movs	r0, #1
 80039ae:	f7ff ffd9 	bl	8003964 <_Z41__static_initialization_and_destruction_0ii>
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <_ZN2UI7init_UIEv>:

//--------------------------------------------------------------
// Initiate UI.
//--------------------------------------------------------------
void init_UI(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
	IO::init_IO();
 80039b8:	f7ff fbc1 	bl	800313e <_ZN2IO7init_IOEv>
	LL::init_LL();
 80039bc:	f7ff fbe6 	bl	800318c <_ZN2LL7init_LLEv>
} // initUI
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_ZN2UI9main_LoopEv>:

//--------------------------------------------------------------
// MainLoop UI.
//-------------------------------------------------------------
void main_Loop()
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b09c      	sub	sp, #112	; 0x70
 80039c8:	af00      	add	r7, sp, #0
	int buffered;  				//Buffered flag
	int err = RESET;			//Error flag
 80039ca:	2300      	movs	r3, #0
 80039cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	char buf[BUFFER_LENGTH];	//Input buffer.

	while (true)
	{
		buffered = IO::read(buf);		//Get input from the IO-layer.
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fba2 	bl	800311a <_ZN2IO4readEPc>
 80039d6:	66b8      	str	r0, [r7, #104]	; 0x68

		if (buffered == SET)			//Check if theres a new input.
 80039d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <_ZN2UI9main_LoopEv+0x26>
		{
			err = LL::set_Command(buf);
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fe51 	bl	8003688 <_ZN2LL11set_CommandEPc>
 80039e6:	66f8      	str	r0, [r7, #108]	; 0x6c
 80039e8:	e005      	b.n	80039f6 <_ZN2UI9main_LoopEv+0x32>
		}else if(buffered == RESET){		//If there's no new input.
 80039ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <_ZN2UI9main_LoopEv+0x32>
			err = LL::exec();				//Execute the buffered commands.
 80039f0:	f7ff fc26 	bl	8003240 <_ZN2LL4execEv>
 80039f4:	66f8      	str	r0, [r7, #108]	; 0x6c
		}

		if(err > 0)
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dde8      	ble.n	80039ce <_ZN2UI9main_LoopEv+0xa>
		{
			write_Error(err);
 80039fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80039fe:	f000 f801 	bl	8003a04 <_ZN2UI11write_ErrorEi>
		buffered = IO::read(buf);		//Get input from the IO-layer.
 8003a02:	e7e4      	b.n	80039ce <_ZN2UI9main_LoopEv+0xa>

08003a04 <_ZN2UI11write_ErrorEi>:

//--------------------------------------------------------------
// Write error message.
//--------------------------------------------------------------
void write_Error(int err)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	char *str;
	if(ERRORS==1)
	{
		switch(err)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b0b      	cmp	r3, #11
 8003a10:	d002      	beq.n	8003a18 <_ZN2UI11write_ErrorEi+0x14>
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d006      	beq.n	8003a24 <_ZN2UI11write_ErrorEi+0x20>
			case 12:
				str = (char*)"Commmannd buffer vol. eerste commands worden verwijderd.";
				IO::write(str);
				break;
			default:
				return;
 8003a16:	e00b      	b.n	8003a30 <_ZN2UI11write_ErrorEi+0x2c>
				str = (char*)"Command buffer leeg/Slechte input ontvangen.";
 8003a18:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <_ZN2UI11write_ErrorEi+0x34>)
 8003a1a:	60fb      	str	r3, [r7, #12]
				IO::write(str);
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7ff fb71 	bl	8003104 <_ZN2IO5writeEPc>
				break;
 8003a22:	e005      	b.n	8003a30 <_ZN2UI11write_ErrorEi+0x2c>
				str = (char*)"Commmannd buffer vol. eerste commands worden verwijderd.";
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <_ZN2UI11write_ErrorEi+0x38>)
 8003a26:	60fb      	str	r3, [r7, #12]
				IO::write(str);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7ff fb6b 	bl	8003104 <_ZN2IO5writeEPc>
				break;
 8003a2e:	bf00      	nop
				break;
		}

	}
}	// Write error
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08003e78 	.word	0x08003e78
 8003a3c:	08003ea8 	.word	0x08003ea8

08003a40 <main>:
 **  Abstract: main program
 **
 **===========================================================================
 */
int main(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
	 *  Otherwise the interrupt table located in flash will be used.
	 *  See also the <system_*.c> file and how the SystemInit() function updates
	 *  SCB->VTOR register.
	 *  E.g.  SCB->VTOR = 0x20000000;
	 */
	SystemInit(); // System speed to 168MHz
 8003a44:	f7fc fea2 	bl	800078c <SystemInit>

	UI::init_UI();	//init the UI.
 8003a48:	f7ff ffb4 	bl	80039b4 <_ZN2UI7init_UIEv>

	/* Infinite loop */
	while (1)
	{
		UI::main_Loop();		//Main program loop.
 8003a4c:	f7ff ffba 	bl	80039c4 <_ZN2UI9main_LoopEv>
 8003a50:	e7fc      	b.n	8003a4c <main+0xc>

08003a52 <EVAL_AUDIO_TransferComplete_CallBack>:
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer,
		uint32_t Size)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8003a5c:	bf00      	nop
}
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8003a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <_ZdlPv>:
 8003a76:	f000 b837 	b.w	8003ae8 <free>

08003a7a <__aeabi_atexit>:
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 b800 	b.w	8003a84 <__cxa_atexit>

08003a84 <__cxa_atexit>:
 8003a84:	b510      	push	{r4, lr}
 8003a86:	4c05      	ldr	r4, [pc, #20]	; (8003a9c <__cxa_atexit+0x18>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	b12c      	cbz	r4, 8003a98 <__cxa_atexit+0x14>
 8003a8c:	460a      	mov	r2, r1
 8003a8e:	4601      	mov	r1, r0
 8003a90:	2002      	movs	r0, #2
 8003a92:	f3af 8000 	nop.w
 8003a96:	bd10      	pop	{r4, pc}
 8003a98:	4620      	mov	r0, r4
 8003a9a:	bd10      	pop	{r4, pc}
 8003a9c:	00000000 	.word	0x00000000

08003aa0 <__libc_init_array>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4e0d      	ldr	r6, [pc, #52]	; (8003ad8 <__libc_init_array+0x38>)
 8003aa4:	4c0d      	ldr	r4, [pc, #52]	; (8003adc <__libc_init_array+0x3c>)
 8003aa6:	1ba4      	subs	r4, r4, r6
 8003aa8:	10a4      	asrs	r4, r4, #2
 8003aaa:	2500      	movs	r5, #0
 8003aac:	42a5      	cmp	r5, r4
 8003aae:	d109      	bne.n	8003ac4 <__libc_init_array+0x24>
 8003ab0:	4e0b      	ldr	r6, [pc, #44]	; (8003ae0 <__libc_init_array+0x40>)
 8003ab2:	4c0c      	ldr	r4, [pc, #48]	; (8003ae4 <__libc_init_array+0x44>)
 8003ab4:	f000 f95c 	bl	8003d70 <_init>
 8003ab8:	1ba4      	subs	r4, r4, r6
 8003aba:	10a4      	asrs	r4, r4, #2
 8003abc:	2500      	movs	r5, #0
 8003abe:	42a5      	cmp	r5, r4
 8003ac0:	d105      	bne.n	8003ace <__libc_init_array+0x2e>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac8:	4798      	blx	r3
 8003aca:	3501      	adds	r5, #1
 8003acc:	e7ee      	b.n	8003aac <__libc_init_array+0xc>
 8003ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad2:	4798      	blx	r3
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	e7f2      	b.n	8003abe <__libc_init_array+0x1e>
 8003ad8:	0800a538 	.word	0x0800a538
 8003adc:	0800a538 	.word	0x0800a538
 8003ae0:	0800a538 	.word	0x0800a538
 8003ae4:	0800a540 	.word	0x0800a540

08003ae8 <free>:
 8003ae8:	4b02      	ldr	r3, [pc, #8]	; (8003af4 <free+0xc>)
 8003aea:	4601      	mov	r1, r0
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	f000 b803 	b.w	8003af8 <_free_r>
 8003af2:	bf00      	nop
 8003af4:	20000064 	.word	0x20000064

08003af8 <_free_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4605      	mov	r5, r0
 8003afc:	2900      	cmp	r1, #0
 8003afe:	d045      	beq.n	8003b8c <_free_r+0x94>
 8003b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b04:	1f0c      	subs	r4, r1, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bfb8      	it	lt
 8003b0a:	18e4      	addlt	r4, r4, r3
 8003b0c:	f000 f921 	bl	8003d52 <__malloc_lock>
 8003b10:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <_free_r+0x98>)
 8003b12:	6813      	ldr	r3, [r2, #0]
 8003b14:	4610      	mov	r0, r2
 8003b16:	b933      	cbnz	r3, 8003b26 <_free_r+0x2e>
 8003b18:	6063      	str	r3, [r4, #4]
 8003b1a:	6014      	str	r4, [r2, #0]
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b22:	f000 b917 	b.w	8003d54 <__malloc_unlock>
 8003b26:	42a3      	cmp	r3, r4
 8003b28:	d90c      	bls.n	8003b44 <_free_r+0x4c>
 8003b2a:	6821      	ldr	r1, [r4, #0]
 8003b2c:	1862      	adds	r2, r4, r1
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	bf04      	itt	eq
 8003b32:	681a      	ldreq	r2, [r3, #0]
 8003b34:	685b      	ldreq	r3, [r3, #4]
 8003b36:	6063      	str	r3, [r4, #4]
 8003b38:	bf04      	itt	eq
 8003b3a:	1852      	addeq	r2, r2, r1
 8003b3c:	6022      	streq	r2, [r4, #0]
 8003b3e:	6004      	str	r4, [r0, #0]
 8003b40:	e7ec      	b.n	8003b1c <_free_r+0x24>
 8003b42:	4613      	mov	r3, r2
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	b10a      	cbz	r2, 8003b4c <_free_r+0x54>
 8003b48:	42a2      	cmp	r2, r4
 8003b4a:	d9fa      	bls.n	8003b42 <_free_r+0x4a>
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	1858      	adds	r0, r3, r1
 8003b50:	42a0      	cmp	r0, r4
 8003b52:	d10b      	bne.n	8003b6c <_free_r+0x74>
 8003b54:	6820      	ldr	r0, [r4, #0]
 8003b56:	4401      	add	r1, r0
 8003b58:	1858      	adds	r0, r3, r1
 8003b5a:	4282      	cmp	r2, r0
 8003b5c:	6019      	str	r1, [r3, #0]
 8003b5e:	d1dd      	bne.n	8003b1c <_free_r+0x24>
 8003b60:	6810      	ldr	r0, [r2, #0]
 8003b62:	6852      	ldr	r2, [r2, #4]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	4401      	add	r1, r0
 8003b68:	6019      	str	r1, [r3, #0]
 8003b6a:	e7d7      	b.n	8003b1c <_free_r+0x24>
 8003b6c:	d902      	bls.n	8003b74 <_free_r+0x7c>
 8003b6e:	230c      	movs	r3, #12
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	e7d3      	b.n	8003b1c <_free_r+0x24>
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	1821      	adds	r1, r4, r0
 8003b78:	428a      	cmp	r2, r1
 8003b7a:	bf04      	itt	eq
 8003b7c:	6811      	ldreq	r1, [r2, #0]
 8003b7e:	6852      	ldreq	r2, [r2, #4]
 8003b80:	6062      	str	r2, [r4, #4]
 8003b82:	bf04      	itt	eq
 8003b84:	1809      	addeq	r1, r1, r0
 8003b86:	6021      	streq	r1, [r4, #0]
 8003b88:	605c      	str	r4, [r3, #4]
 8003b8a:	e7c7      	b.n	8003b1c <_free_r+0x24>
 8003b8c:	bd38      	pop	{r3, r4, r5, pc}
 8003b8e:	bf00      	nop
 8003b90:	20017cbc 	.word	0x20017cbc

08003b94 <strcpy>:
 8003b94:	4603      	mov	r3, r0
 8003b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b9a:	f803 2b01 	strb.w	r2, [r3], #1
 8003b9e:	2a00      	cmp	r2, #0
 8003ba0:	d1f9      	bne.n	8003b96 <strcpy+0x2>
 8003ba2:	4770      	bx	lr

08003ba4 <__strtok_r>:
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	b918      	cbnz	r0, 8003bb0 <__strtok_r+0xc>
 8003ba8:	6810      	ldr	r0, [r2, #0]
 8003baa:	b908      	cbnz	r0, 8003bb0 <__strtok_r+0xc>
 8003bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	460f      	mov	r7, r1
 8003bb4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003bb8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003bbc:	b91e      	cbnz	r6, 8003bc6 <__strtok_r+0x22>
 8003bbe:	b965      	cbnz	r5, 8003bda <__strtok_r+0x36>
 8003bc0:	6015      	str	r5, [r2, #0]
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc6:	42b5      	cmp	r5, r6
 8003bc8:	d1f6      	bne.n	8003bb8 <__strtok_r+0x14>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1ef      	bne.n	8003bae <__strtok_r+0xa>
 8003bce:	6014      	str	r4, [r2, #0]
 8003bd0:	7003      	strb	r3, [r0, #0]
 8003bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	e00c      	b.n	8003bf2 <__strtok_r+0x4e>
 8003bd8:	b915      	cbnz	r5, 8003be0 <__strtok_r+0x3c>
 8003bda:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003bde:	460e      	mov	r6, r1
 8003be0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	d1f7      	bne.n	8003bd8 <__strtok_r+0x34>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f3      	beq.n	8003bd4 <__strtok_r+0x30>
 8003bec:	2300      	movs	r3, #0
 8003bee:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003bf2:	6014      	str	r4, [r2, #0]
 8003bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bf6 <strtok_r>:
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f7ff bfd4 	b.w	8003ba4 <__strtok_r>

08003bfc <_strtol_l.isra.0>:
 8003bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	4680      	mov	r8, r0
 8003c02:	4689      	mov	r9, r1
 8003c04:	4692      	mov	sl, r2
 8003c06:	461f      	mov	r7, r3
 8003c08:	468b      	mov	fp, r1
 8003c0a:	465d      	mov	r5, fp
 8003c0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c12:	f000 f889 	bl	8003d28 <__locale_ctype_ptr_l>
 8003c16:	4420      	add	r0, r4
 8003c18:	7846      	ldrb	r6, [r0, #1]
 8003c1a:	f016 0608 	ands.w	r6, r6, #8
 8003c1e:	d10b      	bne.n	8003c38 <_strtol_l.isra.0+0x3c>
 8003c20:	2c2d      	cmp	r4, #45	; 0x2d
 8003c22:	d10b      	bne.n	8003c3c <_strtol_l.isra.0+0x40>
 8003c24:	782c      	ldrb	r4, [r5, #0]
 8003c26:	2601      	movs	r6, #1
 8003c28:	f10b 0502 	add.w	r5, fp, #2
 8003c2c:	b167      	cbz	r7, 8003c48 <_strtol_l.isra.0+0x4c>
 8003c2e:	2f10      	cmp	r7, #16
 8003c30:	d114      	bne.n	8003c5c <_strtol_l.isra.0+0x60>
 8003c32:	2c30      	cmp	r4, #48	; 0x30
 8003c34:	d00a      	beq.n	8003c4c <_strtol_l.isra.0+0x50>
 8003c36:	e011      	b.n	8003c5c <_strtol_l.isra.0+0x60>
 8003c38:	46ab      	mov	fp, r5
 8003c3a:	e7e6      	b.n	8003c0a <_strtol_l.isra.0+0xe>
 8003c3c:	2c2b      	cmp	r4, #43	; 0x2b
 8003c3e:	bf04      	itt	eq
 8003c40:	782c      	ldrbeq	r4, [r5, #0]
 8003c42:	f10b 0502 	addeq.w	r5, fp, #2
 8003c46:	e7f1      	b.n	8003c2c <_strtol_l.isra.0+0x30>
 8003c48:	2c30      	cmp	r4, #48	; 0x30
 8003c4a:	d127      	bne.n	8003c9c <_strtol_l.isra.0+0xa0>
 8003c4c:	782b      	ldrb	r3, [r5, #0]
 8003c4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c52:	2b58      	cmp	r3, #88	; 0x58
 8003c54:	d14b      	bne.n	8003cee <_strtol_l.isra.0+0xf2>
 8003c56:	786c      	ldrb	r4, [r5, #1]
 8003c58:	2710      	movs	r7, #16
 8003c5a:	3502      	adds	r5, #2
 8003c5c:	2e00      	cmp	r6, #0
 8003c5e:	bf0c      	ite	eq
 8003c60:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003c64:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003c68:	2200      	movs	r2, #0
 8003c6a:	fbb1 fef7 	udiv	lr, r1, r7
 8003c6e:	4610      	mov	r0, r2
 8003c70:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003c74:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003c78:	2b09      	cmp	r3, #9
 8003c7a:	d811      	bhi.n	8003ca0 <_strtol_l.isra.0+0xa4>
 8003c7c:	461c      	mov	r4, r3
 8003c7e:	42a7      	cmp	r7, r4
 8003c80:	dd1d      	ble.n	8003cbe <_strtol_l.isra.0+0xc2>
 8003c82:	1c53      	adds	r3, r2, #1
 8003c84:	d007      	beq.n	8003c96 <_strtol_l.isra.0+0x9a>
 8003c86:	4586      	cmp	lr, r0
 8003c88:	d316      	bcc.n	8003cb8 <_strtol_l.isra.0+0xbc>
 8003c8a:	d101      	bne.n	8003c90 <_strtol_l.isra.0+0x94>
 8003c8c:	45a4      	cmp	ip, r4
 8003c8e:	db13      	blt.n	8003cb8 <_strtol_l.isra.0+0xbc>
 8003c90:	fb00 4007 	mla	r0, r0, r7, r4
 8003c94:	2201      	movs	r2, #1
 8003c96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c9a:	e7eb      	b.n	8003c74 <_strtol_l.isra.0+0x78>
 8003c9c:	270a      	movs	r7, #10
 8003c9e:	e7dd      	b.n	8003c5c <_strtol_l.isra.0+0x60>
 8003ca0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003ca4:	2b19      	cmp	r3, #25
 8003ca6:	d801      	bhi.n	8003cac <_strtol_l.isra.0+0xb0>
 8003ca8:	3c37      	subs	r4, #55	; 0x37
 8003caa:	e7e8      	b.n	8003c7e <_strtol_l.isra.0+0x82>
 8003cac:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003cb0:	2b19      	cmp	r3, #25
 8003cb2:	d804      	bhi.n	8003cbe <_strtol_l.isra.0+0xc2>
 8003cb4:	3c57      	subs	r4, #87	; 0x57
 8003cb6:	e7e2      	b.n	8003c7e <_strtol_l.isra.0+0x82>
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	e7eb      	b.n	8003c96 <_strtol_l.isra.0+0x9a>
 8003cbe:	1c53      	adds	r3, r2, #1
 8003cc0:	d108      	bne.n	8003cd4 <_strtol_l.isra.0+0xd8>
 8003cc2:	2322      	movs	r3, #34	; 0x22
 8003cc4:	f8c8 3000 	str.w	r3, [r8]
 8003cc8:	4608      	mov	r0, r1
 8003cca:	f1ba 0f00 	cmp.w	sl, #0
 8003cce:	d107      	bne.n	8003ce0 <_strtol_l.isra.0+0xe4>
 8003cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd4:	b106      	cbz	r6, 8003cd8 <_strtol_l.isra.0+0xdc>
 8003cd6:	4240      	negs	r0, r0
 8003cd8:	f1ba 0f00 	cmp.w	sl, #0
 8003cdc:	d00c      	beq.n	8003cf8 <_strtol_l.isra.0+0xfc>
 8003cde:	b122      	cbz	r2, 8003cea <_strtol_l.isra.0+0xee>
 8003ce0:	3d01      	subs	r5, #1
 8003ce2:	f8ca 5000 	str.w	r5, [sl]
 8003ce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cea:	464d      	mov	r5, r9
 8003cec:	e7f9      	b.n	8003ce2 <_strtol_l.isra.0+0xe6>
 8003cee:	2430      	movs	r4, #48	; 0x30
 8003cf0:	2f00      	cmp	r7, #0
 8003cf2:	d1b3      	bne.n	8003c5c <_strtol_l.isra.0+0x60>
 8003cf4:	2708      	movs	r7, #8
 8003cf6:	e7b1      	b.n	8003c5c <_strtol_l.isra.0+0x60>
 8003cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003cfc <strtol>:
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <strtol+0x24>)
 8003cfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d00:	681c      	ldr	r4, [r3, #0]
 8003d02:	4d08      	ldr	r5, [pc, #32]	; (8003d24 <strtol+0x28>)
 8003d04:	6a23      	ldr	r3, [r4, #32]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf08      	it	eq
 8003d0a:	462b      	moveq	r3, r5
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	460a      	mov	r2, r1
 8003d12:	4601      	mov	r1, r0
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7ff ff71 	bl	8003bfc <_strtol_l.isra.0>
 8003d1a:	b003      	add	sp, #12
 8003d1c:	bd30      	pop	{r4, r5, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000064 	.word	0x20000064
 8003d24:	200000c8 	.word	0x200000c8

08003d28 <__locale_ctype_ptr_l>:
 8003d28:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003d2c:	4770      	bx	lr

08003d2e <__ascii_mbtowc>:
 8003d2e:	b082      	sub	sp, #8
 8003d30:	b901      	cbnz	r1, 8003d34 <__ascii_mbtowc+0x6>
 8003d32:	a901      	add	r1, sp, #4
 8003d34:	b142      	cbz	r2, 8003d48 <__ascii_mbtowc+0x1a>
 8003d36:	b14b      	cbz	r3, 8003d4c <__ascii_mbtowc+0x1e>
 8003d38:	7813      	ldrb	r3, [r2, #0]
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	1c10      	adds	r0, r2, #0
 8003d40:	bf18      	it	ne
 8003d42:	2001      	movne	r0, #1
 8003d44:	b002      	add	sp, #8
 8003d46:	4770      	bx	lr
 8003d48:	4610      	mov	r0, r2
 8003d4a:	e7fb      	b.n	8003d44 <__ascii_mbtowc+0x16>
 8003d4c:	f06f 0001 	mvn.w	r0, #1
 8003d50:	e7f8      	b.n	8003d44 <__ascii_mbtowc+0x16>

08003d52 <__malloc_lock>:
 8003d52:	4770      	bx	lr

08003d54 <__malloc_unlock>:
 8003d54:	4770      	bx	lr

08003d56 <__ascii_wctomb>:
 8003d56:	b149      	cbz	r1, 8003d6c <__ascii_wctomb+0x16>
 8003d58:	2aff      	cmp	r2, #255	; 0xff
 8003d5a:	bf85      	ittet	hi
 8003d5c:	238a      	movhi	r3, #138	; 0x8a
 8003d5e:	6003      	strhi	r3, [r0, #0]
 8003d60:	700a      	strbls	r2, [r1, #0]
 8003d62:	f04f 30ff 	movhi.w	r0, #4294967295
 8003d66:	bf98      	it	ls
 8003d68:	2001      	movls	r0, #1
 8003d6a:	4770      	bx	lr
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4770      	bx	lr

08003d70 <_init>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr

08003d7c <_fini>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr
