/*
 * LogicLayer.cpp
 *
 *  Created on: May 20, 2018
 *      Author: M
 */

#include <LogicLayer.h>
//#include <cstring>
#include <iostream>
#include <stdio.h>
#include<stdlib.h>
#include <string.h>
#include <exception>
#include <new>
//#include <vector>
using namespace std;


/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
LogicLayer::LogicLayer() {
	// TODO Auto-generated constructor stub
	screen = Vgascreen();
	bufCount = 0;
	lastCount = 0;
	//inputArray = (char**)malloc(10 * sizeof(char*));
	for(int i = 0;i < INPUT_LENGTH; i++){
		inputArray[i] = (char*)malloc(10* sizeof(char));
	}
	//command = command_10;
	//malloc(sizeof(char)* 10);
}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
LogicLayer::~LogicLayer() {
	// TODO Auto-generated destructor stub
}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::exec(){
	int i = 0;
	const char *str;
	char str2[10],str3[10],str4[10],str5[10],str6[10];
	int a,b,c,d,e,f;

	str = getInput(i);

	if (strcmp(str, "clearscherm") == 0){					//Command zonder int.
		//color
		//screen.clear_screen();
	}else{													//Command met 1x int.
		a = (int)strtol(inputArray[1], NULL, 10);
		if (strcmp(str, "wacht")){
			waitMs(a);
		}else{
			b = (int)strtol(inputArray[2], NULL, 10);		//Commands met 2x int.
			if (strcmp(str, "tekst")){
				//color
				//style
				screen.draw_text(a,b,inputArray[3],55,4);
			}else{											//Commands met 3x int.
				c = (int)strtol(inputArray[3], NULL, 10);
				if (strcmp(str, "bitmap")){
					//color
					screen.draw_bitmap(a,b,c,55);
				}else{										//Commands met 4x int.
					d = (int)strtol(inputArray[4], NULL, 10);
					if (strcmp(str, "rechthoek")){
						//color
						screen.draw_rectangle(a,b,c,d,55);
					}else{

					}
				}
			}
		}

	}

	clearInputArray();
	return 0;
}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::setCommand(char *buf){
	int i = 1;
	int j = 1;
	char str[100];
	strcpy(str, buf);
	char *saveptr;
	char *out;

	out = strtok_r(str, ",", &saveptr);
	inputArray[0]=out;

	while(out != NULL){
		out = strtok_r(NULL, ",", &saveptr);
		inputArray[i] = out;
		i++;
	}
	exec();
	return 0;
}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::clearCommands(){

}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::repeat(){

}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::addLastCommand(){

}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::clearLastCommands(){

}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::execBuffer(){

}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::addBufCommand(){

}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::clearBufCommands(){

}

/*!
 * \brief teken een lijn.
 * \param paramter int.
 */
int LogicLayer::waitMs(){

}

void LogicLayer::clearInputArray(){
	for(int i = 0; i< INPUT_LENGTH; i++){
		inputArray[i] = 0;
	}
}

char* LogicLayer::getInput(int index){
	return inputArray[index];
}



