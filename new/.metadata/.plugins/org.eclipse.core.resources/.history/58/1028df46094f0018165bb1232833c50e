/*
 * Vgascreen.cpp
 *
 *  Created on: May 3, 2018
 *      Author: M
 */

#include <stm32_ub_vga_screen.h>
#include <stdlib.h>
#include <Vgascreen.h>
#include <algorithm>

Vgascreen::Vgascreen() {
	// TODO Auto-generated constructor stub
	x_pos = 0;
	y_pos= 0;
	init_VGA();
}

Vgascreen::~Vgascreen() {
	// TODO Auto-generated destructor stub
}


int Vgascreen::init_VGA(){
	UB_VGA_Screen_Init(); // Init VGA-Screen
	UB_VGA_FillScreen(VGA_COL_GREEN);// Set screen green.
}

int VGA_pos(int x, int y){
	x_pos = x;
	y_pos = y;
}

int Vgascreen::draw_line(int x1, int y1, int x2, int y2, int width, int color){
	const int dx = abs(x1-x2);
	const int dy = abs(y1-y2);
	bool a= true;

	if(dy>dx){
		std::swap(x1, y1);
		std::swap(x2, y2);

	}

	if(x1>x2){
		std::swap(x1,x2);
		std::swap(y1,y2);
	}

	if(y1>y2){
		a = false;
	}

	int y;

	for(int j = 0; j<= width; j++){
		for(int i = x1; i< x2; i++){

			if(a){
				y = y1 + dy * (i - x1) / dx;
			}else {
				y = y1 - dy * (i - x1) / dx;
			}
			int xset = i;
			if (dx>dy){
				UB_VGA_SetPixel((xset),(y),254);
			}else{
				UB_VGA_SetPixel((y),(xset),254);
			}
		}

		y1 += 1;
		y2 += 1;

	}
	return 0;
}

