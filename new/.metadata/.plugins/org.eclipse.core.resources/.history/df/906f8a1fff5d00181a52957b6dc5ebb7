#include "stm32f10x.h"
# include "platform_config.h"

/ * van Private variabelen An --------------------------- * ------------------------------ /
USART_InitTypeDef USART_InitStructure;
uint8_t TxBuffer [16];
uint8_t RxBuffer [16];

/ * Private functieprototypen --------------------------------------------- - * /
void RCC_Configuration (void);
ongeldig GPIO_Configuration (void);
void DMA_Configuration (void);

main int (void)
{
  / * * Configuratiesysteem Klokken /
  RCC_Configuration ();
  / * De het configureren GPIO poorten * /
  GPIO_Configuration ();
  / * De het configureren DMA * /
  DMA_Configuration ();

/ * USARTy en USARTz configuratie -------------------------------------------- * ---------- /
  / * USARTy en USARTz geconfigureerd als het volgt:
        - baudrate = 230400 baud
        - Word de lengte = 8 bits
        - degene het stopbit
        - Geen pariteit
        - de hardware flow control uitgeschakeld (RTS en CTS-signalen)
        - het ontvangen en verzenden timeout de ingeschakelde
  * /
  USART_InitStructure.USART_BaudRate = 115200;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  / * * Configure USARTy /
  USART_Init (USART1 & USART_InitStructure);

  / * Het inschakelen van de DMA USARTy de Rx en TX aanvraag * /
  USART_DMACmd (USART1, USART_DMAReq_Rx | USART_DMAReq_Tx de ENABLE);

  / * Het inschakelen USARTy de TX DMA1 kanaal * /
 DMA_Cmd (DMA1_Channel4 de ENABLE);
  / * Het inschakelen DMA1 Channel USARTy de RX * /
 DMA_Cmd (DMA1_Channel5, het mogelijk te maken);

  / * Het inschakelen de USART * /
  USART_Cmd (USART1 de ENABLE);

  / * Wacht tot USARTy TX DMA1 Channel Transfer Compleet * /
  while (DMA_GetFlagStatus (USARTy_Tx_DMA_FLAG) == RESET)
  {
  }
  / * Wacht tot USARTy DMA1 RX Channel overdracht te voltooien * /
  while (DMA_GetFlagStatus (USARTy_Rx_DMA_FLAG) == RESET)
  {
  }

  while (1)
  {
  }
}

void RCC_Configuration (void)
{
  / * * DMA klok inschakelen /
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_DMA1, ENABLE);

  / * De Schakel de GPIO klok * /
  RCC_APB2PeriphClockCmd (RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO de ENABLE);

  / * De optie USART1 Clock * /
  RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1, het mogelijk te maken);
}

Void GPIO_Configuration (void)
{
  GPIO_InitTypeDef GPIO_InitStructure;

  / * De USARTy configureren Rx ingang de zwevende zoals bij de * /
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init (GPIOA & GPIO_InitStructure);

  / * De USARTy Configureer de Tx als bij de andere functie van de push-pull * /
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init (GPIOA & GPIO_InitStructure);
}


Void DMA_Configuration (void)
{
  DMA_InitTypeDef DMA_InitStructure;

  / * USARTy DMA1 TX Channel (geactiveerd door gebeurtenis USARTy Tx) Config * /
  DMA_DeInit (DMA1_Channel4);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & USART1-> DR; // 0x40013804;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) TxBuffer;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
  DMA_InitStructure.DMA_BufferSize = 16;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init (DMA1_Channel4 & DMA_InitStructure);

  / * USARTy DMA1 RX Channel (geactiveerd door gebeurtenis USARTy Rx) Config * /
  DMA_DeInit (DMA1_Channel5);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & USART1-> DR; // 0x40013804;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) RxBuffer;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = 16;
  DMA_Init (DMA1_Channel5 & DMA_InitStructure);
}
